
Ex3test1.elf:     file format elf32-littlenios2
Ex3test1.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x080001bc

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000f780 memsz 0x0000f780 flags r-x
    LOAD off    0x000107a0 vaddr 0x0800f7a0 paddr 0x080112b8 align 2**12
         filesz 0x00001b18 memsz 0x00001b18 flags rw-
    LOAD off    0x00012dd0 vaddr 0x08012dd0 paddr 0x08012dd0 align 2**12
         filesz 0x00000000 memsz 0x0000015c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   0000019c  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f244  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003a0  0800f400  0800f400  00010400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b18  0800f7a0  080112b8  000107a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000015c  08012dd0  08012dd0  00012dd0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  08012f2c  08012f2c  000122b8  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000122b8  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ce8  00000000  00000000  000122e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023a97  00000000  00000000  00012fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008faa  00000000  00000000  00036a5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000ae2c  00000000  00000000  0003fa09  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002254  00000000  00000000  0004a838  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003382  00000000  00000000  0004ca8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00016d3e  00000000  00000000  0004fe0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000020  00000000  00000000  00066b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001368  00000000  00000000  00066b70  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006b21b  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006b21e  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006b22a  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006b22b  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006b22c  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006b237  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006b242  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0006b24d  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000060  00000000  00000000  0006b258  2**0
                  CONTENTS, READONLY
 26 .jdi          00004b4c  00000000  00000000  0006b2b8  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00068066  00000000  00000000  0006fe04  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
080001bc l    d  .text	00000000 .text
0800f400 l    d  .rodata	00000000 .rodata
0800f7a0 l    d  .rwdata	00000000 .rwdata
08012dd0 l    d  .bss	00000000 .bss
08012f2c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../Ex3test1_bsp//obj/HAL/src/crt0.o
080001f4 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
08000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800f4ce l     O .rodata	00000010 zeroes.4181
0800f4de l     O .rodata	00000010 blanks.4180
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08002724 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080042a4 l     F .text	00000008 __fp_lock
080042ac l     F .text	00000008 __fp_unlock
080042c0 l     F .text	000001a0 __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0800f7a0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0800fbe4 l     O .rwdata	00000020 lc_ctype_charset
0800fbc4 l     O .rwdata	00000020 lc_message_charset
0800fc04 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0800f510 l     O .rodata	0000000c p05.2678
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
08007720 l     F .text	000000fc __sprint_r.part.0
0800f644 l     O .rodata	00000010 blanks.4125
0800f634 l     O .rodata	00000010 zeroes.4126
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800a03c l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800c768 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800c888 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800c8b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800c9b4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800caa8 l     F .text	00000064 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800cb8c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800cd68 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
080112a8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0800cfc4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800d10c l     F .text	00000038 alt_dev_reg
080101ec l     O .rwdata	00001060 jtag_uart_0
0801124c l     O .rwdata	0000002c character_lcd_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800d410 l     F .text	00000204 altera_avalon_jtag_uart_irq
0800d614 l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800dc34 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800e364 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800e8a0 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800e9d8 l     F .text	00000050 alt_get_errno
0800ea28 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08006d60 g     F .text	00000074 _mprec_log10
08006e4c g     F .text	0000008c __any_on
08009070 g     F .text	00000054 _isatty_r
0800f51c g     O .rodata	00000028 __mprec_tinytens
0800ccb0 g     F .text	00000078 alt_main
08000470 g     F .text	000000b8 _puts_r
08012e2c g     O .bss	00000100 alt_irq
080090c4 g     F .text	0000005c _lseek_r
080112b8 g       *ABS*	00000000 __flash_rwdata_start
0800dda4 g     F .text	0000003c alt_up_character_lcd_send_cmd
0800b2d0 g     F .text	00000084 .hidden __eqdf2
08012f2c g       *ABS*	00000000 __alt_heap_start
08000434 g     F .text	0000003c printf
080092ec g     F .text	0000009c _wcrtomb_r
08007618 g     F .text	0000005c __sseek
080045f4 g     F .text	00000010 __sinit
0800917c g     F .text	00000154 __swbuf_r
0800506c g     F .text	0000007c _setlocale_r
08004460 g     F .text	00000064 __sfmoreglue
0800cd48 g     F .text	00000020 __malloc_unlock
08005ccc g     F .text	0000015c memmove
080045dc g     F .text	00000018 _cleanup
08005f4c g     F .text	000000a8 _Balloc
0800b354 g     F .text	000000e0 .hidden __gtdf2
00000000  w      *UND*	00000000 __errno
0800dd30 g     F .text	00000074 get_DDRAM_addr
08000000 g     F .entry	0000001c __reset
08000020 g       *ABS*	00000000 __flash_exceptions_start
08009018 g     F .text	00000058 _fstat_r
08012de8 g     O .bss	00000004 errno
08007594 g     F .text	00000008 __seofread
08012df0 g     O .bss	00000004 alt_argv
08019278 g       *ABS*	00000000 _gp
08000314 g     F .text	00000044 putcharRS232
0801006c g     O .rwdata	00000180 alt_fd_list
080003bc g     F .text	0000004c RS232TestForReceivedData
0800e510 g     F .text	00000090 alt_find_dev
08005b94 g     F .text	00000138 memcpy
0800df40 g     F .text	00000050 alt_up_character_lcd_write_fd
080002d8 g     F .text	0000003c Init_RS232
080042b4 g     F .text	0000000c _cleanup_r
0800c590 g     F .text	000000d0 .hidden __floatsidf
0800e960 g     F .text	00000078 alt_io_redirect
0800b434 g     F .text	000000e0 .hidden __ltdf2
0800f400 g       *ABS*	00000000 __DTOR_END__
08000528 g     F .text	00000014 puts
08007478 g     F .text	00000074 __fpclassifyd
08006cbc g     F .text	000000a4 __ratio
08008b90 g     F .text	00000024 __vfiprintf_internal
0800d810 g     F .text	0000020c altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
08000408 g     F .text	0000002c _printf_r
0800a158 g     F .text	00000008 .hidden __udivsi3
0800ca04 g     F .text	000000a4 isatty
0800f56c g     O .rodata	000000c8 __mprec_tens
080050e8 g     F .text	0000000c __locale_charset
0800efd0 g     F .text	0000008c alt_icache_flush
08012de4 g     O .bss	00000004 __malloc_top_pad
08011280 g     O .rwdata	00000004 __mb_cur_max
08005118 g     F .text	0000000c _localeconv_r
0800634c g     F .text	0000003c __i2b
08004a58 g     F .text	000004a4 __sfvwrite_r
080074ec g     F .text	00000054 _sbrk_r
08009120 g     F .text	0000005c _read_r
080112a0 g     O .rwdata	00000004 alt_max_fd
08008d28 g     F .text	00000100 _fclose_r
08004274 g     F .text	00000030 fflush
08012de0 g     O .bss	00000004 __malloc_max_sbrked_mem
0800a168 g     F .text	0000089c .hidden __adddf3
08006a64 g     F .text	0000011c __b2d
08009aac g     F .text	00000590 .hidden __umoddi3
0800cbdc g     F .text	000000d4 lseek
08011278 g     O .rwdata	00000004 _global_impure_ptr
08006ed8 g     F .text	000005a0 _realloc_r
08012f2c g       *ABS*	00000000 __bss_end
0800e7b0 g     F .text	000000f0 alt_iic_isr_register
0800ece4 g     F .text	00000104 alt_tick
080094ec g     F .text	000005c0 .hidden __udivdi3
08008e3c g     F .text	00000184 _fputwc_r
0800f544 g     O .rodata	00000028 __mprec_bigtens
08006130 g     F .text	00000104 __s2b
0800c660 g     F .text	000000a4 .hidden __floatunsidf
0800680c g     F .text	00000060 __mcmp
08004614 g     F .text	00000018 __fp_lock_all
0800e764 g     F .text	0000004c alt_ic_irq_enabled
0800ec4c g     F .text	00000098 alt_alarm_stop
08012df8 g     O .bss	00000004 alt_irq_active
080000ec g     F .exceptions	000000d0 alt_irq_handler
08010044 g     O .rwdata	00000028 alt_dev_null
0800e1d4 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0800e348 g     F .text	0000001c alt_dcache_flush_all
08006234 g     F .text	00000068 __hi0bits
0800c508 g     F .text	00000088 .hidden __fixdfsi
080112b8 g       *ABS*	00000000 __ram_rwdata_end
08011298 g     O .rwdata	00000008 alt_dev_list
0800d014 g     F .text	000000f8 write
0800f7a0 g       *ABS*	00000000 __ram_rodata_end
0800c904 g     F .text	000000b0 fstat
0800b434 g     F .text	000000e0 .hidden __ledf2
08006584 g     F .text	00000140 __pow5mult
08007834 g     F .text	0000135c ___vfiprintf_internal_r
08012dd8 g     O .bss	00000004 __nlocale_changed
0800a160 g     F .text	00000008 .hidden __umodsi3
08012f2c g       *ABS*	00000000 end
0800d34c g     F .text	000000c4 altera_avalon_jtag_uart_init
0800f400 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800dca8 g     F .text	00000088 alt_avalon_timer_sc_init
0800c704 g     F .text	00000064 .hidden __clzsi2
0800da1c g     F .text	00000218 altera_avalon_jtag_uart_write
08004604 g     F .text	00000004 __sfp_lock_acquire
08005aac g     F .text	000000e8 memchr
0800de54 g     F .text	00000078 alt_up_character_lcd_write
080005d4 g     F .text	00001ffc ___vfprintf_internal_r
08004768 g     F .text	000002f0 _free_r
080050f4 g     F .text	00000010 __locale_mb_cur_max
0800f238 g     F .text	00000194 __call_exitprocs
08012dd4 g     O .bss	00000004 __mlocale_changed
08011284 g     O .rwdata	00000004 __malloc_sbrk_base
080001bc g     F .text	0000003c _start
08012dfc g     O .bss	00000004 _alt_tick_rate
080066c4 g     F .text	00000148 __lshift
08012e00 g     O .bss	00000004 _alt_nticks
0800cdb8 g     F .text	000000fc read
0800d178 g     F .text	00000070 alt_sys_init
0800e08c g     F .text	00000088 alt_up_character_lcd_shift_display
0800f124 g     F .text	00000114 __register_exitproc
08006388 g     F .text	000001fc __multiply
0800e114 g     F .text	0000008c alt_up_character_lcd_erase_pos
0800d6bc g     F .text	00000068 altera_avalon_jtag_uart_close
0800f7a0 g       *ABS*	00000000 __ram_rwdata_start
0800f400 g       *ABS*	00000000 __ram_rodata_start
08012e04 g     O .bss	00000028 __malloc_current_mallinfo
08006b80 g     F .text	0000013c __d2b
0800d1e8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800ef1c g     F .text	000000b4 alt_get_fd
08008c10 g     F .text	00000054 _close_r
0800f0a8 g     F .text	0000007c memcmp
0800d2a8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08012f2c g       *ABS*	00000000 __alt_stack_base
0800d2f8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
080025f4 g     F .text	00000130 __swsetup_r
0800aa04 g     F .text	000008cc .hidden __divdf3
080044c4 g     F .text	00000118 __sfp
08006dd4 g     F .text	00000078 __copybits
0800fc3c g     O .rwdata	00000408 __malloc_av_
08004610 g     F .text	00000004 __sinit_lock_release
0800b514 g     F .text	00000724 .hidden __muldf3
08007540 g     F .text	00000054 __sread
0800ee08 g     F .text	00000114 alt_find_file
0800e3b4 g     F .text	000000a4 alt_dev_llist_insert
0800cd28 g     F .text	00000020 __malloc_lock
0800cf14 g     F .text	000000b0 sbrk
0800404c g     F .text	00000228 _fflush_r
08008c64 g     F .text	000000c4 _calloc_r
08012dd0 g       *ABS*	00000000 __bss_start
08005e28 g     F .text	00000124 memset
080001f8 g     F .text	000000e0 main
08012df4 g     O .bss	00000004 alt_envp
08012ddc g     O .bss	00000004 __malloc_max_total_mem
0800d248 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
080092d0 g     F .text	0000001c __swbuf
0800e004 g     F .text	00000088 alt_up_character_lcd_shift_cursor
08007674 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
08008e28 g     F .text	00000014 fclose
08002924 g     F .text	00001728 _dtoa_r
08005304 g     F .text	000007a8 _malloc_r
08009460 g     F .text	00000030 __ascii_wctomb
080112a4 g     O .rwdata	00000004 alt_errno
08004efc g     F .text	000000b8 _fwalk
0800a0a8 g     F .text	00000054 .hidden __divsi3
0800de14 g     F .text	00000040 alt_up_character_lcd_open_dev
08004644 g     F .text	00000124 _malloc_trim_r
0800f400 g       *ABS*	00000000 __CTOR_END__
0800dde0 g     F .text	00000034 alt_up_character_lcd_init
0800767c g     F .text	000000a4 strcmp
0800f400 g       *ABS*	00000000 __flash_rodata_start
0800f400 g       *ABS*	00000000 __DTOR_LIST__
0800b2d0 g     F .text	00000084 .hidden __nedf2
0800d144 g     F .text	00000034 alt_irq_init
0800ceb4 g     F .text	00000060 alt_release_fd
0800e1a0 g     F .text	00000034 alt_up_character_lcd_cursor_off
0800f654 g     O .rodata	00000100 .hidden __clz_tab
08012dd0 g     O .bss	00000004 _PathLocale
0800f05c g     F .text	00000014 atexit
08008bb4 g     F .text	0000005c _write_r
08005124 g     F .text	0000001c setlocale
0801127c g     O .rwdata	00000004 _impure_ptr
08012dec g     O .bss	00000004 alt_argc
0800e4b4 g     F .text	0000005c _do_dtors
08005110 g     F .text	00000008 __locale_cjk_lang
08000020 g       .exceptions	00000000 alt_irq_entry
08006a04 g     F .text	00000060 __ulp
0800462c g     F .text	00000018 __fp_unlock_all
08011290 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08005140 g     F .text	0000000c localeconv
08000358 g     F .text	00000064 getcharRS232
0800e5d0 g     F .text	00000050 alt_ic_isr_register
080112b8 g       *ABS*	00000000 _edata
08012f2c g       *ABS*	00000000 _end
080001bc g       *ABS*	00000000 __ram_exceptions_end
0800d724 g     F .text	000000ec altera_avalon_jtag_uart_ioctl
0800e6c0 g     F .text	000000a4 alt_ic_irq_disable
0800759c g     F .text	0000007c __swrite
08011288 g     O .rwdata	00000004 __malloc_trim_threshold
0800ede8 g     F .text	00000020 altera_nios2_qsys_irq_init
08005104 g     F .text	0000000c __locale_msgcharset
0800f070 g     F .text	00000038 exit
08004fb4 g     F .text	000000b8 _fwalk_reent
0800686c g     F .text	00000198 __mdiff
0800a0fc g     F .text	0000005c .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08004608 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800decc g     F .text	00000074 alt_up_character_lcd_string
0800f3cc g     F .text	00000034 _exit
0800e208 g     F .text	00000140 alt_alarm_start
0800514c g     F .text	000001b8 __smakebuf_r
0800053c g     F .text	00000098 strlen
0800eaf4 g     F .text	00000158 open
0800b354 g     F .text	000000e0 .hidden __gedf2
0801128c g     O .rwdata	00000004 __wctomb
0800781c g     F .text	00000018 __sprint_r
0800e5a0 g     F .text	00000030 alt_icache_flush_all
0800df90 g     F .text	00000074 alt_up_character_lcd_set_cursor_pos
080112ac g     O .rwdata	00000004 alt_priority_mask
0800e620 g     F .text	000000a0 alt_ic_irq_enable
080025d0 g     F .text	00000024 __vfprintf_internal
08009490 g     F .text	0000005c _wctomb_r
0800bc38 g     F .text	000008d0 .hidden __subdf3
0800629c g     F .text	000000b0 __lo0bits
080112b0 g     O .rwdata	00000008 alt_alarm_list
0800e458 g     F .text	0000005c _do_ctors
08009388 g     F .text	000000d8 wcrtomb
0800c7b8 g     F .text	000000d0 close
0800cb0c g     F .text	00000080 alt_load
08008fc0 g     F .text	00000058 fputwc
00000000  w      *UND*	00000000 free
0800460c g     F .text	00000004 __sinit_lock_acquire
0800601c g     F .text	00000114 __multadd
08005ff4 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xfc000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08406f14 	ori	at,at,444
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__alt_mem_sdram-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000ec0 	call	80000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000306 	br	8000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)

08000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 8000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 8000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 800009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000e8:	ef80083a 	eret

080000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000ec:	defff904 	addi	sp,sp,-28
 80000f0:	dfc00615 	stw	ra,24(sp)
 80000f4:	df000515 	stw	fp,20(sp)
 80000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 80000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000100:	0005313a 	rdctl	r2,ipending
 8000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000114:	00800044 	movi	r2,1
 8000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800011c:	e0fffb17 	ldw	r3,-20(fp)
 8000120:	e0bffc17 	ldw	r2,-16(fp)
 8000124:	1884703a 	and	r2,r3,r2
 8000128:	10001426 	beq	r2,zero,800017c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800012c:	00820074 	movhi	r2,2049
 8000130:	108b8b04 	addi	r2,r2,11820
 8000134:	e0fffd17 	ldw	r3,-12(fp)
 8000138:	180690fa 	slli	r3,r3,3
 800013c:	10c5883a 	add	r2,r2,r3
 8000140:	10c00017 	ldw	r3,0(r2)
 8000144:	00820074 	movhi	r2,2049
 8000148:	108b8b04 	addi	r2,r2,11820
 800014c:	e13ffd17 	ldw	r4,-12(fp)
 8000150:	200890fa 	slli	r4,r4,3
 8000154:	1105883a 	add	r2,r2,r4
 8000158:	10800104 	addi	r2,r2,4
 800015c:	10800017 	ldw	r2,0(r2)
 8000160:	1009883a 	mov	r4,r2
 8000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800016c:	0005313a 	rdctl	r2,ipending
 8000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000174:	e0bfff17 	ldw	r2,-4(fp)
 8000178:	00000706 	br	8000198 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800017c:	e0bffc17 	ldw	r2,-16(fp)
 8000180:	1085883a 	add	r2,r2,r2
 8000184:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000188:	e0bffd17 	ldw	r2,-12(fp)
 800018c:	10800044 	addi	r2,r2,1
 8000190:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 8000194:	003fe106 	br	800011c <__alt_data_end+0xfc00011c>

    active = alt_irq_pending ();
 8000198:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 800019c:	e0bffb17 	ldw	r2,-20(fp)
 80001a0:	103fdb1e 	bne	r2,zero,8000110 <__alt_data_end+0xfc000110>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a4:	0001883a 	nop
}
 80001a8:	e037883a 	mov	sp,fp
 80001ac:	dfc00117 	ldw	ra,4(sp)
 80001b0:	df000017 	ldw	fp,0(sp)
 80001b4:	dec00204 	addi	sp,sp,8
 80001b8:	f800283a 	ret

Disassembly of section .text:

080001bc <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 80001bc:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 80001c0:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 80001c4:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 80001c8:	d6a49e14 	ori	gp,gp,37496
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 80001cc:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 80001d0:	108b7414 	ori	r2,r2,11728

    movhi r3, %hi(__bss_end)
 80001d4:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 80001d8:	18cbcb14 	ori	r3,r3,12076

    beq r2, r3, 1f
 80001dc:	10c00326 	beq	r2,r3,80001ec <_start+0x30>

0:
    stw zero, (r2)
 80001e0:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 80001e4:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 80001e8:	10fffd36 	bltu	r2,r3,80001e0 <__alt_data_end+0xfc0001e0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 80001ec:	800cb0c0 	call	800cb0c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 80001f0:	800ccb00 	call	800ccb0 <alt_main>

080001f4 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 80001f4:	003fff06 	br	80001f4 <__alt_data_end+0xfc0001f4>

080001f8 <main>:
int putcharRS232(int c);
int getcharRS232( void );
int RS232TestForReceivedData(void);

int main()
{
 80001f8:	defffc04 	addi	sp,sp,-16
 80001fc:	dfc00315 	stw	ra,12(sp)
 8000200:	df000215 	stw	fp,8(sp)
 8000204:	df000204 	addi	fp,sp,8
  printf("Hello from Nios II!\n");
 8000208:	01020074 	movhi	r4,2049
 800020c:	213d0004 	addi	r4,r4,-3072
 8000210:	80005280 	call	8000528 <puts>
  Init_RS232();
 8000214:	80002d80 	call	80002d8 <Init_RS232>
  printf("Finished init RS232\n");
 8000218:	01020074 	movhi	r4,2049
 800021c:	213d0504 	addi	r4,r4,-3052
 8000220:	80005280 	call	8000528 <puts>
  int wValue = putcharRS232(3);
 8000224:	010000c4 	movi	r4,3
 8000228:	80003140 	call	8000314 <putcharRS232>
 800022c:	e0bffe15 	stw	r2,-8(fp)
  printf("Finished putcharRS232. wValue = %d\n", wValue);
 8000230:	01020074 	movhi	r4,2049
 8000234:	213d0a04 	addi	r4,r4,-3032
 8000238:	e17ffe17 	ldw	r5,-8(fp)
 800023c:	80004340 	call	8000434 <printf>
  int rValue = getcharRS232();
 8000240:	80003580 	call	8000358 <getcharRS232>
 8000244:	e0bfff15 	stw	r2,-4(fp)
  printf("Finished getcharRS232. rValue = %d\n", rValue);
 8000248:	01020074 	movhi	r4,2049
 800024c:	213d1304 	addi	r4,r4,-2996
 8000250:	e17fff17 	ldw	r5,-4(fp)
 8000254:	80004340 	call	8000434 <printf>

  wValue = putcharRS232(255);
 8000258:	01003fc4 	movi	r4,255
 800025c:	80003140 	call	8000314 <putcharRS232>
 8000260:	e0bffe15 	stw	r2,-8(fp)
  printf("Finished putcharRS232. wValue = %d\n", wValue);
 8000264:	01020074 	movhi	r4,2049
 8000268:	213d0a04 	addi	r4,r4,-3032
 800026c:	e17ffe17 	ldw	r5,-8(fp)
 8000270:	80004340 	call	8000434 <printf>
  rValue = getcharRS232();
 8000274:	80003580 	call	8000358 <getcharRS232>
 8000278:	e0bfff15 	stw	r2,-4(fp)
  printf("Finished getcharRS232. rValue = %d\n", rValue);
 800027c:	01020074 	movhi	r4,2049
 8000280:	213d1304 	addi	r4,r4,-2996
 8000284:	e17fff17 	ldw	r5,-4(fp)
 8000288:	80004340 	call	8000434 <printf>


  wValue = putcharRS232(50);
 800028c:	01000c84 	movi	r4,50
 8000290:	80003140 	call	8000314 <putcharRS232>
 8000294:	e0bffe15 	stw	r2,-8(fp)
  printf("Finished putcharRS232. wValue = %d\n", wValue);
 8000298:	01020074 	movhi	r4,2049
 800029c:	213d0a04 	addi	r4,r4,-3032
 80002a0:	e17ffe17 	ldw	r5,-8(fp)
 80002a4:	80004340 	call	8000434 <printf>
  rValue = getcharRS232();
 80002a8:	80003580 	call	8000358 <getcharRS232>
 80002ac:	e0bfff15 	stw	r2,-4(fp)
  printf("Finished getcharRS232. rValue = %d\n", rValue);
 80002b0:	01020074 	movhi	r4,2049
 80002b4:	213d1304 	addi	r4,r4,-2996
 80002b8:	e17fff17 	ldw	r5,-4(fp)
 80002bc:	80004340 	call	8000434 <printf>

  return 0;
 80002c0:	0005883a 	mov	r2,zero
}
 80002c4:	e037883a 	mov	sp,fp
 80002c8:	dfc00117 	ldw	ra,4(sp)
 80002cc:	df000017 	ldw	fp,0(sp)
 80002d0:	dec00204 	addi	sp,sp,8
 80002d4:	f800283a 	ret

080002d8 <Init_RS232>:
** to read or write to data via the RS232 port
**
** Refer to 6850 data sheet for details of registers and
***************************************************************************/
void Init_RS232(void)
{
 80002d8:	deffff04 	addi	sp,sp,-4
 80002dc:	df000015 	stw	fp,0(sp)
 80002e0:	d839883a 	mov	fp,sp
 // set up 6850 Control Register to utilise a divide by 16 clock,
 // set RTS low, use 8 bits of data, no parity, 1 stop bit,
 // transmitter interrupt disabled
 RS232_Control = 0b00010101;
 80002e4:	00a10034 	movhi	r2,33792
 80002e8:	10808004 	addi	r2,r2,512
 80002ec:	00c00544 	movi	r3,21
 80002f0:	10c00005 	stb	r3,0(r2)
 // program baud rate generator to use 115k baud
 RS232_Baud = 0x01;
 80002f4:	00a10034 	movhi	r2,33792
 80002f8:	10808104 	addi	r2,r2,516
 80002fc:	00c00044 	movi	r3,1
 8000300:	10c00005 	stb	r3,0(r2)
}
 8000304:	e037883a 	mov	sp,fp
 8000308:	df000017 	ldw	fp,0(sp)
 800030c:	dec00104 	addi	sp,sp,4
 8000310:	f800283a 	ret

08000314 <putcharRS232>:

int putcharRS232(int c)
{
 8000314:	defffe04 	addi	sp,sp,-8
 8000318:	df000115 	stw	fp,4(sp)
 800031c:	df000104 	addi	fp,sp,4
 8000320:	e13fff15 	stw	r4,-4(fp)
 // poll Tx bit in 6850 status register. Wait for it to become '1'
 while(RS232_Status && 0x01 != 1){
 8000324:	0001883a 	nop
 8000328:	00a10034 	movhi	r2,33792
 800032c:	10808004 	addi	r2,r2,512
 8000330:	10800003 	ldbu	r2,0(r2)
	 printf("RS232_Status = %#010x\n", RS232_Status);
 }
 // write 'c' to the 6850 TxData register to output the character
 RS232_TxData = c;
 8000334:	00a10034 	movhi	r2,33792
 8000338:	10808084 	addi	r2,r2,514
 800033c:	e0ffff17 	ldw	r3,-4(fp)
 8000340:	10c00005 	stb	r3,0(r2)
 return c ; // return c
 8000344:	e0bfff17 	ldw	r2,-4(fp)
}
 8000348:	e037883a 	mov	sp,fp
 800034c:	df000017 	ldw	fp,0(sp)
 8000350:	dec00104 	addi	sp,sp,4
 8000354:	f800283a 	ret

08000358 <getcharRS232>:

int getcharRS232( void )
{
 8000358:	defffe04 	addi	sp,sp,-8
 800035c:	dfc00115 	stw	ra,4(sp)
 8000360:	df000015 	stw	fp,0(sp)
 8000364:	d839883a 	mov	fp,sp
 // poll Rx bit in 6850 status register. Wait for it to become '1'
 while(RS232_Status && 0x02 != 0x02){
 8000368:	0001883a 	nop
 800036c:	00a10034 	movhi	r2,33792
 8000370:	10808004 	addi	r2,r2,512
 8000374:	10800003 	ldbu	r2,0(r2)
	 printf("RS232_Status = %#010x\n", RS232_Status);
 }
 printf("RS232_Status = %#010x\n", RS232_Status);
 8000378:	00a10034 	movhi	r2,33792
 800037c:	10808004 	addi	r2,r2,512
 8000380:	10800003 	ldbu	r2,0(r2)
 8000384:	10803fcc 	andi	r2,r2,255
 8000388:	01020074 	movhi	r4,2049
 800038c:	213d1c04 	addi	r4,r4,-2960
 8000390:	100b883a 	mov	r5,r2
 8000394:	80004340 	call	8000434 <printf>
 // read received character from 6850 RxData register.
 return RS232_RxData;
 8000398:	00a10034 	movhi	r2,33792
 800039c:	10808084 	addi	r2,r2,514
 80003a0:	10800003 	ldbu	r2,0(r2)
 80003a4:	10803fcc 	andi	r2,r2,255
}
 80003a8:	e037883a 	mov	sp,fp
 80003ac:	dfc00117 	ldw	ra,4(sp)
 80003b0:	df000017 	ldw	fp,0(sp)
 80003b4:	dec00204 	addi	sp,sp,8
 80003b8:	f800283a 	ret

080003bc <RS232TestForReceivedData>:

// the following function polls the 6850 to determine if any character
// has been received. It doesn't wait for one, or read it, it simply tests
// to see if one is available to read
int RS232TestForReceivedData(void)
{
 80003bc:	defffe04 	addi	sp,sp,-8
 80003c0:	df000115 	stw	fp,4(sp)
 80003c4:	df000104 	addi	fp,sp,4
 // Test Rx bit in 6850 serial comms chip status register
 int Rxbit = RS232_Status && 0x01;
 80003c8:	00a10034 	movhi	r2,33792
 80003cc:	10808004 	addi	r2,r2,512
 80003d0:	10800003 	ldbu	r2,0(r2)
 80003d4:	10803fcc 	andi	r2,r2,255
 80003d8:	10000226 	beq	r2,zero,80003e4 <RS232TestForReceivedData+0x28>
 80003dc:	00800044 	movi	r2,1
 80003e0:	00000106 	br	80003e8 <RS232TestForReceivedData+0x2c>
 80003e4:	0005883a 	mov	r2,zero
 80003e8:	e0bfff15 	stw	r2,-4(fp)
 // if RX bit is set, return TRUE, otherwise return FALSE
 return (Rxbit == 1);
 80003ec:	e0bfff17 	ldw	r2,-4(fp)
 80003f0:	10800060 	cmpeqi	r2,r2,1
 80003f4:	10803fcc 	andi	r2,r2,255
}
 80003f8:	e037883a 	mov	sp,fp
 80003fc:	df000017 	ldw	fp,0(sp)
 8000400:	dec00104 	addi	sp,sp,4
 8000404:	f800283a 	ret

08000408 <_printf_r>:
 8000408:	defffd04 	addi	sp,sp,-12
 800040c:	dfc00015 	stw	ra,0(sp)
 8000410:	d9800115 	stw	r6,4(sp)
 8000414:	d9c00215 	stw	r7,8(sp)
 8000418:	280d883a 	mov	r6,r5
 800041c:	21400217 	ldw	r5,8(r4)
 8000420:	d9c00104 	addi	r7,sp,4
 8000424:	80005d40 	call	80005d4 <___vfprintf_internal_r>
 8000428:	dfc00017 	ldw	ra,0(sp)
 800042c:	dec00304 	addi	sp,sp,12
 8000430:	f800283a 	ret

08000434 <printf>:
 8000434:	defffc04 	addi	sp,sp,-16
 8000438:	dfc00015 	stw	ra,0(sp)
 800043c:	d9400115 	stw	r5,4(sp)
 8000440:	d9800215 	stw	r6,8(sp)
 8000444:	d9c00315 	stw	r7,12(sp)
 8000448:	00820074 	movhi	r2,2049
 800044c:	10849f04 	addi	r2,r2,4732
 8000450:	10800017 	ldw	r2,0(r2)
 8000454:	200b883a 	mov	r5,r4
 8000458:	d9800104 	addi	r6,sp,4
 800045c:	11000217 	ldw	r4,8(r2)
 8000460:	80025d00 	call	80025d0 <__vfprintf_internal>
 8000464:	dfc00017 	ldw	ra,0(sp)
 8000468:	dec00404 	addi	sp,sp,16
 800046c:	f800283a 	ret

08000470 <_puts_r>:
 8000470:	defff604 	addi	sp,sp,-40
 8000474:	dc000715 	stw	r16,28(sp)
 8000478:	2021883a 	mov	r16,r4
 800047c:	2809883a 	mov	r4,r5
 8000480:	dc400815 	stw	r17,32(sp)
 8000484:	dfc00915 	stw	ra,36(sp)
 8000488:	2823883a 	mov	r17,r5
 800048c:	800053c0 	call	800053c <strlen>
 8000490:	00c20074 	movhi	r3,2049
 8000494:	18c49f04 	addi	r3,r3,4732
 8000498:	18c00017 	ldw	r3,0(r3)
 800049c:	11000044 	addi	r4,r2,1
 80004a0:	d8800115 	stw	r2,4(sp)
 80004a4:	18c00217 	ldw	r3,8(r3)
 80004a8:	01420074 	movhi	r5,2049
 80004ac:	297d2204 	addi	r5,r5,-2936
 80004b0:	1880030b 	ldhu	r2,12(r3)
 80004b4:	d9400215 	stw	r5,8(sp)
 80004b8:	d9000615 	stw	r4,24(sp)
 80004bc:	01400044 	movi	r5,1
 80004c0:	01000084 	movi	r4,2
 80004c4:	d9000515 	stw	r4,20(sp)
 80004c8:	dc400015 	stw	r17,0(sp)
 80004cc:	d9400315 	stw	r5,12(sp)
 80004d0:	dec00415 	stw	sp,16(sp)
 80004d4:	1108000c 	andi	r4,r2,8192
 80004d8:	2000061e 	bne	r4,zero,80004f4 <_puts_r+0x84>
 80004dc:	19401917 	ldw	r5,100(r3)
 80004e0:	0137ffc4 	movi	r4,-8193
 80004e4:	10880014 	ori	r2,r2,8192
 80004e8:	2908703a 	and	r4,r5,r4
 80004ec:	1880030d 	sth	r2,12(r3)
 80004f0:	19001915 	stw	r4,100(r3)
 80004f4:	81400217 	ldw	r5,8(r16)
 80004f8:	8009883a 	mov	r4,r16
 80004fc:	d9800404 	addi	r6,sp,16
 8000500:	8004a580 	call	8004a58 <__sfvwrite_r>
 8000504:	1000061e 	bne	r2,zero,8000520 <_puts_r+0xb0>
 8000508:	00800284 	movi	r2,10
 800050c:	dfc00917 	ldw	ra,36(sp)
 8000510:	dc400817 	ldw	r17,32(sp)
 8000514:	dc000717 	ldw	r16,28(sp)
 8000518:	dec00a04 	addi	sp,sp,40
 800051c:	f800283a 	ret
 8000520:	00bfffc4 	movi	r2,-1
 8000524:	003ff906 	br	800050c <__alt_data_end+0xfc00050c>

08000528 <puts>:
 8000528:	00820074 	movhi	r2,2049
 800052c:	10849f04 	addi	r2,r2,4732
 8000530:	200b883a 	mov	r5,r4
 8000534:	11000017 	ldw	r4,0(r2)
 8000538:	80004701 	jmpi	8000470 <_puts_r>

0800053c <strlen>:
 800053c:	208000cc 	andi	r2,r4,3
 8000540:	10002026 	beq	r2,zero,80005c4 <strlen+0x88>
 8000544:	20800007 	ldb	r2,0(r4)
 8000548:	10002026 	beq	r2,zero,80005cc <strlen+0x90>
 800054c:	2005883a 	mov	r2,r4
 8000550:	00000206 	br	800055c <strlen+0x20>
 8000554:	10c00007 	ldb	r3,0(r2)
 8000558:	18001826 	beq	r3,zero,80005bc <strlen+0x80>
 800055c:	10800044 	addi	r2,r2,1
 8000560:	10c000cc 	andi	r3,r2,3
 8000564:	183ffb1e 	bne	r3,zero,8000554 <__alt_data_end+0xfc000554>
 8000568:	10c00017 	ldw	r3,0(r2)
 800056c:	01ffbff4 	movhi	r7,65279
 8000570:	39ffbfc4 	addi	r7,r7,-257
 8000574:	00ca303a 	nor	r5,zero,r3
 8000578:	01a02074 	movhi	r6,32897
 800057c:	19c7883a 	add	r3,r3,r7
 8000580:	31a02004 	addi	r6,r6,-32640
 8000584:	1946703a 	and	r3,r3,r5
 8000588:	1986703a 	and	r3,r3,r6
 800058c:	1800091e 	bne	r3,zero,80005b4 <strlen+0x78>
 8000590:	10800104 	addi	r2,r2,4
 8000594:	10c00017 	ldw	r3,0(r2)
 8000598:	19cb883a 	add	r5,r3,r7
 800059c:	00c6303a 	nor	r3,zero,r3
 80005a0:	28c6703a 	and	r3,r5,r3
 80005a4:	1986703a 	and	r3,r3,r6
 80005a8:	183ff926 	beq	r3,zero,8000590 <__alt_data_end+0xfc000590>
 80005ac:	00000106 	br	80005b4 <strlen+0x78>
 80005b0:	10800044 	addi	r2,r2,1
 80005b4:	10c00007 	ldb	r3,0(r2)
 80005b8:	183ffd1e 	bne	r3,zero,80005b0 <__alt_data_end+0xfc0005b0>
 80005bc:	1105c83a 	sub	r2,r2,r4
 80005c0:	f800283a 	ret
 80005c4:	2005883a 	mov	r2,r4
 80005c8:	003fe706 	br	8000568 <__alt_data_end+0xfc000568>
 80005cc:	0005883a 	mov	r2,zero
 80005d0:	f800283a 	ret

080005d4 <___vfprintf_internal_r>:
 80005d4:	defeb604 	addi	sp,sp,-1320
 80005d8:	dfc14915 	stw	ra,1316(sp)
 80005dc:	ddc14715 	stw	r23,1308(sp)
 80005e0:	dd814615 	stw	r22,1304(sp)
 80005e4:	282f883a 	mov	r23,r5
 80005e8:	202d883a 	mov	r22,r4
 80005ec:	d9812a15 	stw	r6,1192(sp)
 80005f0:	d9c12d15 	stw	r7,1204(sp)
 80005f4:	df014815 	stw	fp,1312(sp)
 80005f8:	dd414515 	stw	r21,1300(sp)
 80005fc:	dd014415 	stw	r20,1296(sp)
 8000600:	dcc14315 	stw	r19,1292(sp)
 8000604:	dc814215 	stw	r18,1288(sp)
 8000608:	dc414115 	stw	r17,1284(sp)
 800060c:	dc014015 	stw	r16,1280(sp)
 8000610:	80051180 	call	8005118 <_localeconv_r>
 8000614:	10800017 	ldw	r2,0(r2)
 8000618:	1009883a 	mov	r4,r2
 800061c:	d8813515 	stw	r2,1236(sp)
 8000620:	800053c0 	call	800053c <strlen>
 8000624:	d8813815 	stw	r2,1248(sp)
 8000628:	b0000226 	beq	r22,zero,8000634 <___vfprintf_internal_r+0x60>
 800062c:	b0800e17 	ldw	r2,56(r22)
 8000630:	10010426 	beq	r2,zero,8000a44 <___vfprintf_internal_r+0x470>
 8000634:	b8c0030b 	ldhu	r3,12(r23)
 8000638:	1908000c 	andi	r4,r3,8192
 800063c:	1805883a 	mov	r2,r3
 8000640:	2000071e 	bne	r4,zero,8000660 <___vfprintf_internal_r+0x8c>
 8000644:	b9001917 	ldw	r4,100(r23)
 8000648:	18880014 	ori	r2,r3,8192
 800064c:	00f7ffc4 	movi	r3,-8193
 8000650:	20c8703a 	and	r4,r4,r3
 8000654:	b880030d 	sth	r2,12(r23)
 8000658:	1007883a 	mov	r3,r2
 800065c:	b9001915 	stw	r4,100(r23)
 8000660:	1100020c 	andi	r4,r2,8
 8000664:	2000a726 	beq	r4,zero,8000904 <___vfprintf_internal_r+0x330>
 8000668:	b9000417 	ldw	r4,16(r23)
 800066c:	2000a526 	beq	r4,zero,8000904 <___vfprintf_internal_r+0x330>
 8000670:	1080068c 	andi	r2,r2,26
 8000674:	01000284 	movi	r4,10
 8000678:	1100ab26 	beq	r2,r4,8000928 <___vfprintf_internal_r+0x354>
 800067c:	dac10e04 	addi	r11,sp,1080
 8000680:	db010dc4 	addi	r12,sp,1079
 8000684:	d8800404 	addi	r2,sp,16
 8000688:	05020074 	movhi	r20,2049
 800068c:	dac12815 	stw	r11,1184(sp)
 8000690:	5b17c83a 	sub	r11,r11,r12
 8000694:	a53d3384 	addi	r20,r20,-2866
 8000698:	db012915 	stw	r12,1188(sp)
 800069c:	d8811e15 	stw	r2,1144(sp)
 80006a0:	d8012015 	stw	zero,1152(sp)
 80006a4:	d8011f15 	stw	zero,1148(sp)
 80006a8:	d8013315 	stw	zero,1228(sp)
 80006ac:	d8013715 	stw	zero,1244(sp)
 80006b0:	d8013915 	stw	zero,1252(sp)
 80006b4:	d8013b15 	stw	zero,1260(sp)
 80006b8:	d8013a15 	stw	zero,1256(sp)
 80006bc:	d8012f15 	stw	zero,1212(sp)
 80006c0:	1011883a 	mov	r8,r2
 80006c4:	dac13c15 	stw	r11,1264(sp)
 80006c8:	db012a17 	ldw	r12,1192(sp)
 80006cc:	60800007 	ldb	r2,0(r12)
 80006d0:	1000df26 	beq	r2,zero,8000a50 <___vfprintf_internal_r+0x47c>
 80006d4:	00c00944 	movi	r3,37
 80006d8:	10c0dd26 	beq	r2,r3,8000a50 <___vfprintf_internal_r+0x47c>
 80006dc:	6021883a 	mov	r16,r12
 80006e0:	00000106 	br	80006e8 <___vfprintf_internal_r+0x114>
 80006e4:	10c08426 	beq	r2,r3,80008f8 <___vfprintf_internal_r+0x324>
 80006e8:	84000044 	addi	r16,r16,1
 80006ec:	80800007 	ldb	r2,0(r16)
 80006f0:	103ffc1e 	bne	r2,zero,80006e4 <__alt_data_end+0xfc0006e4>
 80006f4:	dac12a17 	ldw	r11,1192(sp)
 80006f8:	82e3c83a 	sub	r17,r16,r11
 80006fc:	88000f26 	beq	r17,zero,800073c <___vfprintf_internal_r+0x168>
 8000700:	d8c12017 	ldw	r3,1152(sp)
 8000704:	d8811f17 	ldw	r2,1148(sp)
 8000708:	dac12a17 	ldw	r11,1192(sp)
 800070c:	1c47883a 	add	r3,r3,r17
 8000710:	10800044 	addi	r2,r2,1
 8000714:	d8c12015 	stw	r3,1152(sp)
 8000718:	42c00015 	stw	r11,0(r8)
 800071c:	44400115 	stw	r17,4(r8)
 8000720:	d8811f15 	stw	r2,1148(sp)
 8000724:	00c001c4 	movi	r3,7
 8000728:	1880b416 	blt	r3,r2,80009fc <___vfprintf_internal_r+0x428>
 800072c:	42000204 	addi	r8,r8,8
 8000730:	db012f17 	ldw	r12,1212(sp)
 8000734:	6459883a 	add	r12,r12,r17
 8000738:	db012f15 	stw	r12,1212(sp)
 800073c:	80800007 	ldb	r2,0(r16)
 8000740:	1000b526 	beq	r2,zero,8000a18 <___vfprintf_internal_r+0x444>
 8000744:	80800044 	addi	r2,r16,1
 8000748:	84000047 	ldb	r16,1(r16)
 800074c:	d8012785 	stb	zero,1182(sp)
 8000750:	000d883a 	mov	r6,zero
 8000754:	027fffc4 	movi	r9,-1
 8000758:	d8012e15 	stw	zero,1208(sp)
 800075c:	0023883a 	mov	r17,zero
 8000760:	01001604 	movi	r4,88
 8000764:	01400244 	movi	r5,9
 8000768:	02800a84 	movi	r10,42
 800076c:	01c01b04 	movi	r7,108
 8000770:	10c00044 	addi	r3,r2,1
 8000774:	80bff804 	addi	r2,r16,-32
 8000778:	2082f236 	bltu	r4,r2,8001344 <___vfprintf_internal_r+0xd70>
 800077c:	100490ba 	slli	r2,r2,2
 8000780:	02c20034 	movhi	r11,2048
 8000784:	5ac1e504 	addi	r11,r11,1940
 8000788:	12c5883a 	add	r2,r2,r11
 800078c:	10800017 	ldw	r2,0(r2)
 8000790:	1000683a 	jmp	r2
 8000794:	0800118c 	andi	zero,at,70
 8000798:	08001344 	addi	zero,at,77
 800079c:	08001344 	addi	zero,at,77
 80007a0:	080011ac 	andhi	zero,at,70
 80007a4:	08001344 	addi	zero,at,77
 80007a8:	08001344 	addi	zero,at,77
 80007ac:	08001344 	addi	zero,at,77
 80007b0:	08001344 	addi	zero,at,77
 80007b4:	08001344 	addi	zero,at,77
 80007b8:	08001344 	addi	zero,at,77
 80007bc:	08001308 	cmpgei	zero,at,76
 80007c0:	08001334 	orhi	zero,at,76
 80007c4:	08001344 	addi	zero,at,77
 80007c8:	08000a58 	cmpnei	zero,at,41
 80007cc:	08000a68 	cmpgeui	zero,at,41
 80007d0:	08001344 	addi	zero,at,77
 80007d4:	08000aa8 	cmpgeui	zero,at,42
 80007d8:	08000f9c 	xori	zero,at,62
 80007dc:	08000f9c 	xori	zero,at,62
 80007e0:	08000f9c 	xori	zero,at,62
 80007e4:	08000f9c 	xori	zero,at,62
 80007e8:	08000f9c 	xori	zero,at,62
 80007ec:	08000f9c 	xori	zero,at,62
 80007f0:	08000f9c 	xori	zero,at,62
 80007f4:	08000f9c 	xori	zero,at,62
 80007f8:	08000f9c 	xori	zero,at,62
 80007fc:	08001344 	addi	zero,at,77
 8000800:	08001344 	addi	zero,at,77
 8000804:	08001344 	addi	zero,at,77
 8000808:	08001344 	addi	zero,at,77
 800080c:	08001344 	addi	zero,at,77
 8000810:	08001344 	addi	zero,at,77
 8000814:	08001344 	addi	zero,at,77
 8000818:	08001344 	addi	zero,at,77
 800081c:	08001344 	addi	zero,at,77
 8000820:	08001344 	addi	zero,at,77
 8000824:	08000fd0 	cmplti	zero,at,63
 8000828:	08000ab8 	rdprs	zero,at,42
 800082c:	08001344 	addi	zero,at,77
 8000830:	08000ab8 	rdprs	zero,at,42
 8000834:	08001344 	addi	zero,at,77
 8000838:	08001344 	addi	zero,at,77
 800083c:	08001344 	addi	zero,at,77
 8000840:	08001344 	addi	zero,at,77
 8000844:	08000b5c 	xori	zero,at,45
 8000848:	08001344 	addi	zero,at,77
 800084c:	08001344 	addi	zero,at,77
 8000850:	08000b6c 	andhi	zero,at,45
 8000854:	08001344 	addi	zero,at,77
 8000858:	08001344 	addi	zero,at,77
 800085c:	08001344 	addi	zero,at,77
 8000860:	08001344 	addi	zero,at,77
 8000864:	08001344 	addi	zero,at,77
 8000868:	08000f68 	cmpgeui	zero,at,61
 800086c:	08001344 	addi	zero,at,77
 8000870:	08001344 	addi	zero,at,77
 8000874:	08001018 	cmpnei	zero,at,64
 8000878:	08001344 	addi	zero,at,77
 800087c:	08001344 	addi	zero,at,77
 8000880:	08001344 	addi	zero,at,77
 8000884:	08001344 	addi	zero,at,77
 8000888:	08001344 	addi	zero,at,77
 800088c:	08001344 	addi	zero,at,77
 8000890:	08001344 	addi	zero,at,77
 8000894:	08001344 	addi	zero,at,77
 8000898:	08001344 	addi	zero,at,77
 800089c:	08001344 	addi	zero,at,77
 80008a0:	0800120c 	andi	zero,at,72
 80008a4:	080011bc 	xorhi	zero,at,70
 80008a8:	08000ab8 	rdprs	zero,at,42
 80008ac:	08000ab8 	rdprs	zero,at,42
 80008b0:	08000ab8 	rdprs	zero,at,42
 80008b4:	080011fc 	xorhi	zero,at,71
 80008b8:	080011bc 	xorhi	zero,at,70
 80008bc:	08001344 	addi	zero,at,77
 80008c0:	08001344 	addi	zero,at,77
 80008c4:	08001104 	addi	zero,at,68
 80008c8:	08001344 	addi	zero,at,77
 80008cc:	08001118 	cmpnei	zero,at,68
 80008d0:	0800114c 	andi	zero,at,69
 80008d4:	0800124c 	andi	zero,at,73
 80008d8:	08001074 	orhi	zero,at,65
 80008dc:	08001344 	addi	zero,at,77
 80008e0:	08001294 	ori	zero,at,74
 80008e4:	08001344 	addi	zero,at,77
 80008e8:	08001084 	addi	zero,at,66
 80008ec:	08001344 	addi	zero,at,77
 80008f0:	08001344 	addi	zero,at,77
 80008f4:	080010c4 	addi	zero,at,67
 80008f8:	db012a17 	ldw	r12,1192(sp)
 80008fc:	8323c83a 	sub	r17,r16,r12
 8000900:	003f7e06 	br	80006fc <__alt_data_end+0xfc0006fc>
 8000904:	b009883a 	mov	r4,r22
 8000908:	b80b883a 	mov	r5,r23
 800090c:	80025f40 	call	80025f4 <__swsetup_r>
 8000910:	10002d1e 	bne	r2,zero,80009c8 <___vfprintf_internal_r+0x3f4>
 8000914:	b8c0030b 	ldhu	r3,12(r23)
 8000918:	01000284 	movi	r4,10
 800091c:	1805883a 	mov	r2,r3
 8000920:	1080068c 	andi	r2,r2,26
 8000924:	113f551e 	bne	r2,r4,800067c <__alt_data_end+0xfc00067c>
 8000928:	b880038b 	ldhu	r2,14(r23)
 800092c:	113fffcc 	andi	r4,r2,65535
 8000930:	2120001c 	xori	r4,r4,32768
 8000934:	21200004 	addi	r4,r4,-32768
 8000938:	203f5016 	blt	r4,zero,800067c <__alt_data_end+0xfc00067c>
 800093c:	bac01917 	ldw	r11,100(r23)
 8000940:	ba800717 	ldw	r10,28(r23)
 8000944:	ba400917 	ldw	r9,36(r23)
 8000948:	d9812a17 	ldw	r6,1192(sp)
 800094c:	d9c12d17 	ldw	r7,1204(sp)
 8000950:	02010004 	movi	r8,1024
 8000954:	18ffff4c 	andi	r3,r3,65533
 8000958:	d881078d 	sth	r2,1054(sp)
 800095c:	b009883a 	mov	r4,r22
 8000960:	d8800404 	addi	r2,sp,16
 8000964:	d9410404 	addi	r5,sp,1040
 8000968:	d8c1070d 	sth	r3,1052(sp)
 800096c:	dac11d15 	stw	r11,1140(sp)
 8000970:	da810b15 	stw	r10,1068(sp)
 8000974:	da410d15 	stw	r9,1076(sp)
 8000978:	d8810415 	stw	r2,1040(sp)
 800097c:	d8810815 	stw	r2,1056(sp)
 8000980:	da010615 	stw	r8,1048(sp)
 8000984:	da010915 	stw	r8,1060(sp)
 8000988:	d8010a15 	stw	zero,1064(sp)
 800098c:	80005d40 	call	80005d4 <___vfprintf_internal_r>
 8000990:	1021883a 	mov	r16,r2
 8000994:	10000416 	blt	r2,zero,80009a8 <___vfprintf_internal_r+0x3d4>
 8000998:	b009883a 	mov	r4,r22
 800099c:	d9410404 	addi	r5,sp,1040
 80009a0:	800404c0 	call	800404c <_fflush_r>
 80009a4:	1006ee1e 	bne	r2,zero,8002560 <___vfprintf_internal_r+0x1f8c>
 80009a8:	d881070b 	ldhu	r2,1052(sp)
 80009ac:	1080100c 	andi	r2,r2,64
 80009b0:	10000326 	beq	r2,zero,80009c0 <___vfprintf_internal_r+0x3ec>
 80009b4:	b880030b 	ldhu	r2,12(r23)
 80009b8:	10801014 	ori	r2,r2,64
 80009bc:	b880030d 	sth	r2,12(r23)
 80009c0:	8005883a 	mov	r2,r16
 80009c4:	00000106 	br	80009cc <___vfprintf_internal_r+0x3f8>
 80009c8:	00bfffc4 	movi	r2,-1
 80009cc:	dfc14917 	ldw	ra,1316(sp)
 80009d0:	df014817 	ldw	fp,1312(sp)
 80009d4:	ddc14717 	ldw	r23,1308(sp)
 80009d8:	dd814617 	ldw	r22,1304(sp)
 80009dc:	dd414517 	ldw	r21,1300(sp)
 80009e0:	dd014417 	ldw	r20,1296(sp)
 80009e4:	dcc14317 	ldw	r19,1292(sp)
 80009e8:	dc814217 	ldw	r18,1288(sp)
 80009ec:	dc414117 	ldw	r17,1284(sp)
 80009f0:	dc014017 	ldw	r16,1280(sp)
 80009f4:	dec14a04 	addi	sp,sp,1320
 80009f8:	f800283a 	ret
 80009fc:	b009883a 	mov	r4,r22
 8000a00:	b80b883a 	mov	r5,r23
 8000a04:	d9811e04 	addi	r6,sp,1144
 8000a08:	800781c0 	call	800781c <__sprint_r>
 8000a0c:	1000081e 	bne	r2,zero,8000a30 <___vfprintf_internal_r+0x45c>
 8000a10:	da000404 	addi	r8,sp,16
 8000a14:	003f4606 	br	8000730 <__alt_data_end+0xfc000730>
 8000a18:	d8812017 	ldw	r2,1152(sp)
 8000a1c:	10000426 	beq	r2,zero,8000a30 <___vfprintf_internal_r+0x45c>
 8000a20:	b009883a 	mov	r4,r22
 8000a24:	b80b883a 	mov	r5,r23
 8000a28:	d9811e04 	addi	r6,sp,1144
 8000a2c:	800781c0 	call	800781c <__sprint_r>
 8000a30:	b880030b 	ldhu	r2,12(r23)
 8000a34:	1080100c 	andi	r2,r2,64
 8000a38:	103fe31e 	bne	r2,zero,80009c8 <__alt_data_end+0xfc0009c8>
 8000a3c:	d8812f17 	ldw	r2,1212(sp)
 8000a40:	003fe206 	br	80009cc <__alt_data_end+0xfc0009cc>
 8000a44:	b009883a 	mov	r4,r22
 8000a48:	80045f40 	call	80045f4 <__sinit>
 8000a4c:	003ef906 	br	8000634 <__alt_data_end+0xfc000634>
 8000a50:	dc012a17 	ldw	r16,1192(sp)
 8000a54:	003f3906 	br	800073c <__alt_data_end+0xfc00073c>
 8000a58:	1805883a 	mov	r2,r3
 8000a5c:	8c400114 	ori	r17,r17,4
 8000a60:	1c000007 	ldb	r16,0(r3)
 8000a64:	003f4206 	br	8000770 <__alt_data_end+0xfc000770>
 8000a68:	1c000007 	ldb	r16,0(r3)
 8000a6c:	18800044 	addi	r2,r3,1
 8000a70:	8286b326 	beq	r16,r10,8002540 <___vfprintf_internal_r+0x1f6c>
 8000a74:	82fff404 	addi	r11,r16,-48
 8000a78:	1007883a 	mov	r3,r2
 8000a7c:	0013883a 	mov	r9,zero
 8000a80:	2aff3c36 	bltu	r5,r11,8000774 <__alt_data_end+0xfc000774>
 8000a84:	1c000007 	ldb	r16,0(r3)
 8000a88:	4a4002a4 	muli	r9,r9,10
 8000a8c:	18c00044 	addi	r3,r3,1
 8000a90:	5a53883a 	add	r9,r11,r9
 8000a94:	82fff404 	addi	r11,r16,-48
 8000a98:	2afffa2e 	bgeu	r5,r11,8000a84 <__alt_data_end+0xfc000a84>
 8000a9c:	483f350e 	bge	r9,zero,8000774 <__alt_data_end+0xfc000774>
 8000aa0:	027fffc4 	movi	r9,-1
 8000aa4:	003f3306 	br	8000774 <__alt_data_end+0xfc000774>
 8000aa8:	8c402014 	ori	r17,r17,128
 8000aac:	1805883a 	mov	r2,r3
 8000ab0:	1c000007 	ldb	r16,0(r3)
 8000ab4:	003f2e06 	br	8000770 <__alt_data_end+0xfc000770>
 8000ab8:	db012d17 	ldw	r12,1204(sp)
 8000abc:	dac12d17 	ldw	r11,1204(sp)
 8000ac0:	d8c12a15 	stw	r3,1192(sp)
 8000ac4:	63000017 	ldw	r12,0(r12)
 8000ac8:	5ac00117 	ldw	r11,4(r11)
 8000acc:	d9812785 	stb	r6,1182(sp)
 8000ad0:	6009883a 	mov	r4,r12
 8000ad4:	580b883a 	mov	r5,r11
 8000ad8:	db013715 	stw	r12,1244(sp)
 8000adc:	da013f15 	stw	r8,1276(sp)
 8000ae0:	da413e15 	stw	r9,1272(sp)
 8000ae4:	dac13915 	stw	r11,1252(sp)
 8000ae8:	80074780 	call	8007478 <__fpclassifyd>
 8000aec:	db012d17 	ldw	r12,1204(sp)
 8000af0:	04800044 	movi	r18,1
 8000af4:	da013f17 	ldw	r8,1276(sp)
 8000af8:	64c00204 	addi	r19,r12,8
 8000afc:	da413e17 	ldw	r9,1272(sp)
 8000b00:	d9013717 	ldw	r4,1244(sp)
 8000b04:	d9413917 	ldw	r5,1252(sp)
 8000b08:	1484581e 	bne	r2,r18,8001c6c <___vfprintf_internal_r+0x1698>
 8000b0c:	000d883a 	mov	r6,zero
 8000b10:	000f883a 	mov	r7,zero
 8000b14:	800b4340 	call	800b434 <__ledf2>
 8000b18:	da013f17 	ldw	r8,1276(sp)
 8000b1c:	1005ef16 	blt	r2,zero,80022dc <___vfprintf_internal_r+0x1d08>
 8000b20:	dd412783 	ldbu	r21,1182(sp)
 8000b24:	008011c4 	movi	r2,71
 8000b28:	14053b0e 	bge	r2,r16,8002018 <___vfprintf_internal_r+0x1a44>
 8000b2c:	00c20074 	movhi	r3,2049
 8000b30:	18fd2404 	addi	r3,r3,-2928
 8000b34:	d8c13115 	stw	r3,1220(sp)
 8000b38:	02c000c4 	movi	r11,3
 8000b3c:	00bfdfc4 	movi	r2,-129
 8000b40:	dac12b15 	stw	r11,1196(sp)
 8000b44:	88a2703a 	and	r17,r17,r2
 8000b48:	dcc12d15 	stw	r19,1204(sp)
 8000b4c:	5825883a 	mov	r18,r11
 8000b50:	d8013215 	stw	zero,1224(sp)
 8000b54:	d8013415 	stw	zero,1232(sp)
 8000b58:	00003206 	br	8000c24 <___vfprintf_internal_r+0x650>
 8000b5c:	8c400214 	ori	r17,r17,8
 8000b60:	1805883a 	mov	r2,r3
 8000b64:	1c000007 	ldb	r16,0(r3)
 8000b68:	003f0106 	br	8000770 <__alt_data_end+0xfc000770>
 8000b6c:	8c400414 	ori	r17,r17,16
 8000b70:	d8c12a15 	stw	r3,1192(sp)
 8000b74:	88c0080c 	andi	r3,r17,32
 8000b78:	d8812d17 	ldw	r2,1204(sp)
 8000b7c:	18017726 	beq	r3,zero,800115c <___vfprintf_internal_r+0xb88>
 8000b80:	db012d17 	ldw	r12,1204(sp)
 8000b84:	14c00017 	ldw	r19,0(r2)
 8000b88:	17000117 	ldw	fp,4(r2)
 8000b8c:	63000204 	addi	r12,r12,8
 8000b90:	db012d15 	stw	r12,1204(sp)
 8000b94:	0005883a 	mov	r2,zero
 8000b98:	9f06b03a 	or	r3,r19,fp
 8000b9c:	d8012785 	stb	zero,1182(sp)
 8000ba0:	da413215 	stw	r9,1224(sp)
 8000ba4:	002b883a 	mov	r21,zero
 8000ba8:	48000216 	blt	r9,zero,8000bb4 <___vfprintf_internal_r+0x5e0>
 8000bac:	013fdfc4 	movi	r4,-129
 8000bb0:	8922703a 	and	r17,r17,r4
 8000bb4:	1801ed1e 	bne	r3,zero,800136c <___vfprintf_internal_r+0xd98>
 8000bb8:	4802e026 	beq	r9,zero,800173c <___vfprintf_internal_r+0x1168>
 8000bbc:	10803fcc 	andi	r2,r2,255
 8000bc0:	00c00044 	movi	r3,1
 8000bc4:	10c20f26 	beq	r2,r3,8001404 <___vfprintf_internal_r+0xe30>
 8000bc8:	00c00084 	movi	r3,2
 8000bcc:	10c2fd26 	beq	r2,r3,80017c4 <___vfprintf_internal_r+0x11f0>
 8000bd0:	d8c10e04 	addi	r3,sp,1080
 8000bd4:	9808d0fa 	srli	r4,r19,3
 8000bd8:	e00a977a 	slli	r5,fp,29
 8000bdc:	e038d0fa 	srli	fp,fp,3
 8000be0:	9cc001cc 	andi	r19,r19,7
 8000be4:	98800c04 	addi	r2,r19,48
 8000be8:	18ffffc4 	addi	r3,r3,-1
 8000bec:	2926b03a 	or	r19,r5,r4
 8000bf0:	18800005 	stb	r2,0(r3)
 8000bf4:	9f08b03a 	or	r4,r19,fp
 8000bf8:	203ff61e 	bne	r4,zero,8000bd4 <__alt_data_end+0xfc000bd4>
 8000bfc:	8900004c 	andi	r4,r17,1
 8000c00:	d8c13115 	stw	r3,1220(sp)
 8000c04:	2003791e 	bne	r4,zero,80019ec <___vfprintf_internal_r+0x1418>
 8000c08:	dac12817 	ldw	r11,1184(sp)
 8000c0c:	58e5c83a 	sub	r18,r11,r3
 8000c10:	9005883a 	mov	r2,r18
 8000c14:	9240010e 	bge	r18,r9,8000c1c <___vfprintf_internal_r+0x648>
 8000c18:	4805883a 	mov	r2,r9
 8000c1c:	d8812b15 	stw	r2,1196(sp)
 8000c20:	d8013415 	stw	zero,1232(sp)
 8000c24:	a8803fcc 	andi	r2,r21,255
 8000c28:	1080201c 	xori	r2,r2,128
 8000c2c:	10bfe004 	addi	r2,r2,-128
 8000c30:	10000326 	beq	r2,zero,8000c40 <___vfprintf_internal_r+0x66c>
 8000c34:	db012b17 	ldw	r12,1196(sp)
 8000c38:	63000044 	addi	r12,r12,1
 8000c3c:	db012b15 	stw	r12,1196(sp)
 8000c40:	88c0008c 	andi	r3,r17,2
 8000c44:	d8c12c15 	stw	r3,1200(sp)
 8000c48:	18000326 	beq	r3,zero,8000c58 <___vfprintf_internal_r+0x684>
 8000c4c:	dac12b17 	ldw	r11,1196(sp)
 8000c50:	5ac00084 	addi	r11,r11,2
 8000c54:	dac12b15 	stw	r11,1196(sp)
 8000c58:	8b00210c 	andi	r12,r17,132
 8000c5c:	db013015 	stw	r12,1216(sp)
 8000c60:	6001c01e 	bne	r12,zero,8001364 <___vfprintf_internal_r+0xd90>
 8000c64:	dac12e17 	ldw	r11,1208(sp)
 8000c68:	db012b17 	ldw	r12,1196(sp)
 8000c6c:	5b39c83a 	sub	fp,r11,r12
 8000c70:	0701bc0e 	bge	zero,fp,8001364 <___vfprintf_internal_r+0xd90>
 8000c74:	02400404 	movi	r9,16
 8000c78:	d8c12017 	ldw	r3,1152(sp)
 8000c7c:	d8811f17 	ldw	r2,1148(sp)
 8000c80:	4f05220e 	bge	r9,fp,800210c <___vfprintf_internal_r+0x1b38>
 8000c84:	01420074 	movhi	r5,2049
 8000c88:	297d3784 	addi	r5,r5,-2850
 8000c8c:	d9413615 	stw	r5,1240(sp)
 8000c90:	482b883a 	mov	r21,r9
 8000c94:	04c001c4 	movi	r19,7
 8000c98:	00000306 	br	8000ca8 <___vfprintf_internal_r+0x6d4>
 8000c9c:	e73ffc04 	addi	fp,fp,-16
 8000ca0:	42000204 	addi	r8,r8,8
 8000ca4:	af00130e 	bge	r21,fp,8000cf4 <___vfprintf_internal_r+0x720>
 8000ca8:	02c20074 	movhi	r11,2049
 8000cac:	18c00404 	addi	r3,r3,16
 8000cb0:	10800044 	addi	r2,r2,1
 8000cb4:	5afd3784 	addi	r11,r11,-2850
 8000cb8:	42c00015 	stw	r11,0(r8)
 8000cbc:	45400115 	stw	r21,4(r8)
 8000cc0:	d8c12015 	stw	r3,1152(sp)
 8000cc4:	d8811f15 	stw	r2,1148(sp)
 8000cc8:	98bff40e 	bge	r19,r2,8000c9c <__alt_data_end+0xfc000c9c>
 8000ccc:	b009883a 	mov	r4,r22
 8000cd0:	b80b883a 	mov	r5,r23
 8000cd4:	d9811e04 	addi	r6,sp,1144
 8000cd8:	800781c0 	call	800781c <__sprint_r>
 8000cdc:	103f541e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8000ce0:	e73ffc04 	addi	fp,fp,-16
 8000ce4:	d8c12017 	ldw	r3,1152(sp)
 8000ce8:	d8811f17 	ldw	r2,1148(sp)
 8000cec:	da000404 	addi	r8,sp,16
 8000cf0:	af3fed16 	blt	r21,fp,8000ca8 <__alt_data_end+0xfc000ca8>
 8000cf4:	db013617 	ldw	r12,1240(sp)
 8000cf8:	e0c7883a 	add	r3,fp,r3
 8000cfc:	10800044 	addi	r2,r2,1
 8000d00:	43000015 	stw	r12,0(r8)
 8000d04:	47000115 	stw	fp,4(r8)
 8000d08:	d8c12015 	stw	r3,1152(sp)
 8000d0c:	d8811f15 	stw	r2,1148(sp)
 8000d10:	010001c4 	movi	r4,7
 8000d14:	2082f416 	blt	r4,r2,80018e8 <___vfprintf_internal_r+0x1314>
 8000d18:	d8812787 	ldb	r2,1182(sp)
 8000d1c:	42000204 	addi	r8,r8,8
 8000d20:	10000c26 	beq	r2,zero,8000d54 <___vfprintf_internal_r+0x780>
 8000d24:	d8811f17 	ldw	r2,1148(sp)
 8000d28:	d9012784 	addi	r4,sp,1182
 8000d2c:	18c00044 	addi	r3,r3,1
 8000d30:	10800044 	addi	r2,r2,1
 8000d34:	41000015 	stw	r4,0(r8)
 8000d38:	01000044 	movi	r4,1
 8000d3c:	41000115 	stw	r4,4(r8)
 8000d40:	d8c12015 	stw	r3,1152(sp)
 8000d44:	d8811f15 	stw	r2,1148(sp)
 8000d48:	010001c4 	movi	r4,7
 8000d4c:	20828d16 	blt	r4,r2,8001784 <___vfprintf_internal_r+0x11b0>
 8000d50:	42000204 	addi	r8,r8,8
 8000d54:	dac12c17 	ldw	r11,1200(sp)
 8000d58:	58000c26 	beq	r11,zero,8000d8c <___vfprintf_internal_r+0x7b8>
 8000d5c:	d8811f17 	ldw	r2,1148(sp)
 8000d60:	d9012704 	addi	r4,sp,1180
 8000d64:	18c00084 	addi	r3,r3,2
 8000d68:	10800044 	addi	r2,r2,1
 8000d6c:	41000015 	stw	r4,0(r8)
 8000d70:	01000084 	movi	r4,2
 8000d74:	41000115 	stw	r4,4(r8)
 8000d78:	d8c12015 	stw	r3,1152(sp)
 8000d7c:	d8811f15 	stw	r2,1148(sp)
 8000d80:	010001c4 	movi	r4,7
 8000d84:	20828716 	blt	r4,r2,80017a4 <___vfprintf_internal_r+0x11d0>
 8000d88:	42000204 	addi	r8,r8,8
 8000d8c:	db013017 	ldw	r12,1216(sp)
 8000d90:	00802004 	movi	r2,128
 8000d94:	6081e926 	beq	r12,r2,800153c <___vfprintf_internal_r+0xf68>
 8000d98:	db013217 	ldw	r12,1224(sp)
 8000d9c:	64abc83a 	sub	r21,r12,r18
 8000da0:	0540260e 	bge	zero,r21,8000e3c <___vfprintf_internal_r+0x868>
 8000da4:	07000404 	movi	fp,16
 8000da8:	d8811f17 	ldw	r2,1148(sp)
 8000dac:	e5443d0e 	bge	fp,r21,8001ea4 <___vfprintf_internal_r+0x18d0>
 8000db0:	01420074 	movhi	r5,2049
 8000db4:	297d3384 	addi	r5,r5,-2866
 8000db8:	d9412c15 	stw	r5,1200(sp)
 8000dbc:	04c001c4 	movi	r19,7
 8000dc0:	00000306 	br	8000dd0 <___vfprintf_internal_r+0x7fc>
 8000dc4:	ad7ffc04 	addi	r21,r21,-16
 8000dc8:	42000204 	addi	r8,r8,8
 8000dcc:	e540110e 	bge	fp,r21,8000e14 <___vfprintf_internal_r+0x840>
 8000dd0:	18c00404 	addi	r3,r3,16
 8000dd4:	10800044 	addi	r2,r2,1
 8000dd8:	45000015 	stw	r20,0(r8)
 8000ddc:	47000115 	stw	fp,4(r8)
 8000de0:	d8c12015 	stw	r3,1152(sp)
 8000de4:	d8811f15 	stw	r2,1148(sp)
 8000de8:	98bff60e 	bge	r19,r2,8000dc4 <__alt_data_end+0xfc000dc4>
 8000dec:	b009883a 	mov	r4,r22
 8000df0:	b80b883a 	mov	r5,r23
 8000df4:	d9811e04 	addi	r6,sp,1144
 8000df8:	800781c0 	call	800781c <__sprint_r>
 8000dfc:	103f0c1e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8000e00:	ad7ffc04 	addi	r21,r21,-16
 8000e04:	d8c12017 	ldw	r3,1152(sp)
 8000e08:	d8811f17 	ldw	r2,1148(sp)
 8000e0c:	da000404 	addi	r8,sp,16
 8000e10:	e57fef16 	blt	fp,r21,8000dd0 <__alt_data_end+0xfc000dd0>
 8000e14:	dac12c17 	ldw	r11,1200(sp)
 8000e18:	1d47883a 	add	r3,r3,r21
 8000e1c:	10800044 	addi	r2,r2,1
 8000e20:	42c00015 	stw	r11,0(r8)
 8000e24:	45400115 	stw	r21,4(r8)
 8000e28:	d8c12015 	stw	r3,1152(sp)
 8000e2c:	d8811f15 	stw	r2,1148(sp)
 8000e30:	010001c4 	movi	r4,7
 8000e34:	20824b16 	blt	r4,r2,8001764 <___vfprintf_internal_r+0x1190>
 8000e38:	42000204 	addi	r8,r8,8
 8000e3c:	8880400c 	andi	r2,r17,256
 8000e40:	1001761e 	bne	r2,zero,800141c <___vfprintf_internal_r+0xe48>
 8000e44:	d8811f17 	ldw	r2,1148(sp)
 8000e48:	db013117 	ldw	r12,1220(sp)
 8000e4c:	1c87883a 	add	r3,r3,r18
 8000e50:	10800044 	addi	r2,r2,1
 8000e54:	43000015 	stw	r12,0(r8)
 8000e58:	44800115 	stw	r18,4(r8)
 8000e5c:	d8c12015 	stw	r3,1152(sp)
 8000e60:	d8811f15 	stw	r2,1148(sp)
 8000e64:	010001c4 	movi	r4,7
 8000e68:	20822616 	blt	r4,r2,8001704 <___vfprintf_internal_r+0x1130>
 8000e6c:	42000204 	addi	r8,r8,8
 8000e70:	8c40010c 	andi	r17,r17,4
 8000e74:	88003126 	beq	r17,zero,8000f3c <___vfprintf_internal_r+0x968>
 8000e78:	db012e17 	ldw	r12,1208(sp)
 8000e7c:	dac12b17 	ldw	r11,1196(sp)
 8000e80:	62e1c83a 	sub	r16,r12,r11
 8000e84:	04002d0e 	bge	zero,r16,8000f3c <___vfprintf_internal_r+0x968>
 8000e88:	04400404 	movi	r17,16
 8000e8c:	d8811f17 	ldw	r2,1148(sp)
 8000e90:	8c04df0e 	bge	r17,r16,8002210 <___vfprintf_internal_r+0x1c3c>
 8000e94:	01020074 	movhi	r4,2049
 8000e98:	213d3784 	addi	r4,r4,-2850
 8000e9c:	d9013615 	stw	r4,1240(sp)
 8000ea0:	048001c4 	movi	r18,7
 8000ea4:	00000306 	br	8000eb4 <___vfprintf_internal_r+0x8e0>
 8000ea8:	843ffc04 	addi	r16,r16,-16
 8000eac:	42000204 	addi	r8,r8,8
 8000eb0:	8c00130e 	bge	r17,r16,8000f00 <___vfprintf_internal_r+0x92c>
 8000eb4:	01420074 	movhi	r5,2049
 8000eb8:	18c00404 	addi	r3,r3,16
 8000ebc:	10800044 	addi	r2,r2,1
 8000ec0:	297d3784 	addi	r5,r5,-2850
 8000ec4:	41400015 	stw	r5,0(r8)
 8000ec8:	44400115 	stw	r17,4(r8)
 8000ecc:	d8c12015 	stw	r3,1152(sp)
 8000ed0:	d8811f15 	stw	r2,1148(sp)
 8000ed4:	90bff40e 	bge	r18,r2,8000ea8 <__alt_data_end+0xfc000ea8>
 8000ed8:	b009883a 	mov	r4,r22
 8000edc:	b80b883a 	mov	r5,r23
 8000ee0:	d9811e04 	addi	r6,sp,1144
 8000ee4:	800781c0 	call	800781c <__sprint_r>
 8000ee8:	103ed11e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8000eec:	843ffc04 	addi	r16,r16,-16
 8000ef0:	d8c12017 	ldw	r3,1152(sp)
 8000ef4:	d8811f17 	ldw	r2,1148(sp)
 8000ef8:	da000404 	addi	r8,sp,16
 8000efc:	8c3fed16 	blt	r17,r16,8000eb4 <__alt_data_end+0xfc000eb4>
 8000f00:	dac13617 	ldw	r11,1240(sp)
 8000f04:	1c07883a 	add	r3,r3,r16
 8000f08:	10800044 	addi	r2,r2,1
 8000f0c:	42c00015 	stw	r11,0(r8)
 8000f10:	44000115 	stw	r16,4(r8)
 8000f14:	d8c12015 	stw	r3,1152(sp)
 8000f18:	d8811f15 	stw	r2,1148(sp)
 8000f1c:	010001c4 	movi	r4,7
 8000f20:	2080060e 	bge	r4,r2,8000f3c <___vfprintf_internal_r+0x968>
 8000f24:	b009883a 	mov	r4,r22
 8000f28:	b80b883a 	mov	r5,r23
 8000f2c:	d9811e04 	addi	r6,sp,1144
 8000f30:	800781c0 	call	800781c <__sprint_r>
 8000f34:	103ebe1e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8000f38:	d8c12017 	ldw	r3,1152(sp)
 8000f3c:	d8812b17 	ldw	r2,1196(sp)
 8000f40:	db012e17 	ldw	r12,1208(sp)
 8000f44:	1300010e 	bge	r2,r12,8000f4c <___vfprintf_internal_r+0x978>
 8000f48:	6005883a 	mov	r2,r12
 8000f4c:	dac12f17 	ldw	r11,1212(sp)
 8000f50:	5897883a 	add	r11,r11,r2
 8000f54:	dac12f15 	stw	r11,1212(sp)
 8000f58:	1801f21e 	bne	r3,zero,8001724 <___vfprintf_internal_r+0x1150>
 8000f5c:	d8011f15 	stw	zero,1148(sp)
 8000f60:	da000404 	addi	r8,sp,16
 8000f64:	003dd806 	br	80006c8 <__alt_data_end+0xfc0006c8>
 8000f68:	8c400414 	ori	r17,r17,16
 8000f6c:	d8c12a15 	stw	r3,1192(sp)
 8000f70:	88c0080c 	andi	r3,r17,32
 8000f74:	d8812d17 	ldw	r2,1204(sp)
 8000f78:	18004626 	beq	r3,zero,8001094 <___vfprintf_internal_r+0xac0>
 8000f7c:	dac12d17 	ldw	r11,1204(sp)
 8000f80:	14c00017 	ldw	r19,0(r2)
 8000f84:	17000117 	ldw	fp,4(r2)
 8000f88:	5ac00204 	addi	r11,r11,8
 8000f8c:	dac12d15 	stw	r11,1204(sp)
 8000f90:	00800044 	movi	r2,1
 8000f94:	9f06b03a 	or	r3,r19,fp
 8000f98:	003f0006 	br	8000b9c <__alt_data_end+0xfc000b9c>
 8000f9c:	1805883a 	mov	r2,r3
 8000fa0:	d8012e15 	stw	zero,1208(sp)
 8000fa4:	82fff404 	addi	r11,r16,-48
 8000fa8:	0019883a 	mov	r12,zero
 8000fac:	14000007 	ldb	r16,0(r2)
 8000fb0:	630002a4 	muli	r12,r12,10
 8000fb4:	18c00044 	addi	r3,r3,1
 8000fb8:	1805883a 	mov	r2,r3
 8000fbc:	62d9883a 	add	r12,r12,r11
 8000fc0:	82fff404 	addi	r11,r16,-48
 8000fc4:	2afff92e 	bgeu	r5,r11,8000fac <__alt_data_end+0xfc000fac>
 8000fc8:	db012e15 	stw	r12,1208(sp)
 8000fcc:	003de906 	br	8000774 <__alt_data_end+0xfc000774>
 8000fd0:	8c400414 	ori	r17,r17,16
 8000fd4:	d8c12a15 	stw	r3,1192(sp)
 8000fd8:	d9812785 	stb	r6,1182(sp)
 8000fdc:	8880080c 	andi	r2,r17,32
 8000fe0:	d8c12d17 	ldw	r3,1204(sp)
 8000fe4:	10007a26 	beq	r2,zero,80011d0 <___vfprintf_internal_r+0xbfc>
 8000fe8:	db012d17 	ldw	r12,1204(sp)
 8000fec:	18800117 	ldw	r2,4(r3)
 8000ff0:	1cc00017 	ldw	r19,0(r3)
 8000ff4:	63000204 	addi	r12,r12,8
 8000ff8:	db012d15 	stw	r12,1204(sp)
 8000ffc:	1039883a 	mov	fp,r2
 8001000:	10031016 	blt	r2,zero,8001c44 <___vfprintf_internal_r+0x1670>
 8001004:	dd412783 	ldbu	r21,1182(sp)
 8001008:	da413215 	stw	r9,1224(sp)
 800100c:	00800044 	movi	r2,1
 8001010:	9f06b03a 	or	r3,r19,fp
 8001014:	003ee406 	br	8000ba8 <__alt_data_end+0xfc000ba8>
 8001018:	03020074 	movhi	r12,2049
 800101c:	633d2704 	addi	r12,r12,-2916
 8001020:	d8c12a15 	stw	r3,1192(sp)
 8001024:	d9812785 	stb	r6,1182(sp)
 8001028:	db013b15 	stw	r12,1260(sp)
 800102c:	88c0080c 	andi	r3,r17,32
 8001030:	d8812d17 	ldw	r2,1204(sp)
 8001034:	18002b26 	beq	r3,zero,80010e4 <___vfprintf_internal_r+0xb10>
 8001038:	dac12d17 	ldw	r11,1204(sp)
 800103c:	14c00017 	ldw	r19,0(r2)
 8001040:	17000117 	ldw	fp,4(r2)
 8001044:	5ac00204 	addi	r11,r11,8
 8001048:	dac12d15 	stw	r11,1204(sp)
 800104c:	8880004c 	andi	r2,r17,1
 8001050:	10025b26 	beq	r2,zero,80019c0 <___vfprintf_internal_r+0x13ec>
 8001054:	9f06b03a 	or	r3,r19,fp
 8001058:	18037026 	beq	r3,zero,8001e1c <___vfprintf_internal_r+0x1848>
 800105c:	00800c04 	movi	r2,48
 8001060:	d8812705 	stb	r2,1180(sp)
 8001064:	dc012745 	stb	r16,1181(sp)
 8001068:	8c400094 	ori	r17,r17,2
 800106c:	00800084 	movi	r2,2
 8001070:	003eca06 	br	8000b9c <__alt_data_end+0xfc000b9c>
 8001074:	8c400814 	ori	r17,r17,32
 8001078:	1805883a 	mov	r2,r3
 800107c:	1c000007 	ldb	r16,0(r3)
 8001080:	003dbb06 	br	8000770 <__alt_data_end+0xfc000770>
 8001084:	d8c12a15 	stw	r3,1192(sp)
 8001088:	88c0080c 	andi	r3,r17,32
 800108c:	d8812d17 	ldw	r2,1204(sp)
 8001090:	183fba1e 	bne	r3,zero,8000f7c <__alt_data_end+0xfc000f7c>
 8001094:	88c0040c 	andi	r3,r17,16
 8001098:	18024c1e 	bne	r3,zero,80019cc <___vfprintf_internal_r+0x13f8>
 800109c:	88c0100c 	andi	r3,r17,64
 80010a0:	18024a26 	beq	r3,zero,80019cc <___vfprintf_internal_r+0x13f8>
 80010a4:	dac12d17 	ldw	r11,1204(sp)
 80010a8:	14c0000b 	ldhu	r19,0(r2)
 80010ac:	0039883a 	mov	fp,zero
 80010b0:	5ac00104 	addi	r11,r11,4
 80010b4:	dac12d15 	stw	r11,1204(sp)
 80010b8:	00800044 	movi	r2,1
 80010bc:	9807883a 	mov	r3,r19
 80010c0:	003eb606 	br	8000b9c <__alt_data_end+0xfc000b9c>
 80010c4:	00820074 	movhi	r2,2049
 80010c8:	10bd2c04 	addi	r2,r2,-2896
 80010cc:	d8c12a15 	stw	r3,1192(sp)
 80010d0:	d8813b15 	stw	r2,1260(sp)
 80010d4:	d9812785 	stb	r6,1182(sp)
 80010d8:	88c0080c 	andi	r3,r17,32
 80010dc:	d8812d17 	ldw	r2,1204(sp)
 80010e0:	183fd51e 	bne	r3,zero,8001038 <__alt_data_end+0xfc001038>
 80010e4:	88c0040c 	andi	r3,r17,16
 80010e8:	18034126 	beq	r3,zero,8001df0 <___vfprintf_internal_r+0x181c>
 80010ec:	db012d17 	ldw	r12,1204(sp)
 80010f0:	14c00017 	ldw	r19,0(r2)
 80010f4:	0039883a 	mov	fp,zero
 80010f8:	63000104 	addi	r12,r12,4
 80010fc:	db012d15 	stw	r12,1204(sp)
 8001100:	003fd206 	br	800104c <__alt_data_end+0xfc00104c>
 8001104:	1c000007 	ldb	r16,0(r3)
 8001108:	81c3d626 	beq	r16,r7,8002064 <___vfprintf_internal_r+0x1a90>
 800110c:	8c400414 	ori	r17,r17,16
 8001110:	1805883a 	mov	r2,r3
 8001114:	003d9606 	br	8000770 <__alt_data_end+0xfc000770>
 8001118:	d8c12a15 	stw	r3,1192(sp)
 800111c:	d9812785 	stb	r6,1182(sp)
 8001120:	8880080c 	andi	r2,r17,32
 8001124:	10033f26 	beq	r2,zero,8001e24 <___vfprintf_internal_r+0x1850>
 8001128:	db012d17 	ldw	r12,1204(sp)
 800112c:	dac12f17 	ldw	r11,1212(sp)
 8001130:	60800017 	ldw	r2,0(r12)
 8001134:	5807d7fa 	srai	r3,r11,31
 8001138:	63000104 	addi	r12,r12,4
 800113c:	db012d15 	stw	r12,1204(sp)
 8001140:	12c00015 	stw	r11,0(r2)
 8001144:	10c00115 	stw	r3,4(r2)
 8001148:	003d5f06 	br	80006c8 <__alt_data_end+0xfc0006c8>
 800114c:	d8c12a15 	stw	r3,1192(sp)
 8001150:	88c0080c 	andi	r3,r17,32
 8001154:	d8812d17 	ldw	r2,1204(sp)
 8001158:	183e891e 	bne	r3,zero,8000b80 <__alt_data_end+0xfc000b80>
 800115c:	88c0040c 	andi	r3,r17,16
 8001160:	1801ea1e 	bne	r3,zero,800190c <___vfprintf_internal_r+0x1338>
 8001164:	88c0100c 	andi	r3,r17,64
 8001168:	1801e826 	beq	r3,zero,800190c <___vfprintf_internal_r+0x1338>
 800116c:	db012d17 	ldw	r12,1204(sp)
 8001170:	14c0000b 	ldhu	r19,0(r2)
 8001174:	0039883a 	mov	fp,zero
 8001178:	63000104 	addi	r12,r12,4
 800117c:	db012d15 	stw	r12,1204(sp)
 8001180:	0005883a 	mov	r2,zero
 8001184:	9807883a 	mov	r3,r19
 8001188:	003e8406 	br	8000b9c <__alt_data_end+0xfc000b9c>
 800118c:	30803fcc 	andi	r2,r6,255
 8001190:	1080201c 	xori	r2,r2,128
 8001194:	10bfe004 	addi	r2,r2,-128
 8001198:	10031d1e 	bne	r2,zero,8001e10 <___vfprintf_internal_r+0x183c>
 800119c:	1805883a 	mov	r2,r3
 80011a0:	01800804 	movi	r6,32
 80011a4:	1c000007 	ldb	r16,0(r3)
 80011a8:	003d7106 	br	8000770 <__alt_data_end+0xfc000770>
 80011ac:	8c400054 	ori	r17,r17,1
 80011b0:	1805883a 	mov	r2,r3
 80011b4:	1c000007 	ldb	r16,0(r3)
 80011b8:	003d6d06 	br	8000770 <__alt_data_end+0xfc000770>
 80011bc:	d8c12a15 	stw	r3,1192(sp)
 80011c0:	d9812785 	stb	r6,1182(sp)
 80011c4:	8880080c 	andi	r2,r17,32
 80011c8:	d8c12d17 	ldw	r3,1204(sp)
 80011cc:	103f861e 	bne	r2,zero,8000fe8 <__alt_data_end+0xfc000fe8>
 80011d0:	8880040c 	andi	r2,r17,16
 80011d4:	1001f31e 	bne	r2,zero,80019a4 <___vfprintf_internal_r+0x13d0>
 80011d8:	8880100c 	andi	r2,r17,64
 80011dc:	1001f126 	beq	r2,zero,80019a4 <___vfprintf_internal_r+0x13d0>
 80011e0:	1cc0000f 	ldh	r19,0(r3)
 80011e4:	db012d17 	ldw	r12,1204(sp)
 80011e8:	9839d7fa 	srai	fp,r19,31
 80011ec:	63000104 	addi	r12,r12,4
 80011f0:	db012d15 	stw	r12,1204(sp)
 80011f4:	e005883a 	mov	r2,fp
 80011f8:	003f8106 	br	8001000 <__alt_data_end+0xfc001000>
 80011fc:	8c401014 	ori	r17,r17,64
 8001200:	1805883a 	mov	r2,r3
 8001204:	1c000007 	ldb	r16,0(r3)
 8001208:	003d5906 	br	8000770 <__alt_data_end+0xfc000770>
 800120c:	db012d17 	ldw	r12,1204(sp)
 8001210:	d8c12a15 	stw	r3,1192(sp)
 8001214:	00c00044 	movi	r3,1
 8001218:	60800017 	ldw	r2,0(r12)
 800121c:	63000104 	addi	r12,r12,4
 8001220:	d8c12b15 	stw	r3,1196(sp)
 8001224:	d8012785 	stb	zero,1182(sp)
 8001228:	d8810405 	stb	r2,1040(sp)
 800122c:	db012d15 	stw	r12,1204(sp)
 8001230:	dac10404 	addi	r11,sp,1040
 8001234:	1825883a 	mov	r18,r3
 8001238:	d8013215 	stw	zero,1224(sp)
 800123c:	d8013415 	stw	zero,1232(sp)
 8001240:	dac13115 	stw	r11,1220(sp)
 8001244:	0005883a 	mov	r2,zero
 8001248:	003e7d06 	br	8000c40 <__alt_data_end+0xfc000c40>
 800124c:	db012d17 	ldw	r12,1204(sp)
 8001250:	00800c04 	movi	r2,48
 8001254:	d8812705 	stb	r2,1180(sp)
 8001258:	64c00017 	ldw	r19,0(r12)
 800125c:	00801e04 	movi	r2,120
 8001260:	d8812745 	stb	r2,1181(sp)
 8001264:	00820074 	movhi	r2,2049
 8001268:	10bd2c04 	addi	r2,r2,-2896
 800126c:	63000104 	addi	r12,r12,4
 8001270:	d8c12a15 	stw	r3,1192(sp)
 8001274:	d8813b15 	stw	r2,1260(sp)
 8001278:	0039883a 	mov	fp,zero
 800127c:	8c400094 	ori	r17,r17,2
 8001280:	db012d15 	stw	r12,1204(sp)
 8001284:	00800084 	movi	r2,2
 8001288:	04001e04 	movi	r16,120
 800128c:	9807883a 	mov	r3,r19
 8001290:	003e4206 	br	8000b9c <__alt_data_end+0xfc000b9c>
 8001294:	dac12d17 	ldw	r11,1204(sp)
 8001298:	db012d17 	ldw	r12,1204(sp)
 800129c:	d8c12a15 	stw	r3,1192(sp)
 80012a0:	5ac00017 	ldw	r11,0(r11)
 80012a4:	d8012785 	stb	zero,1182(sp)
 80012a8:	64c00104 	addi	r19,r12,4
 80012ac:	dac13115 	stw	r11,1220(sp)
 80012b0:	5803e826 	beq	r11,zero,8002254 <___vfprintf_internal_r+0x1c80>
 80012b4:	d9013117 	ldw	r4,1220(sp)
 80012b8:	48037a16 	blt	r9,zero,80020a4 <___vfprintf_internal_r+0x1ad0>
 80012bc:	480d883a 	mov	r6,r9
 80012c0:	000b883a 	mov	r5,zero
 80012c4:	da013f15 	stw	r8,1276(sp)
 80012c8:	da413e15 	stw	r9,1272(sp)
 80012cc:	8005aac0 	call	8005aac <memchr>
 80012d0:	da013f17 	ldw	r8,1276(sp)
 80012d4:	da413e17 	ldw	r9,1272(sp)
 80012d8:	10044426 	beq	r2,zero,80023ec <___vfprintf_internal_r+0x1e18>
 80012dc:	d8c13117 	ldw	r3,1220(sp)
 80012e0:	10e5c83a 	sub	r18,r2,r3
 80012e4:	4c834416 	blt	r9,r18,8001ff8 <___vfprintf_internal_r+0x1a24>
 80012e8:	9005883a 	mov	r2,r18
 80012ec:	90037216 	blt	r18,zero,80020b8 <___vfprintf_internal_r+0x1ae4>
 80012f0:	dd412783 	ldbu	r21,1182(sp)
 80012f4:	d8812b15 	stw	r2,1196(sp)
 80012f8:	dcc12d15 	stw	r19,1204(sp)
 80012fc:	d8013215 	stw	zero,1224(sp)
 8001300:	d8013415 	stw	zero,1232(sp)
 8001304:	003e4706 	br	8000c24 <__alt_data_end+0xfc000c24>
 8001308:	dac12d17 	ldw	r11,1204(sp)
 800130c:	db012d17 	ldw	r12,1204(sp)
 8001310:	5ac00017 	ldw	r11,0(r11)
 8001314:	dac12e15 	stw	r11,1208(sp)
 8001318:	62c00104 	addi	r11,r12,4
 800131c:	db012e17 	ldw	r12,1208(sp)
 8001320:	60034a16 	blt	r12,zero,800204c <___vfprintf_internal_r+0x1a78>
 8001324:	dac12d15 	stw	r11,1204(sp)
 8001328:	1805883a 	mov	r2,r3
 800132c:	1c000007 	ldb	r16,0(r3)
 8001330:	003d0f06 	br	8000770 <__alt_data_end+0xfc000770>
 8001334:	1805883a 	mov	r2,r3
 8001338:	01800ac4 	movi	r6,43
 800133c:	1c000007 	ldb	r16,0(r3)
 8001340:	003d0b06 	br	8000770 <__alt_data_end+0xfc000770>
 8001344:	d8c12a15 	stw	r3,1192(sp)
 8001348:	d9812785 	stb	r6,1182(sp)
 800134c:	803db226 	beq	r16,zero,8000a18 <__alt_data_end+0xfc000a18>
 8001350:	00c00044 	movi	r3,1
 8001354:	d8c12b15 	stw	r3,1196(sp)
 8001358:	dc010405 	stb	r16,1040(sp)
 800135c:	d8012785 	stb	zero,1182(sp)
 8001360:	003fb306 	br	8001230 <__alt_data_end+0xfc001230>
 8001364:	d8c12017 	ldw	r3,1152(sp)
 8001368:	003e6d06 	br	8000d20 <__alt_data_end+0xfc000d20>
 800136c:	10803fcc 	andi	r2,r2,255
 8001370:	00c00044 	movi	r3,1
 8001374:	10fe141e 	bne	r2,r3,8000bc8 <__alt_data_end+0xfc000bc8>
 8001378:	e000021e 	bne	fp,zero,8001384 <___vfprintf_internal_r+0xdb0>
 800137c:	00800244 	movi	r2,9
 8001380:	14c0202e 	bgeu	r2,r19,8001404 <___vfprintf_internal_r+0xe30>
 8001384:	dc012b15 	stw	r16,1196(sp)
 8001388:	dc412c15 	stw	r17,1200(sp)
 800138c:	9821883a 	mov	r16,r19
 8001390:	e023883a 	mov	r17,fp
 8001394:	dc810e04 	addi	r18,sp,1080
 8001398:	4027883a 	mov	r19,r8
 800139c:	4839883a 	mov	fp,r9
 80013a0:	8009883a 	mov	r4,r16
 80013a4:	880b883a 	mov	r5,r17
 80013a8:	01800284 	movi	r6,10
 80013ac:	000f883a 	mov	r7,zero
 80013b0:	8009aac0 	call	8009aac <__umoddi3>
 80013b4:	10800c04 	addi	r2,r2,48
 80013b8:	94bfffc4 	addi	r18,r18,-1
 80013bc:	8009883a 	mov	r4,r16
 80013c0:	880b883a 	mov	r5,r17
 80013c4:	01800284 	movi	r6,10
 80013c8:	000f883a 	mov	r7,zero
 80013cc:	90800005 	stb	r2,0(r18)
 80013d0:	80094ec0 	call	80094ec <__udivdi3>
 80013d4:	1021883a 	mov	r16,r2
 80013d8:	10c4b03a 	or	r2,r2,r3
 80013dc:	1823883a 	mov	r17,r3
 80013e0:	103fef1e 	bne	r2,zero,80013a0 <__alt_data_end+0xfc0013a0>
 80013e4:	dac12817 	ldw	r11,1184(sp)
 80013e8:	dc813115 	stw	r18,1220(sp)
 80013ec:	dc012b17 	ldw	r16,1196(sp)
 80013f0:	9811883a 	mov	r8,r19
 80013f4:	dc412c17 	ldw	r17,1200(sp)
 80013f8:	e013883a 	mov	r9,fp
 80013fc:	5ca5c83a 	sub	r18,r11,r18
 8001400:	003e0306 	br	8000c10 <__alt_data_end+0xfc000c10>
 8001404:	9cc00c04 	addi	r19,r19,48
 8001408:	d8c10dc4 	addi	r3,sp,1079
 800140c:	dcc10dc5 	stb	r19,1079(sp)
 8001410:	dc813c17 	ldw	r18,1264(sp)
 8001414:	d8c13115 	stw	r3,1220(sp)
 8001418:	003dfd06 	br	8000c10 <__alt_data_end+0xfc000c10>
 800141c:	00801944 	movi	r2,101
 8001420:	1400710e 	bge	r2,r16,80015e8 <___vfprintf_internal_r+0x1014>
 8001424:	d9013717 	ldw	r4,1244(sp)
 8001428:	d9413917 	ldw	r5,1252(sp)
 800142c:	000d883a 	mov	r6,zero
 8001430:	000f883a 	mov	r7,zero
 8001434:	d8c13d15 	stw	r3,1268(sp)
 8001438:	da013f15 	stw	r8,1276(sp)
 800143c:	800b2d00 	call	800b2d0 <__eqdf2>
 8001440:	d8c13d17 	ldw	r3,1268(sp)
 8001444:	da013f17 	ldw	r8,1276(sp)
 8001448:	1000ef1e 	bne	r2,zero,8001808 <___vfprintf_internal_r+0x1234>
 800144c:	d8811f17 	ldw	r2,1148(sp)
 8001450:	01020074 	movhi	r4,2049
 8001454:	213d3304 	addi	r4,r4,-2868
 8001458:	18c00044 	addi	r3,r3,1
 800145c:	10800044 	addi	r2,r2,1
 8001460:	41000015 	stw	r4,0(r8)
 8001464:	01000044 	movi	r4,1
 8001468:	41000115 	stw	r4,4(r8)
 800146c:	d8c12015 	stw	r3,1152(sp)
 8001470:	d8811f15 	stw	r2,1148(sp)
 8001474:	010001c4 	movi	r4,7
 8001478:	20828e16 	blt	r4,r2,8001eb4 <___vfprintf_internal_r+0x18e0>
 800147c:	42000204 	addi	r8,r8,8
 8001480:	d8812617 	ldw	r2,1176(sp)
 8001484:	dac13317 	ldw	r11,1228(sp)
 8001488:	12c00216 	blt	r2,r11,8001494 <___vfprintf_internal_r+0xec0>
 800148c:	8880004c 	andi	r2,r17,1
 8001490:	103e7726 	beq	r2,zero,8000e70 <__alt_data_end+0xfc000e70>
 8001494:	db013817 	ldw	r12,1248(sp)
 8001498:	d8811f17 	ldw	r2,1148(sp)
 800149c:	dac13517 	ldw	r11,1236(sp)
 80014a0:	1b07883a 	add	r3,r3,r12
 80014a4:	10800044 	addi	r2,r2,1
 80014a8:	42c00015 	stw	r11,0(r8)
 80014ac:	43000115 	stw	r12,4(r8)
 80014b0:	d8c12015 	stw	r3,1152(sp)
 80014b4:	d8811f15 	stw	r2,1148(sp)
 80014b8:	010001c4 	movi	r4,7
 80014bc:	2082ed16 	blt	r4,r2,8002074 <___vfprintf_internal_r+0x1aa0>
 80014c0:	42000204 	addi	r8,r8,8
 80014c4:	db013317 	ldw	r12,1228(sp)
 80014c8:	643fffc4 	addi	r16,r12,-1
 80014cc:	043e680e 	bge	zero,r16,8000e70 <__alt_data_end+0xfc000e70>
 80014d0:	04800404 	movi	r18,16
 80014d4:	d8811f17 	ldw	r2,1148(sp)
 80014d8:	94007e0e 	bge	r18,r16,80016d4 <___vfprintf_internal_r+0x1100>
 80014dc:	01420074 	movhi	r5,2049
 80014e0:	297d3384 	addi	r5,r5,-2866
 80014e4:	d9412c15 	stw	r5,1200(sp)
 80014e8:	054001c4 	movi	r21,7
 80014ec:	00000306 	br	80014fc <___vfprintf_internal_r+0xf28>
 80014f0:	42000204 	addi	r8,r8,8
 80014f4:	843ffc04 	addi	r16,r16,-16
 80014f8:	9400790e 	bge	r18,r16,80016e0 <___vfprintf_internal_r+0x110c>
 80014fc:	18c00404 	addi	r3,r3,16
 8001500:	10800044 	addi	r2,r2,1
 8001504:	45000015 	stw	r20,0(r8)
 8001508:	44800115 	stw	r18,4(r8)
 800150c:	d8c12015 	stw	r3,1152(sp)
 8001510:	d8811f15 	stw	r2,1148(sp)
 8001514:	a8bff60e 	bge	r21,r2,80014f0 <__alt_data_end+0xfc0014f0>
 8001518:	b009883a 	mov	r4,r22
 800151c:	b80b883a 	mov	r5,r23
 8001520:	d9811e04 	addi	r6,sp,1144
 8001524:	800781c0 	call	800781c <__sprint_r>
 8001528:	103d411e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 800152c:	d8c12017 	ldw	r3,1152(sp)
 8001530:	d8811f17 	ldw	r2,1148(sp)
 8001534:	da000404 	addi	r8,sp,16
 8001538:	003fee06 	br	80014f4 <__alt_data_end+0xfc0014f4>
 800153c:	dac12e17 	ldw	r11,1208(sp)
 8001540:	db012b17 	ldw	r12,1196(sp)
 8001544:	5b2bc83a 	sub	r21,r11,r12
 8001548:	057e130e 	bge	zero,r21,8000d98 <__alt_data_end+0xfc000d98>
 800154c:	07000404 	movi	fp,16
 8001550:	d8811f17 	ldw	r2,1148(sp)
 8001554:	e543640e 	bge	fp,r21,80022e8 <___vfprintf_internal_r+0x1d14>
 8001558:	01420074 	movhi	r5,2049
 800155c:	297d3384 	addi	r5,r5,-2866
 8001560:	d9412c15 	stw	r5,1200(sp)
 8001564:	04c001c4 	movi	r19,7
 8001568:	00000306 	br	8001578 <___vfprintf_internal_r+0xfa4>
 800156c:	ad7ffc04 	addi	r21,r21,-16
 8001570:	42000204 	addi	r8,r8,8
 8001574:	e540110e 	bge	fp,r21,80015bc <___vfprintf_internal_r+0xfe8>
 8001578:	18c00404 	addi	r3,r3,16
 800157c:	10800044 	addi	r2,r2,1
 8001580:	45000015 	stw	r20,0(r8)
 8001584:	47000115 	stw	fp,4(r8)
 8001588:	d8c12015 	stw	r3,1152(sp)
 800158c:	d8811f15 	stw	r2,1148(sp)
 8001590:	98bff60e 	bge	r19,r2,800156c <__alt_data_end+0xfc00156c>
 8001594:	b009883a 	mov	r4,r22
 8001598:	b80b883a 	mov	r5,r23
 800159c:	d9811e04 	addi	r6,sp,1144
 80015a0:	800781c0 	call	800781c <__sprint_r>
 80015a4:	103d221e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 80015a8:	ad7ffc04 	addi	r21,r21,-16
 80015ac:	d8c12017 	ldw	r3,1152(sp)
 80015b0:	d8811f17 	ldw	r2,1148(sp)
 80015b4:	da000404 	addi	r8,sp,16
 80015b8:	e57fef16 	blt	fp,r21,8001578 <__alt_data_end+0xfc001578>
 80015bc:	dac12c17 	ldw	r11,1200(sp)
 80015c0:	1d47883a 	add	r3,r3,r21
 80015c4:	10800044 	addi	r2,r2,1
 80015c8:	42c00015 	stw	r11,0(r8)
 80015cc:	45400115 	stw	r21,4(r8)
 80015d0:	d8c12015 	stw	r3,1152(sp)
 80015d4:	d8811f15 	stw	r2,1148(sp)
 80015d8:	010001c4 	movi	r4,7
 80015dc:	20819116 	blt	r4,r2,8001c24 <___vfprintf_internal_r+0x1650>
 80015e0:	42000204 	addi	r8,r8,8
 80015e4:	003dec06 	br	8000d98 <__alt_data_end+0xfc000d98>
 80015e8:	db013317 	ldw	r12,1228(sp)
 80015ec:	00800044 	movi	r2,1
 80015f0:	18c00044 	addi	r3,r3,1
 80015f4:	1301530e 	bge	r2,r12,8001b44 <___vfprintf_internal_r+0x1570>
 80015f8:	dc011f17 	ldw	r16,1148(sp)
 80015fc:	dac13117 	ldw	r11,1220(sp)
 8001600:	00800044 	movi	r2,1
 8001604:	84000044 	addi	r16,r16,1
 8001608:	40800115 	stw	r2,4(r8)
 800160c:	42c00015 	stw	r11,0(r8)
 8001610:	d8c12015 	stw	r3,1152(sp)
 8001614:	dc011f15 	stw	r16,1148(sp)
 8001618:	008001c4 	movi	r2,7
 800161c:	14016b16 	blt	r2,r16,8001bcc <___vfprintf_internal_r+0x15f8>
 8001620:	42000204 	addi	r8,r8,8
 8001624:	db013817 	ldw	r12,1248(sp)
 8001628:	dac13517 	ldw	r11,1236(sp)
 800162c:	84000044 	addi	r16,r16,1
 8001630:	1b07883a 	add	r3,r3,r12
 8001634:	42c00015 	stw	r11,0(r8)
 8001638:	43000115 	stw	r12,4(r8)
 800163c:	d8c12015 	stw	r3,1152(sp)
 8001640:	dc011f15 	stw	r16,1148(sp)
 8001644:	008001c4 	movi	r2,7
 8001648:	14016916 	blt	r2,r16,8001bf0 <___vfprintf_internal_r+0x161c>
 800164c:	44800204 	addi	r18,r8,8
 8001650:	d9013717 	ldw	r4,1244(sp)
 8001654:	d9413917 	ldw	r5,1252(sp)
 8001658:	000d883a 	mov	r6,zero
 800165c:	000f883a 	mov	r7,zero
 8001660:	d8c13d15 	stw	r3,1268(sp)
 8001664:	800b2d00 	call	800b2d0 <__eqdf2>
 8001668:	d8c13d17 	ldw	r3,1268(sp)
 800166c:	db013317 	ldw	r12,1228(sp)
 8001670:	1000ae26 	beq	r2,zero,800192c <___vfprintf_internal_r+0x1358>
 8001674:	dac13117 	ldw	r11,1220(sp)
 8001678:	60bfffc4 	addi	r2,r12,-1
 800167c:	1887883a 	add	r3,r3,r2
 8001680:	59000044 	addi	r4,r11,1
 8001684:	84000044 	addi	r16,r16,1
 8001688:	90800115 	stw	r2,4(r18)
 800168c:	91000015 	stw	r4,0(r18)
 8001690:	d8c12015 	stw	r3,1152(sp)
 8001694:	dc011f15 	stw	r16,1148(sp)
 8001698:	008001c4 	movi	r2,7
 800169c:	14014216 	blt	r2,r16,8001ba8 <___vfprintf_internal_r+0x15d4>
 80016a0:	94800204 	addi	r18,r18,8
 80016a4:	dac13a17 	ldw	r11,1256(sp)
 80016a8:	dd4122c4 	addi	r21,sp,1163
 80016ac:	84000044 	addi	r16,r16,1
 80016b0:	58c7883a 	add	r3,r11,r3
 80016b4:	95400015 	stw	r21,0(r18)
 80016b8:	92c00115 	stw	r11,4(r18)
 80016bc:	d8c12015 	stw	r3,1152(sp)
 80016c0:	dc011f15 	stw	r16,1148(sp)
 80016c4:	008001c4 	movi	r2,7
 80016c8:	14000e16 	blt	r2,r16,8001704 <___vfprintf_internal_r+0x1130>
 80016cc:	92000204 	addi	r8,r18,8
 80016d0:	003de706 	br	8000e70 <__alt_data_end+0xfc000e70>
 80016d4:	01020074 	movhi	r4,2049
 80016d8:	213d3384 	addi	r4,r4,-2866
 80016dc:	d9012c15 	stw	r4,1200(sp)
 80016e0:	dac12c17 	ldw	r11,1200(sp)
 80016e4:	1c07883a 	add	r3,r3,r16
 80016e8:	44000115 	stw	r16,4(r8)
 80016ec:	42c00015 	stw	r11,0(r8)
 80016f0:	10800044 	addi	r2,r2,1
 80016f4:	d8c12015 	stw	r3,1152(sp)
 80016f8:	d8811f15 	stw	r2,1148(sp)
 80016fc:	010001c4 	movi	r4,7
 8001700:	20bdda0e 	bge	r4,r2,8000e6c <__alt_data_end+0xfc000e6c>
 8001704:	b009883a 	mov	r4,r22
 8001708:	b80b883a 	mov	r5,r23
 800170c:	d9811e04 	addi	r6,sp,1144
 8001710:	800781c0 	call	800781c <__sprint_r>
 8001714:	103cc61e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8001718:	d8c12017 	ldw	r3,1152(sp)
 800171c:	da000404 	addi	r8,sp,16
 8001720:	003dd306 	br	8000e70 <__alt_data_end+0xfc000e70>
 8001724:	b009883a 	mov	r4,r22
 8001728:	b80b883a 	mov	r5,r23
 800172c:	d9811e04 	addi	r6,sp,1144
 8001730:	800781c0 	call	800781c <__sprint_r>
 8001734:	103e0926 	beq	r2,zero,8000f5c <__alt_data_end+0xfc000f5c>
 8001738:	003cbd06 	br	8000a30 <__alt_data_end+0xfc000a30>
 800173c:	10803fcc 	andi	r2,r2,255
 8001740:	1000651e 	bne	r2,zero,80018d8 <___vfprintf_internal_r+0x1304>
 8001744:	8880004c 	andi	r2,r17,1
 8001748:	10013226 	beq	r2,zero,8001c14 <___vfprintf_internal_r+0x1640>
 800174c:	00800c04 	movi	r2,48
 8001750:	d8c10dc4 	addi	r3,sp,1079
 8001754:	d8810dc5 	stb	r2,1079(sp)
 8001758:	dc813c17 	ldw	r18,1264(sp)
 800175c:	d8c13115 	stw	r3,1220(sp)
 8001760:	003d2b06 	br	8000c10 <__alt_data_end+0xfc000c10>
 8001764:	b009883a 	mov	r4,r22
 8001768:	b80b883a 	mov	r5,r23
 800176c:	d9811e04 	addi	r6,sp,1144
 8001770:	800781c0 	call	800781c <__sprint_r>
 8001774:	103cae1e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8001778:	d8c12017 	ldw	r3,1152(sp)
 800177c:	da000404 	addi	r8,sp,16
 8001780:	003dae06 	br	8000e3c <__alt_data_end+0xfc000e3c>
 8001784:	b009883a 	mov	r4,r22
 8001788:	b80b883a 	mov	r5,r23
 800178c:	d9811e04 	addi	r6,sp,1144
 8001790:	800781c0 	call	800781c <__sprint_r>
 8001794:	103ca61e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8001798:	d8c12017 	ldw	r3,1152(sp)
 800179c:	da000404 	addi	r8,sp,16
 80017a0:	003d6c06 	br	8000d54 <__alt_data_end+0xfc000d54>
 80017a4:	b009883a 	mov	r4,r22
 80017a8:	b80b883a 	mov	r5,r23
 80017ac:	d9811e04 	addi	r6,sp,1144
 80017b0:	800781c0 	call	800781c <__sprint_r>
 80017b4:	103c9e1e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 80017b8:	d8c12017 	ldw	r3,1152(sp)
 80017bc:	da000404 	addi	r8,sp,16
 80017c0:	003d7206 	br	8000d8c <__alt_data_end+0xfc000d8c>
 80017c4:	d9413b17 	ldw	r5,1260(sp)
 80017c8:	d8c10e04 	addi	r3,sp,1080
 80017cc:	988003cc 	andi	r2,r19,15
 80017d0:	e008973a 	slli	r4,fp,28
 80017d4:	2885883a 	add	r2,r5,r2
 80017d8:	9826d13a 	srli	r19,r19,4
 80017dc:	10800003 	ldbu	r2,0(r2)
 80017e0:	e038d13a 	srli	fp,fp,4
 80017e4:	18ffffc4 	addi	r3,r3,-1
 80017e8:	24e6b03a 	or	r19,r4,r19
 80017ec:	18800005 	stb	r2,0(r3)
 80017f0:	9f04b03a 	or	r2,r19,fp
 80017f4:	103ff51e 	bne	r2,zero,80017cc <__alt_data_end+0xfc0017cc>
 80017f8:	db012817 	ldw	r12,1184(sp)
 80017fc:	d8c13115 	stw	r3,1220(sp)
 8001800:	60e5c83a 	sub	r18,r12,r3
 8001804:	003d0206 	br	8000c10 <__alt_data_end+0xfc000c10>
 8001808:	dc012617 	ldw	r16,1176(sp)
 800180c:	0401b10e 	bge	zero,r16,8001ed4 <___vfprintf_internal_r+0x1900>
 8001810:	db013117 	ldw	r12,1220(sp)
 8001814:	dac13317 	ldw	r11,1228(sp)
 8001818:	62e1883a 	add	r16,r12,r11
 800181c:	db013417 	ldw	r12,1232(sp)
 8001820:	5825883a 	mov	r18,r11
 8001824:	62c0010e 	bge	r12,r11,800182c <___vfprintf_internal_r+0x1258>
 8001828:	6025883a 	mov	r18,r12
 800182c:	04800b0e 	bge	zero,r18,800185c <___vfprintf_internal_r+0x1288>
 8001830:	d8811f17 	ldw	r2,1148(sp)
 8001834:	dac13117 	ldw	r11,1220(sp)
 8001838:	1c87883a 	add	r3,r3,r18
 800183c:	10800044 	addi	r2,r2,1
 8001840:	42c00015 	stw	r11,0(r8)
 8001844:	44800115 	stw	r18,4(r8)
 8001848:	d8c12015 	stw	r3,1152(sp)
 800184c:	d8811f15 	stw	r2,1148(sp)
 8001850:	010001c4 	movi	r4,7
 8001854:	20824f16 	blt	r4,r2,8002194 <___vfprintf_internal_r+0x1bc0>
 8001858:	42000204 	addi	r8,r8,8
 800185c:	90024b16 	blt	r18,zero,800218c <___vfprintf_internal_r+0x1bb8>
 8001860:	db013417 	ldw	r12,1232(sp)
 8001864:	64a5c83a 	sub	r18,r12,r18
 8001868:	0480730e 	bge	zero,r18,8001a38 <___vfprintf_internal_r+0x1464>
 800186c:	05400404 	movi	r21,16
 8001870:	d8811f17 	ldw	r2,1148(sp)
 8001874:	ac817d0e 	bge	r21,r18,8001e6c <___vfprintf_internal_r+0x1898>
 8001878:	01420074 	movhi	r5,2049
 800187c:	297d3384 	addi	r5,r5,-2866
 8001880:	d9412c15 	stw	r5,1200(sp)
 8001884:	070001c4 	movi	fp,7
 8001888:	00000306 	br	8001898 <___vfprintf_internal_r+0x12c4>
 800188c:	42000204 	addi	r8,r8,8
 8001890:	94bffc04 	addi	r18,r18,-16
 8001894:	ac81780e 	bge	r21,r18,8001e78 <___vfprintf_internal_r+0x18a4>
 8001898:	18c00404 	addi	r3,r3,16
 800189c:	10800044 	addi	r2,r2,1
 80018a0:	45000015 	stw	r20,0(r8)
 80018a4:	45400115 	stw	r21,4(r8)
 80018a8:	d8c12015 	stw	r3,1152(sp)
 80018ac:	d8811f15 	stw	r2,1148(sp)
 80018b0:	e0bff60e 	bge	fp,r2,800188c <__alt_data_end+0xfc00188c>
 80018b4:	b009883a 	mov	r4,r22
 80018b8:	b80b883a 	mov	r5,r23
 80018bc:	d9811e04 	addi	r6,sp,1144
 80018c0:	800781c0 	call	800781c <__sprint_r>
 80018c4:	103c5a1e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 80018c8:	d8c12017 	ldw	r3,1152(sp)
 80018cc:	d8811f17 	ldw	r2,1148(sp)
 80018d0:	da000404 	addi	r8,sp,16
 80018d4:	003fee06 	br	8001890 <__alt_data_end+0xfc001890>
 80018d8:	dac10e04 	addi	r11,sp,1080
 80018dc:	0025883a 	mov	r18,zero
 80018e0:	dac13115 	stw	r11,1220(sp)
 80018e4:	003cca06 	br	8000c10 <__alt_data_end+0xfc000c10>
 80018e8:	b009883a 	mov	r4,r22
 80018ec:	b80b883a 	mov	r5,r23
 80018f0:	d9811e04 	addi	r6,sp,1144
 80018f4:	800781c0 	call	800781c <__sprint_r>
 80018f8:	103c4d1e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 80018fc:	d8c12017 	ldw	r3,1152(sp)
 8001900:	d8812787 	ldb	r2,1182(sp)
 8001904:	da000404 	addi	r8,sp,16
 8001908:	003d0506 	br	8000d20 <__alt_data_end+0xfc000d20>
 800190c:	dac12d17 	ldw	r11,1204(sp)
 8001910:	14c00017 	ldw	r19,0(r2)
 8001914:	0039883a 	mov	fp,zero
 8001918:	5ac00104 	addi	r11,r11,4
 800191c:	dac12d15 	stw	r11,1204(sp)
 8001920:	0005883a 	mov	r2,zero
 8001924:	9807883a 	mov	r3,r19
 8001928:	003c9c06 	br	8000b9c <__alt_data_end+0xfc000b9c>
 800192c:	657fffc4 	addi	r21,r12,-1
 8001930:	057f5c0e 	bge	zero,r21,80016a4 <__alt_data_end+0xfc0016a4>
 8001934:	07000404 	movi	fp,16
 8001938:	e5408f0e 	bge	fp,r21,8001b78 <___vfprintf_internal_r+0x15a4>
 800193c:	01020074 	movhi	r4,2049
 8001940:	213d3384 	addi	r4,r4,-2866
 8001944:	d9012c15 	stw	r4,1200(sp)
 8001948:	01c001c4 	movi	r7,7
 800194c:	00000306 	br	800195c <___vfprintf_internal_r+0x1388>
 8001950:	94800204 	addi	r18,r18,8
 8001954:	ad7ffc04 	addi	r21,r21,-16
 8001958:	e5408a0e 	bge	fp,r21,8001b84 <___vfprintf_internal_r+0x15b0>
 800195c:	18c00404 	addi	r3,r3,16
 8001960:	84000044 	addi	r16,r16,1
 8001964:	95000015 	stw	r20,0(r18)
 8001968:	97000115 	stw	fp,4(r18)
 800196c:	d8c12015 	stw	r3,1152(sp)
 8001970:	dc011f15 	stw	r16,1148(sp)
 8001974:	3c3ff60e 	bge	r7,r16,8001950 <__alt_data_end+0xfc001950>
 8001978:	b009883a 	mov	r4,r22
 800197c:	b80b883a 	mov	r5,r23
 8001980:	d9811e04 	addi	r6,sp,1144
 8001984:	d9c13d15 	stw	r7,1268(sp)
 8001988:	800781c0 	call	800781c <__sprint_r>
 800198c:	d9c13d17 	ldw	r7,1268(sp)
 8001990:	103c271e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8001994:	d8c12017 	ldw	r3,1152(sp)
 8001998:	dc011f17 	ldw	r16,1148(sp)
 800199c:	dc800404 	addi	r18,sp,16
 80019a0:	003fec06 	br	8001954 <__alt_data_end+0xfc001954>
 80019a4:	1cc00017 	ldw	r19,0(r3)
 80019a8:	dac12d17 	ldw	r11,1204(sp)
 80019ac:	9839d7fa 	srai	fp,r19,31
 80019b0:	5ac00104 	addi	r11,r11,4
 80019b4:	dac12d15 	stw	r11,1204(sp)
 80019b8:	e005883a 	mov	r2,fp
 80019bc:	003d9006 	br	8001000 <__alt_data_end+0xfc001000>
 80019c0:	00800084 	movi	r2,2
 80019c4:	9f06b03a 	or	r3,r19,fp
 80019c8:	003c7406 	br	8000b9c <__alt_data_end+0xfc000b9c>
 80019cc:	db012d17 	ldw	r12,1204(sp)
 80019d0:	14c00017 	ldw	r19,0(r2)
 80019d4:	0039883a 	mov	fp,zero
 80019d8:	63000104 	addi	r12,r12,4
 80019dc:	db012d15 	stw	r12,1204(sp)
 80019e0:	00800044 	movi	r2,1
 80019e4:	9807883a 	mov	r3,r19
 80019e8:	003c6c06 	br	8000b9c <__alt_data_end+0xfc000b9c>
 80019ec:	10803fcc 	andi	r2,r2,255
 80019f0:	1080201c 	xori	r2,r2,128
 80019f4:	10bfe004 	addi	r2,r2,-128
 80019f8:	01000c04 	movi	r4,48
 80019fc:	1101a526 	beq	r2,r4,8002094 <___vfprintf_internal_r+0x1ac0>
 8001a00:	dac13117 	ldw	r11,1220(sp)
 8001a04:	db012817 	ldw	r12,1184(sp)
 8001a08:	193fffc5 	stb	r4,-1(r3)
 8001a0c:	5affffc4 	addi	r11,r11,-1
 8001a10:	dac13115 	stw	r11,1220(sp)
 8001a14:	62e5c83a 	sub	r18,r12,r11
 8001a18:	003c7d06 	br	8000c10 <__alt_data_end+0xfc000c10>
 8001a1c:	b009883a 	mov	r4,r22
 8001a20:	b80b883a 	mov	r5,r23
 8001a24:	d9811e04 	addi	r6,sp,1144
 8001a28:	800781c0 	call	800781c <__sprint_r>
 8001a2c:	103c001e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8001a30:	d8c12017 	ldw	r3,1152(sp)
 8001a34:	da000404 	addi	r8,sp,16
 8001a38:	db013117 	ldw	r12,1220(sp)
 8001a3c:	dac13417 	ldw	r11,1232(sp)
 8001a40:	d8812617 	ldw	r2,1176(sp)
 8001a44:	62e5883a 	add	r18,r12,r11
 8001a48:	db013317 	ldw	r12,1228(sp)
 8001a4c:	13000216 	blt	r2,r12,8001a58 <___vfprintf_internal_r+0x1484>
 8001a50:	8900004c 	andi	r4,r17,1
 8001a54:	20000c26 	beq	r4,zero,8001a88 <___vfprintf_internal_r+0x14b4>
 8001a58:	dac13817 	ldw	r11,1248(sp)
 8001a5c:	d9011f17 	ldw	r4,1148(sp)
 8001a60:	db013517 	ldw	r12,1236(sp)
 8001a64:	1ac7883a 	add	r3,r3,r11
 8001a68:	21000044 	addi	r4,r4,1
 8001a6c:	43000015 	stw	r12,0(r8)
 8001a70:	42c00115 	stw	r11,4(r8)
 8001a74:	d8c12015 	stw	r3,1152(sp)
 8001a78:	d9011f15 	stw	r4,1148(sp)
 8001a7c:	014001c4 	movi	r5,7
 8001a80:	2901cc16 	blt	r5,r4,80021b4 <___vfprintf_internal_r+0x1be0>
 8001a84:	42000204 	addi	r8,r8,8
 8001a88:	dac13317 	ldw	r11,1228(sp)
 8001a8c:	8489c83a 	sub	r4,r16,r18
 8001a90:	5885c83a 	sub	r2,r11,r2
 8001a94:	1021883a 	mov	r16,r2
 8001a98:	2080010e 	bge	r4,r2,8001aa0 <___vfprintf_internal_r+0x14cc>
 8001a9c:	2021883a 	mov	r16,r4
 8001aa0:	04000a0e 	bge	zero,r16,8001acc <___vfprintf_internal_r+0x14f8>
 8001aa4:	d9011f17 	ldw	r4,1148(sp)
 8001aa8:	1c07883a 	add	r3,r3,r16
 8001aac:	44800015 	stw	r18,0(r8)
 8001ab0:	21000044 	addi	r4,r4,1
 8001ab4:	44000115 	stw	r16,4(r8)
 8001ab8:	d8c12015 	stw	r3,1152(sp)
 8001abc:	d9011f15 	stw	r4,1148(sp)
 8001ac0:	014001c4 	movi	r5,7
 8001ac4:	2901d616 	blt	r5,r4,8002220 <___vfprintf_internal_r+0x1c4c>
 8001ac8:	42000204 	addi	r8,r8,8
 8001acc:	8001df16 	blt	r16,zero,800224c <___vfprintf_internal_r+0x1c78>
 8001ad0:	1421c83a 	sub	r16,r2,r16
 8001ad4:	043ce60e 	bge	zero,r16,8000e70 <__alt_data_end+0xfc000e70>
 8001ad8:	04800404 	movi	r18,16
 8001adc:	d8811f17 	ldw	r2,1148(sp)
 8001ae0:	943efc0e 	bge	r18,r16,80016d4 <__alt_data_end+0xfc0016d4>
 8001ae4:	01420074 	movhi	r5,2049
 8001ae8:	297d3384 	addi	r5,r5,-2866
 8001aec:	d9412c15 	stw	r5,1200(sp)
 8001af0:	054001c4 	movi	r21,7
 8001af4:	00000306 	br	8001b04 <___vfprintf_internal_r+0x1530>
 8001af8:	42000204 	addi	r8,r8,8
 8001afc:	843ffc04 	addi	r16,r16,-16
 8001b00:	943ef70e 	bge	r18,r16,80016e0 <__alt_data_end+0xfc0016e0>
 8001b04:	18c00404 	addi	r3,r3,16
 8001b08:	10800044 	addi	r2,r2,1
 8001b0c:	45000015 	stw	r20,0(r8)
 8001b10:	44800115 	stw	r18,4(r8)
 8001b14:	d8c12015 	stw	r3,1152(sp)
 8001b18:	d8811f15 	stw	r2,1148(sp)
 8001b1c:	a8bff60e 	bge	r21,r2,8001af8 <__alt_data_end+0xfc001af8>
 8001b20:	b009883a 	mov	r4,r22
 8001b24:	b80b883a 	mov	r5,r23
 8001b28:	d9811e04 	addi	r6,sp,1144
 8001b2c:	800781c0 	call	800781c <__sprint_r>
 8001b30:	103bbf1e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8001b34:	d8c12017 	ldw	r3,1152(sp)
 8001b38:	d8811f17 	ldw	r2,1148(sp)
 8001b3c:	da000404 	addi	r8,sp,16
 8001b40:	003fee06 	br	8001afc <__alt_data_end+0xfc001afc>
 8001b44:	8888703a 	and	r4,r17,r2
 8001b48:	203eab1e 	bne	r4,zero,80015f8 <__alt_data_end+0xfc0015f8>
 8001b4c:	dc011f17 	ldw	r16,1148(sp)
 8001b50:	db013117 	ldw	r12,1220(sp)
 8001b54:	40800115 	stw	r2,4(r8)
 8001b58:	84000044 	addi	r16,r16,1
 8001b5c:	43000015 	stw	r12,0(r8)
 8001b60:	d8c12015 	stw	r3,1152(sp)
 8001b64:	dc011f15 	stw	r16,1148(sp)
 8001b68:	008001c4 	movi	r2,7
 8001b6c:	14000e16 	blt	r2,r16,8001ba8 <___vfprintf_internal_r+0x15d4>
 8001b70:	44800204 	addi	r18,r8,8
 8001b74:	003ecb06 	br	80016a4 <__alt_data_end+0xfc0016a4>
 8001b78:	00820074 	movhi	r2,2049
 8001b7c:	10bd3384 	addi	r2,r2,-2866
 8001b80:	d8812c15 	stw	r2,1200(sp)
 8001b84:	dac12c17 	ldw	r11,1200(sp)
 8001b88:	1d47883a 	add	r3,r3,r21
 8001b8c:	84000044 	addi	r16,r16,1
 8001b90:	92c00015 	stw	r11,0(r18)
 8001b94:	95400115 	stw	r21,4(r18)
 8001b98:	d8c12015 	stw	r3,1152(sp)
 8001b9c:	dc011f15 	stw	r16,1148(sp)
 8001ba0:	008001c4 	movi	r2,7
 8001ba4:	143ebe0e 	bge	r2,r16,80016a0 <__alt_data_end+0xfc0016a0>
 8001ba8:	b009883a 	mov	r4,r22
 8001bac:	b80b883a 	mov	r5,r23
 8001bb0:	d9811e04 	addi	r6,sp,1144
 8001bb4:	800781c0 	call	800781c <__sprint_r>
 8001bb8:	103b9d1e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8001bbc:	d8c12017 	ldw	r3,1152(sp)
 8001bc0:	dc011f17 	ldw	r16,1148(sp)
 8001bc4:	dc800404 	addi	r18,sp,16
 8001bc8:	003eb606 	br	80016a4 <__alt_data_end+0xfc0016a4>
 8001bcc:	b009883a 	mov	r4,r22
 8001bd0:	b80b883a 	mov	r5,r23
 8001bd4:	d9811e04 	addi	r6,sp,1144
 8001bd8:	800781c0 	call	800781c <__sprint_r>
 8001bdc:	103b941e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8001be0:	d8c12017 	ldw	r3,1152(sp)
 8001be4:	dc011f17 	ldw	r16,1148(sp)
 8001be8:	da000404 	addi	r8,sp,16
 8001bec:	003e8d06 	br	8001624 <__alt_data_end+0xfc001624>
 8001bf0:	b009883a 	mov	r4,r22
 8001bf4:	b80b883a 	mov	r5,r23
 8001bf8:	d9811e04 	addi	r6,sp,1144
 8001bfc:	800781c0 	call	800781c <__sprint_r>
 8001c00:	103b8b1e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8001c04:	d8c12017 	ldw	r3,1152(sp)
 8001c08:	dc011f17 	ldw	r16,1148(sp)
 8001c0c:	dc800404 	addi	r18,sp,16
 8001c10:	003e8f06 	br	8001650 <__alt_data_end+0xfc001650>
 8001c14:	db010e04 	addi	r12,sp,1080
 8001c18:	0025883a 	mov	r18,zero
 8001c1c:	db013115 	stw	r12,1220(sp)
 8001c20:	003bfb06 	br	8000c10 <__alt_data_end+0xfc000c10>
 8001c24:	b009883a 	mov	r4,r22
 8001c28:	b80b883a 	mov	r5,r23
 8001c2c:	d9811e04 	addi	r6,sp,1144
 8001c30:	800781c0 	call	800781c <__sprint_r>
 8001c34:	103b7e1e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8001c38:	d8c12017 	ldw	r3,1152(sp)
 8001c3c:	da000404 	addi	r8,sp,16
 8001c40:	003c5506 	br	8000d98 <__alt_data_end+0xfc000d98>
 8001c44:	04e7c83a 	sub	r19,zero,r19
 8001c48:	9804c03a 	cmpne	r2,r19,zero
 8001c4c:	0739c83a 	sub	fp,zero,fp
 8001c50:	e0b9c83a 	sub	fp,fp,r2
 8001c54:	05400b44 	movi	r21,45
 8001c58:	dd412785 	stb	r21,1182(sp)
 8001c5c:	da413215 	stw	r9,1224(sp)
 8001c60:	00800044 	movi	r2,1
 8001c64:	9f06b03a 	or	r3,r19,fp
 8001c68:	003bcf06 	br	8000ba8 <__alt_data_end+0xfc000ba8>
 8001c6c:	da013f15 	stw	r8,1276(sp)
 8001c70:	da413e15 	stw	r9,1272(sp)
 8001c74:	80074780 	call	8007478 <__fpclassifyd>
 8001c78:	da013f17 	ldw	r8,1276(sp)
 8001c7c:	da413e17 	ldw	r9,1272(sp)
 8001c80:	1000ce26 	beq	r2,zero,8001fbc <___vfprintf_internal_r+0x19e8>
 8001c84:	057ff7c4 	movi	r21,-33
 8001c88:	00bfffc4 	movi	r2,-1
 8001c8c:	856a703a 	and	r21,r16,r21
 8001c90:	4881f026 	beq	r9,r2,8002454 <___vfprintf_internal_r+0x1e80>
 8001c94:	008011c4 	movi	r2,71
 8001c98:	a881e526 	beq	r21,r2,8002430 <___vfprintf_internal_r+0x1e5c>
 8001c9c:	db013917 	ldw	r12,1252(sp)
 8001ca0:	8ac04014 	ori	r11,r17,256
 8001ca4:	dac12d15 	stw	r11,1204(sp)
 8001ca8:	6001e416 	blt	r12,zero,800243c <___vfprintf_internal_r+0x1e68>
 8001cac:	dc813917 	ldw	r18,1252(sp)
 8001cb0:	d8012b05 	stb	zero,1196(sp)
 8001cb4:	00801984 	movi	r2,102
 8001cb8:	80811826 	beq	r16,r2,800211c <___vfprintf_internal_r+0x1b48>
 8001cbc:	00801184 	movi	r2,70
 8001cc0:	80811626 	beq	r16,r2,800211c <___vfprintf_internal_r+0x1b48>
 8001cc4:	00801144 	movi	r2,69
 8001cc8:	a881e026 	beq	r21,r2,800244c <___vfprintf_internal_r+0x1e78>
 8001ccc:	4839883a 	mov	fp,r9
 8001cd0:	d8812604 	addi	r2,sp,1176
 8001cd4:	d8800115 	stw	r2,4(sp)
 8001cd8:	d9413717 	ldw	r5,1244(sp)
 8001cdc:	d8812504 	addi	r2,sp,1172
 8001ce0:	d8800215 	stw	r2,8(sp)
 8001ce4:	d8812104 	addi	r2,sp,1156
 8001ce8:	df000015 	stw	fp,0(sp)
 8001cec:	d8800315 	stw	r2,12(sp)
 8001cf0:	b009883a 	mov	r4,r22
 8001cf4:	900d883a 	mov	r6,r18
 8001cf8:	01c00084 	movi	r7,2
 8001cfc:	da013f15 	stw	r8,1276(sp)
 8001d00:	da413e15 	stw	r9,1272(sp)
 8001d04:	80029240 	call	8002924 <_dtoa_r>
 8001d08:	d8813115 	stw	r2,1220(sp)
 8001d0c:	008019c4 	movi	r2,103
 8001d10:	da013f17 	ldw	r8,1276(sp)
 8001d14:	da413e17 	ldw	r9,1272(sp)
 8001d18:	80800226 	beq	r16,r2,8001d24 <___vfprintf_internal_r+0x1750>
 8001d1c:	008011c4 	movi	r2,71
 8001d20:	8081101e 	bne	r16,r2,8002164 <___vfprintf_internal_r+0x1b90>
 8001d24:	8880004c 	andi	r2,r17,1
 8001d28:	1001df26 	beq	r2,zero,80024a8 <___vfprintf_internal_r+0x1ed4>
 8001d2c:	db013117 	ldw	r12,1220(sp)
 8001d30:	6715883a 	add	r10,r12,fp
 8001d34:	d9013717 	ldw	r4,1244(sp)
 8001d38:	900b883a 	mov	r5,r18
 8001d3c:	000d883a 	mov	r6,zero
 8001d40:	000f883a 	mov	r7,zero
 8001d44:	da013f15 	stw	r8,1276(sp)
 8001d48:	da413e15 	stw	r9,1272(sp)
 8001d4c:	da813d15 	stw	r10,1268(sp)
 8001d50:	800b2d00 	call	800b2d0 <__eqdf2>
 8001d54:	da013f17 	ldw	r8,1276(sp)
 8001d58:	da413e17 	ldw	r9,1272(sp)
 8001d5c:	da813d17 	ldw	r10,1268(sp)
 8001d60:	10016526 	beq	r2,zero,80022f8 <___vfprintf_internal_r+0x1d24>
 8001d64:	d8812117 	ldw	r2,1156(sp)
 8001d68:	1280062e 	bgeu	r2,r10,8001d84 <___vfprintf_internal_r+0x17b0>
 8001d6c:	01000c04 	movi	r4,48
 8001d70:	10c00044 	addi	r3,r2,1
 8001d74:	d8c12115 	stw	r3,1156(sp)
 8001d78:	11000005 	stb	r4,0(r2)
 8001d7c:	d8812117 	ldw	r2,1156(sp)
 8001d80:	12bffb36 	bltu	r2,r10,8001d70 <__alt_data_end+0xfc001d70>
 8001d84:	db013117 	ldw	r12,1220(sp)
 8001d88:	1305c83a 	sub	r2,r2,r12
 8001d8c:	d8813315 	stw	r2,1228(sp)
 8001d90:	008011c4 	movi	r2,71
 8001d94:	a8814a26 	beq	r21,r2,80022c0 <___vfprintf_internal_r+0x1cec>
 8001d98:	00801944 	movi	r2,101
 8001d9c:	14020a0e 	bge	r2,r16,80025c8 <___vfprintf_internal_r+0x1ff4>
 8001da0:	00801984 	movi	r2,102
 8001da4:	8081b626 	beq	r16,r2,8002480 <___vfprintf_internal_r+0x1eac>
 8001da8:	db012617 	ldw	r12,1176(sp)
 8001dac:	db013415 	stw	r12,1232(sp)
 8001db0:	db013417 	ldw	r12,1232(sp)
 8001db4:	dac13317 	ldw	r11,1228(sp)
 8001db8:	62c1a816 	blt	r12,r11,800245c <___vfprintf_internal_r+0x1e88>
 8001dbc:	8c40004c 	andi	r17,r17,1
 8001dc0:	8801ca1e 	bne	r17,zero,80024ec <___vfprintf_internal_r+0x1f18>
 8001dc4:	6005883a 	mov	r2,r12
 8001dc8:	6001b516 	blt	r12,zero,80024a0 <___vfprintf_internal_r+0x1ecc>
 8001dcc:	dc813417 	ldw	r18,1232(sp)
 8001dd0:	df012b07 	ldb	fp,1196(sp)
 8001dd4:	e001321e 	bne	fp,zero,80022a0 <___vfprintf_internal_r+0x1ccc>
 8001dd8:	dc412d17 	ldw	r17,1204(sp)
 8001ddc:	dd412783 	ldbu	r21,1182(sp)
 8001de0:	d8812b15 	stw	r2,1196(sp)
 8001de4:	dcc12d15 	stw	r19,1204(sp)
 8001de8:	d8013215 	stw	zero,1224(sp)
 8001dec:	003b8d06 	br	8000c24 <__alt_data_end+0xfc000c24>
 8001df0:	88c0100c 	andi	r3,r17,64
 8001df4:	18008226 	beq	r3,zero,8002000 <___vfprintf_internal_r+0x1a2c>
 8001df8:	dac12d17 	ldw	r11,1204(sp)
 8001dfc:	14c0000b 	ldhu	r19,0(r2)
 8001e00:	0039883a 	mov	fp,zero
 8001e04:	5ac00104 	addi	r11,r11,4
 8001e08:	dac12d15 	stw	r11,1204(sp)
 8001e0c:	003c8f06 	br	800104c <__alt_data_end+0xfc00104c>
 8001e10:	1c000007 	ldb	r16,0(r3)
 8001e14:	1805883a 	mov	r2,r3
 8001e18:	003a5506 	br	8000770 <__alt_data_end+0xfc000770>
 8001e1c:	00800084 	movi	r2,2
 8001e20:	003b5e06 	br	8000b9c <__alt_data_end+0xfc000b9c>
 8001e24:	8880040c 	andi	r2,r17,16
 8001e28:	1000091e 	bne	r2,zero,8001e50 <___vfprintf_internal_r+0x187c>
 8001e2c:	8c40100c 	andi	r17,r17,64
 8001e30:	88000726 	beq	r17,zero,8001e50 <___vfprintf_internal_r+0x187c>
 8001e34:	db012d17 	ldw	r12,1204(sp)
 8001e38:	dac12f17 	ldw	r11,1212(sp)
 8001e3c:	60800017 	ldw	r2,0(r12)
 8001e40:	63000104 	addi	r12,r12,4
 8001e44:	db012d15 	stw	r12,1204(sp)
 8001e48:	12c0000d 	sth	r11,0(r2)
 8001e4c:	003a1e06 	br	80006c8 <__alt_data_end+0xfc0006c8>
 8001e50:	db012d17 	ldw	r12,1204(sp)
 8001e54:	dac12f17 	ldw	r11,1212(sp)
 8001e58:	60800017 	ldw	r2,0(r12)
 8001e5c:	63000104 	addi	r12,r12,4
 8001e60:	db012d15 	stw	r12,1204(sp)
 8001e64:	12c00015 	stw	r11,0(r2)
 8001e68:	003a1706 	br	80006c8 <__alt_data_end+0xfc0006c8>
 8001e6c:	01020074 	movhi	r4,2049
 8001e70:	213d3384 	addi	r4,r4,-2866
 8001e74:	d9012c15 	stw	r4,1200(sp)
 8001e78:	dac12c17 	ldw	r11,1200(sp)
 8001e7c:	1c87883a 	add	r3,r3,r18
 8001e80:	10800044 	addi	r2,r2,1
 8001e84:	42c00015 	stw	r11,0(r8)
 8001e88:	44800115 	stw	r18,4(r8)
 8001e8c:	d8c12015 	stw	r3,1152(sp)
 8001e90:	d8811f15 	stw	r2,1148(sp)
 8001e94:	010001c4 	movi	r4,7
 8001e98:	20bee016 	blt	r4,r2,8001a1c <__alt_data_end+0xfc001a1c>
 8001e9c:	42000204 	addi	r8,r8,8
 8001ea0:	003ee506 	br	8001a38 <__alt_data_end+0xfc001a38>
 8001ea4:	01020074 	movhi	r4,2049
 8001ea8:	213d3384 	addi	r4,r4,-2866
 8001eac:	d9012c15 	stw	r4,1200(sp)
 8001eb0:	003bd806 	br	8000e14 <__alt_data_end+0xfc000e14>
 8001eb4:	b009883a 	mov	r4,r22
 8001eb8:	b80b883a 	mov	r5,r23
 8001ebc:	d9811e04 	addi	r6,sp,1144
 8001ec0:	800781c0 	call	800781c <__sprint_r>
 8001ec4:	103ada1e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8001ec8:	d8c12017 	ldw	r3,1152(sp)
 8001ecc:	da000404 	addi	r8,sp,16
 8001ed0:	003d6b06 	br	8001480 <__alt_data_end+0xfc001480>
 8001ed4:	d8811f17 	ldw	r2,1148(sp)
 8001ed8:	03020074 	movhi	r12,2049
 8001edc:	01000044 	movi	r4,1
 8001ee0:	18c00044 	addi	r3,r3,1
 8001ee4:	10800044 	addi	r2,r2,1
 8001ee8:	633d3304 	addi	r12,r12,-2868
 8001eec:	41000115 	stw	r4,4(r8)
 8001ef0:	43000015 	stw	r12,0(r8)
 8001ef4:	d8c12015 	stw	r3,1152(sp)
 8001ef8:	d8811f15 	stw	r2,1148(sp)
 8001efc:	010001c4 	movi	r4,7
 8001f00:	20804916 	blt	r4,r2,8002028 <___vfprintf_internal_r+0x1a54>
 8001f04:	42000204 	addi	r8,r8,8
 8001f08:	8000041e 	bne	r16,zero,8001f1c <___vfprintf_internal_r+0x1948>
 8001f0c:	dac13317 	ldw	r11,1228(sp)
 8001f10:	5800021e 	bne	r11,zero,8001f1c <___vfprintf_internal_r+0x1948>
 8001f14:	8880004c 	andi	r2,r17,1
 8001f18:	103bd526 	beq	r2,zero,8000e70 <__alt_data_end+0xfc000e70>
 8001f1c:	db013817 	ldw	r12,1248(sp)
 8001f20:	d8811f17 	ldw	r2,1148(sp)
 8001f24:	dac13517 	ldw	r11,1236(sp)
 8001f28:	1b07883a 	add	r3,r3,r12
 8001f2c:	10800044 	addi	r2,r2,1
 8001f30:	42c00015 	stw	r11,0(r8)
 8001f34:	43000115 	stw	r12,4(r8)
 8001f38:	d8c12015 	stw	r3,1152(sp)
 8001f3c:	d8811f15 	stw	r2,1148(sp)
 8001f40:	010001c4 	movi	r4,7
 8001f44:	20813016 	blt	r4,r2,8002408 <___vfprintf_internal_r+0x1e34>
 8001f48:	42000204 	addi	r8,r8,8
 8001f4c:	0421c83a 	sub	r16,zero,r16
 8001f50:	0400630e 	bge	zero,r16,80020e0 <___vfprintf_internal_r+0x1b0c>
 8001f54:	04800404 	movi	r18,16
 8001f58:	94009f0e 	bge	r18,r16,80021d8 <___vfprintf_internal_r+0x1c04>
 8001f5c:	01020074 	movhi	r4,2049
 8001f60:	213d3384 	addi	r4,r4,-2866
 8001f64:	d9012c15 	stw	r4,1200(sp)
 8001f68:	054001c4 	movi	r21,7
 8001f6c:	00000306 	br	8001f7c <___vfprintf_internal_r+0x19a8>
 8001f70:	42000204 	addi	r8,r8,8
 8001f74:	843ffc04 	addi	r16,r16,-16
 8001f78:	94009a0e 	bge	r18,r16,80021e4 <___vfprintf_internal_r+0x1c10>
 8001f7c:	18c00404 	addi	r3,r3,16
 8001f80:	10800044 	addi	r2,r2,1
 8001f84:	45000015 	stw	r20,0(r8)
 8001f88:	44800115 	stw	r18,4(r8)
 8001f8c:	d8c12015 	stw	r3,1152(sp)
 8001f90:	d8811f15 	stw	r2,1148(sp)
 8001f94:	a8bff60e 	bge	r21,r2,8001f70 <__alt_data_end+0xfc001f70>
 8001f98:	b009883a 	mov	r4,r22
 8001f9c:	b80b883a 	mov	r5,r23
 8001fa0:	d9811e04 	addi	r6,sp,1144
 8001fa4:	800781c0 	call	800781c <__sprint_r>
 8001fa8:	103aa11e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8001fac:	d8c12017 	ldw	r3,1152(sp)
 8001fb0:	d8811f17 	ldw	r2,1148(sp)
 8001fb4:	da000404 	addi	r8,sp,16
 8001fb8:	003fee06 	br	8001f74 <__alt_data_end+0xfc001f74>
 8001fbc:	008011c4 	movi	r2,71
 8001fc0:	1400b316 	blt	r2,r16,8002290 <___vfprintf_internal_r+0x1cbc>
 8001fc4:	03020074 	movhi	r12,2049
 8001fc8:	633d2504 	addi	r12,r12,-2924
 8001fcc:	db013115 	stw	r12,1220(sp)
 8001fd0:	00c000c4 	movi	r3,3
 8001fd4:	00bfdfc4 	movi	r2,-129
 8001fd8:	d8c12b15 	stw	r3,1196(sp)
 8001fdc:	88a2703a 	and	r17,r17,r2
 8001fe0:	dd412783 	ldbu	r21,1182(sp)
 8001fe4:	dcc12d15 	stw	r19,1204(sp)
 8001fe8:	1825883a 	mov	r18,r3
 8001fec:	d8013215 	stw	zero,1224(sp)
 8001ff0:	d8013415 	stw	zero,1232(sp)
 8001ff4:	003b0b06 	br	8000c24 <__alt_data_end+0xfc000c24>
 8001ff8:	4825883a 	mov	r18,r9
 8001ffc:	003cba06 	br	80012e8 <__alt_data_end+0xfc0012e8>
 8002000:	db012d17 	ldw	r12,1204(sp)
 8002004:	14c00017 	ldw	r19,0(r2)
 8002008:	0039883a 	mov	fp,zero
 800200c:	63000104 	addi	r12,r12,4
 8002010:	db012d15 	stw	r12,1204(sp)
 8002014:	003c0d06 	br	800104c <__alt_data_end+0xfc00104c>
 8002018:	00820074 	movhi	r2,2049
 800201c:	10bd2304 	addi	r2,r2,-2932
 8002020:	d8813115 	stw	r2,1220(sp)
 8002024:	003ac406 	br	8000b38 <__alt_data_end+0xfc000b38>
 8002028:	b009883a 	mov	r4,r22
 800202c:	b80b883a 	mov	r5,r23
 8002030:	d9811e04 	addi	r6,sp,1144
 8002034:	800781c0 	call	800781c <__sprint_r>
 8002038:	103a7d1e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 800203c:	dc012617 	ldw	r16,1176(sp)
 8002040:	d8c12017 	ldw	r3,1152(sp)
 8002044:	da000404 	addi	r8,sp,16
 8002048:	003faf06 	br	8001f08 <__alt_data_end+0xfc001f08>
 800204c:	db012e17 	ldw	r12,1208(sp)
 8002050:	1805883a 	mov	r2,r3
 8002054:	dac12d15 	stw	r11,1204(sp)
 8002058:	0319c83a 	sub	r12,zero,r12
 800205c:	db012e15 	stw	r12,1208(sp)
 8002060:	003a7e06 	br	8000a5c <__alt_data_end+0xfc000a5c>
 8002064:	18800044 	addi	r2,r3,1
 8002068:	8c400814 	ori	r17,r17,32
 800206c:	1c000047 	ldb	r16,1(r3)
 8002070:	0039bf06 	br	8000770 <__alt_data_end+0xfc000770>
 8002074:	b009883a 	mov	r4,r22
 8002078:	b80b883a 	mov	r5,r23
 800207c:	d9811e04 	addi	r6,sp,1144
 8002080:	800781c0 	call	800781c <__sprint_r>
 8002084:	103a6a1e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8002088:	d8c12017 	ldw	r3,1152(sp)
 800208c:	da000404 	addi	r8,sp,16
 8002090:	003d0c06 	br	80014c4 <__alt_data_end+0xfc0014c4>
 8002094:	db012817 	ldw	r12,1184(sp)
 8002098:	d8c13117 	ldw	r3,1220(sp)
 800209c:	60e5c83a 	sub	r18,r12,r3
 80020a0:	003adb06 	br	8000c10 <__alt_data_end+0xfc000c10>
 80020a4:	da013f15 	stw	r8,1276(sp)
 80020a8:	800053c0 	call	800053c <strlen>
 80020ac:	1025883a 	mov	r18,r2
 80020b0:	da013f17 	ldw	r8,1276(sp)
 80020b4:	903c8e0e 	bge	r18,zero,80012f0 <__alt_data_end+0xfc0012f0>
 80020b8:	0005883a 	mov	r2,zero
 80020bc:	003c8c06 	br	80012f0 <__alt_data_end+0xfc0012f0>
 80020c0:	b009883a 	mov	r4,r22
 80020c4:	b80b883a 	mov	r5,r23
 80020c8:	d9811e04 	addi	r6,sp,1144
 80020cc:	800781c0 	call	800781c <__sprint_r>
 80020d0:	103a571e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 80020d4:	d8c12017 	ldw	r3,1152(sp)
 80020d8:	d8811f17 	ldw	r2,1148(sp)
 80020dc:	da000404 	addi	r8,sp,16
 80020e0:	db013317 	ldw	r12,1228(sp)
 80020e4:	dac13117 	ldw	r11,1220(sp)
 80020e8:	10800044 	addi	r2,r2,1
 80020ec:	60c7883a 	add	r3,r12,r3
 80020f0:	42c00015 	stw	r11,0(r8)
 80020f4:	43000115 	stw	r12,4(r8)
 80020f8:	d8c12015 	stw	r3,1152(sp)
 80020fc:	d8811f15 	stw	r2,1148(sp)
 8002100:	010001c4 	movi	r4,7
 8002104:	20bb590e 	bge	r4,r2,8000e6c <__alt_data_end+0xfc000e6c>
 8002108:	003d7e06 	br	8001704 <__alt_data_end+0xfc001704>
 800210c:	01020074 	movhi	r4,2049
 8002110:	213d3784 	addi	r4,r4,-2850
 8002114:	d9013615 	stw	r4,1240(sp)
 8002118:	003af606 	br	8000cf4 <__alt_data_end+0xfc000cf4>
 800211c:	d8812604 	addi	r2,sp,1176
 8002120:	d8800115 	stw	r2,4(sp)
 8002124:	d9413717 	ldw	r5,1244(sp)
 8002128:	d8812504 	addi	r2,sp,1172
 800212c:	d8800215 	stw	r2,8(sp)
 8002130:	d8812104 	addi	r2,sp,1156
 8002134:	da400015 	stw	r9,0(sp)
 8002138:	d8800315 	stw	r2,12(sp)
 800213c:	b009883a 	mov	r4,r22
 8002140:	900d883a 	mov	r6,r18
 8002144:	01c000c4 	movi	r7,3
 8002148:	da013f15 	stw	r8,1276(sp)
 800214c:	da413e15 	stw	r9,1272(sp)
 8002150:	80029240 	call	8002924 <_dtoa_r>
 8002154:	da413e17 	ldw	r9,1272(sp)
 8002158:	da013f17 	ldw	r8,1276(sp)
 800215c:	d8813115 	stw	r2,1220(sp)
 8002160:	4839883a 	mov	fp,r9
 8002164:	dac13117 	ldw	r11,1220(sp)
 8002168:	00801184 	movi	r2,70
 800216c:	5f15883a 	add	r10,r11,fp
 8002170:	a8bef01e 	bne	r21,r2,8001d34 <__alt_data_end+0xfc001d34>
 8002174:	59000007 	ldb	r4,0(r11)
 8002178:	00800c04 	movi	r2,48
 800217c:	2080e026 	beq	r4,r2,8002500 <___vfprintf_internal_r+0x1f2c>
 8002180:	d8c12617 	ldw	r3,1176(sp)
 8002184:	50d5883a 	add	r10,r10,r3
 8002188:	003eea06 	br	8001d34 <__alt_data_end+0xfc001d34>
 800218c:	0025883a 	mov	r18,zero
 8002190:	003db306 	br	8001860 <__alt_data_end+0xfc001860>
 8002194:	b009883a 	mov	r4,r22
 8002198:	b80b883a 	mov	r5,r23
 800219c:	d9811e04 	addi	r6,sp,1144
 80021a0:	800781c0 	call	800781c <__sprint_r>
 80021a4:	103a221e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 80021a8:	d8c12017 	ldw	r3,1152(sp)
 80021ac:	da000404 	addi	r8,sp,16
 80021b0:	003daa06 	br	800185c <__alt_data_end+0xfc00185c>
 80021b4:	b009883a 	mov	r4,r22
 80021b8:	b80b883a 	mov	r5,r23
 80021bc:	d9811e04 	addi	r6,sp,1144
 80021c0:	800781c0 	call	800781c <__sprint_r>
 80021c4:	103a1a1e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 80021c8:	d8812617 	ldw	r2,1176(sp)
 80021cc:	d8c12017 	ldw	r3,1152(sp)
 80021d0:	da000404 	addi	r8,sp,16
 80021d4:	003e2c06 	br	8001a88 <__alt_data_end+0xfc001a88>
 80021d8:	03020074 	movhi	r12,2049
 80021dc:	633d3384 	addi	r12,r12,-2866
 80021e0:	db012c15 	stw	r12,1200(sp)
 80021e4:	dac12c17 	ldw	r11,1200(sp)
 80021e8:	1c07883a 	add	r3,r3,r16
 80021ec:	10800044 	addi	r2,r2,1
 80021f0:	42c00015 	stw	r11,0(r8)
 80021f4:	44000115 	stw	r16,4(r8)
 80021f8:	d8c12015 	stw	r3,1152(sp)
 80021fc:	d8811f15 	stw	r2,1148(sp)
 8002200:	010001c4 	movi	r4,7
 8002204:	20bfae16 	blt	r4,r2,80020c0 <__alt_data_end+0xfc0020c0>
 8002208:	42000204 	addi	r8,r8,8
 800220c:	003fb406 	br	80020e0 <__alt_data_end+0xfc0020e0>
 8002210:	03020074 	movhi	r12,2049
 8002214:	633d3784 	addi	r12,r12,-2850
 8002218:	db013615 	stw	r12,1240(sp)
 800221c:	003b3806 	br	8000f00 <__alt_data_end+0xfc000f00>
 8002220:	b009883a 	mov	r4,r22
 8002224:	b80b883a 	mov	r5,r23
 8002228:	d9811e04 	addi	r6,sp,1144
 800222c:	800781c0 	call	800781c <__sprint_r>
 8002230:	1039ff1e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 8002234:	d8812617 	ldw	r2,1176(sp)
 8002238:	db013317 	ldw	r12,1228(sp)
 800223c:	d8c12017 	ldw	r3,1152(sp)
 8002240:	da000404 	addi	r8,sp,16
 8002244:	6085c83a 	sub	r2,r12,r2
 8002248:	003e2006 	br	8001acc <__alt_data_end+0xfc001acc>
 800224c:	0021883a 	mov	r16,zero
 8002250:	003e1f06 	br	8001ad0 <__alt_data_end+0xfc001ad0>
 8002254:	00800184 	movi	r2,6
 8002258:	1240012e 	bgeu	r2,r9,8002260 <___vfprintf_internal_r+0x1c8c>
 800225c:	1013883a 	mov	r9,r2
 8002260:	4825883a 	mov	r18,r9
 8002264:	4805883a 	mov	r2,r9
 8002268:	48009e16 	blt	r9,zero,80024e4 <___vfprintf_internal_r+0x1f10>
 800226c:	d8812b15 	stw	r2,1196(sp)
 8002270:	00820074 	movhi	r2,2049
 8002274:	10bd3104 	addi	r2,r2,-2876
 8002278:	d8813115 	stw	r2,1220(sp)
 800227c:	dcc12d15 	stw	r19,1204(sp)
 8002280:	d8013215 	stw	zero,1224(sp)
 8002284:	d8013415 	stw	zero,1232(sp)
 8002288:	0005883a 	mov	r2,zero
 800228c:	003a6c06 	br	8000c40 <__alt_data_end+0xfc000c40>
 8002290:	00820074 	movhi	r2,2049
 8002294:	10bd2604 	addi	r2,r2,-2920
 8002298:	d8813115 	stw	r2,1220(sp)
 800229c:	003f4c06 	br	8001fd0 <__alt_data_end+0xfc001fd0>
 80022a0:	00c00b44 	movi	r3,45
 80022a4:	d8812b15 	stw	r2,1196(sp)
 80022a8:	dc412d17 	ldw	r17,1204(sp)
 80022ac:	d8c12785 	stb	r3,1182(sp)
 80022b0:	dcc12d15 	stw	r19,1204(sp)
 80022b4:	d8013215 	stw	zero,1224(sp)
 80022b8:	00800b44 	movi	r2,45
 80022bc:	003a5d06 	br	8000c34 <__alt_data_end+0xfc000c34>
 80022c0:	d8c12617 	ldw	r3,1176(sp)
 80022c4:	00bfff44 	movi	r2,-3
 80022c8:	18800d16 	blt	r3,r2,8002300 <___vfprintf_internal_r+0x1d2c>
 80022cc:	48c00c16 	blt	r9,r3,8002300 <___vfprintf_internal_r+0x1d2c>
 80022d0:	d8c13415 	stw	r3,1232(sp)
 80022d4:	040019c4 	movi	r16,103
 80022d8:	003eb506 	br	8001db0 <__alt_data_end+0xfc001db0>
 80022dc:	05400b44 	movi	r21,45
 80022e0:	dd412785 	stb	r21,1182(sp)
 80022e4:	003a0f06 	br	8000b24 <__alt_data_end+0xfc000b24>
 80022e8:	01020074 	movhi	r4,2049
 80022ec:	213d3384 	addi	r4,r4,-2866
 80022f0:	d9012c15 	stw	r4,1200(sp)
 80022f4:	003cb106 	br	80015bc <__alt_data_end+0xfc0015bc>
 80022f8:	5005883a 	mov	r2,r10
 80022fc:	003ea106 	br	8001d84 <__alt_data_end+0xfc001d84>
 8002300:	843fff84 	addi	r16,r16,-2
 8002304:	1f3fffc4 	addi	fp,r3,-1
 8002308:	df012615 	stw	fp,1176(sp)
 800230c:	dc0122c5 	stb	r16,1163(sp)
 8002310:	e0009516 	blt	fp,zero,8002568 <___vfprintf_internal_r+0x1f94>
 8002314:	00800ac4 	movi	r2,43
 8002318:	d8812305 	stb	r2,1164(sp)
 800231c:	00800244 	movi	r2,9
 8002320:	1700690e 	bge	r2,fp,80024c8 <___vfprintf_internal_r+0x1ef4>
 8002324:	dd4122c4 	addi	r21,sp,1163
 8002328:	dc012c15 	stw	r16,1200(sp)
 800232c:	8825883a 	mov	r18,r17
 8002330:	a821883a 	mov	r16,r21
 8002334:	4023883a 	mov	r17,r8
 8002338:	e009883a 	mov	r4,fp
 800233c:	01400284 	movi	r5,10
 8002340:	800a0fc0 	call	800a0fc <__modsi3>
 8002344:	10800c04 	addi	r2,r2,48
 8002348:	843fffc4 	addi	r16,r16,-1
 800234c:	e009883a 	mov	r4,fp
 8002350:	01400284 	movi	r5,10
 8002354:	80800005 	stb	r2,0(r16)
 8002358:	800a0a80 	call	800a0a8 <__divsi3>
 800235c:	1039883a 	mov	fp,r2
 8002360:	00800244 	movi	r2,9
 8002364:	173ff416 	blt	r2,fp,8002338 <__alt_data_end+0xfc002338>
 8002368:	8811883a 	mov	r8,r17
 800236c:	e0800c04 	addi	r2,fp,48
 8002370:	9023883a 	mov	r17,r18
 8002374:	8025883a 	mov	r18,r16
 8002378:	913fffc4 	addi	r4,r18,-1
 800237c:	90bfffc5 	stb	r2,-1(r18)
 8002380:	dc012c17 	ldw	r16,1200(sp)
 8002384:	25408e2e 	bgeu	r4,r21,80025c0 <___vfprintf_internal_r+0x1fec>
 8002388:	d9412384 	addi	r5,sp,1166
 800238c:	2c8bc83a 	sub	r5,r5,r18
 8002390:	d8c12344 	addi	r3,sp,1165
 8002394:	a94b883a 	add	r5,r21,r5
 8002398:	00000106 	br	80023a0 <___vfprintf_internal_r+0x1dcc>
 800239c:	20800003 	ldbu	r2,0(r4)
 80023a0:	18800005 	stb	r2,0(r3)
 80023a4:	18c00044 	addi	r3,r3,1
 80023a8:	21000044 	addi	r4,r4,1
 80023ac:	197ffb1e 	bne	r3,r5,800239c <__alt_data_end+0xfc00239c>
 80023b0:	d8812304 	addi	r2,sp,1164
 80023b4:	1485c83a 	sub	r2,r2,r18
 80023b8:	d8c12344 	addi	r3,sp,1165
 80023bc:	1885883a 	add	r2,r3,r2
 80023c0:	dac13317 	ldw	r11,1228(sp)
 80023c4:	156bc83a 	sub	r21,r2,r21
 80023c8:	dd413a15 	stw	r21,1256(sp)
 80023cc:	00800044 	movi	r2,1
 80023d0:	5d65883a 	add	r18,r11,r21
 80023d4:	12c0770e 	bge	r2,r11,80025b4 <___vfprintf_internal_r+0x1fe0>
 80023d8:	94800044 	addi	r18,r18,1
 80023dc:	9005883a 	mov	r2,r18
 80023e0:	90007216 	blt	r18,zero,80025ac <___vfprintf_internal_r+0x1fd8>
 80023e4:	d8013415 	stw	zero,1232(sp)
 80023e8:	003e7906 	br	8001dd0 <__alt_data_end+0xfc001dd0>
 80023ec:	da412b15 	stw	r9,1196(sp)
 80023f0:	dd412783 	ldbu	r21,1182(sp)
 80023f4:	4825883a 	mov	r18,r9
 80023f8:	dcc12d15 	stw	r19,1204(sp)
 80023fc:	d8013215 	stw	zero,1224(sp)
 8002400:	d8013415 	stw	zero,1232(sp)
 8002404:	003a0706 	br	8000c24 <__alt_data_end+0xfc000c24>
 8002408:	b009883a 	mov	r4,r22
 800240c:	b80b883a 	mov	r5,r23
 8002410:	d9811e04 	addi	r6,sp,1144
 8002414:	800781c0 	call	800781c <__sprint_r>
 8002418:	1039851e 	bne	r2,zero,8000a30 <__alt_data_end+0xfc000a30>
 800241c:	dc012617 	ldw	r16,1176(sp)
 8002420:	d8c12017 	ldw	r3,1152(sp)
 8002424:	d8811f17 	ldw	r2,1148(sp)
 8002428:	da000404 	addi	r8,sp,16
 800242c:	003ec706 	br	8001f4c <__alt_data_end+0xfc001f4c>
 8002430:	483e1a1e 	bne	r9,zero,8001c9c <__alt_data_end+0xfc001c9c>
 8002434:	9013883a 	mov	r9,r18
 8002438:	003e1806 	br	8001c9c <__alt_data_end+0xfc001c9c>
 800243c:	00c00b44 	movi	r3,45
 8002440:	64a0003c 	xorhi	r18,r12,32768
 8002444:	d8c12b05 	stb	r3,1196(sp)
 8002448:	003e1a06 	br	8001cb4 <__alt_data_end+0xfc001cb4>
 800244c:	4f000044 	addi	fp,r9,1
 8002450:	003e1f06 	br	8001cd0 <__alt_data_end+0xfc001cd0>
 8002454:	02400184 	movi	r9,6
 8002458:	003e1006 	br	8001c9c <__alt_data_end+0xfc001c9c>
 800245c:	d8c13417 	ldw	r3,1232(sp)
 8002460:	00c04b0e 	bge	zero,r3,8002590 <___vfprintf_internal_r+0x1fbc>
 8002464:	04800044 	movi	r18,1
 8002468:	dac13317 	ldw	r11,1228(sp)
 800246c:	92e5883a 	add	r18,r18,r11
 8002470:	9005883a 	mov	r2,r18
 8002474:	903e560e 	bge	r18,zero,8001dd0 <__alt_data_end+0xfc001dd0>
 8002478:	0005883a 	mov	r2,zero
 800247c:	003e5406 	br	8001dd0 <__alt_data_end+0xfc001dd0>
 8002480:	d8c12617 	ldw	r3,1176(sp)
 8002484:	d8c13415 	stw	r3,1232(sp)
 8002488:	00c03b0e 	bge	zero,r3,8002578 <___vfprintf_internal_r+0x1fa4>
 800248c:	4800081e 	bne	r9,zero,80024b0 <___vfprintf_internal_r+0x1edc>
 8002490:	8c40004c 	andi	r17,r17,1
 8002494:	8800061e 	bne	r17,zero,80024b0 <___vfprintf_internal_r+0x1edc>
 8002498:	1805883a 	mov	r2,r3
 800249c:	183e4b0e 	bge	r3,zero,8001dcc <__alt_data_end+0xfc001dcc>
 80024a0:	0005883a 	mov	r2,zero
 80024a4:	003e4906 	br	8001dcc <__alt_data_end+0xfc001dcc>
 80024a8:	d8812117 	ldw	r2,1156(sp)
 80024ac:	003e3506 	br	8001d84 <__alt_data_end+0xfc001d84>
 80024b0:	dac13417 	ldw	r11,1232(sp)
 80024b4:	4a400044 	addi	r9,r9,1
 80024b8:	5a65883a 	add	r18,r11,r9
 80024bc:	9005883a 	mov	r2,r18
 80024c0:	903e430e 	bge	r18,zero,8001dd0 <__alt_data_end+0xfc001dd0>
 80024c4:	003fec06 	br	8002478 <__alt_data_end+0xfc002478>
 80024c8:	00800c04 	movi	r2,48
 80024cc:	e0c00c04 	addi	r3,fp,48
 80024d0:	d8812345 	stb	r2,1165(sp)
 80024d4:	d8c12385 	stb	r3,1166(sp)
 80024d8:	d88123c4 	addi	r2,sp,1167
 80024dc:	dd4122c4 	addi	r21,sp,1163
 80024e0:	003fb706 	br	80023c0 <__alt_data_end+0xfc0023c0>
 80024e4:	0005883a 	mov	r2,zero
 80024e8:	003f6006 	br	800226c <__alt_data_end+0xfc00226c>
 80024ec:	db013417 	ldw	r12,1232(sp)
 80024f0:	64800044 	addi	r18,r12,1
 80024f4:	9005883a 	mov	r2,r18
 80024f8:	903e350e 	bge	r18,zero,8001dd0 <__alt_data_end+0xfc001dd0>
 80024fc:	003fde06 	br	8002478 <__alt_data_end+0xfc002478>
 8002500:	d9013717 	ldw	r4,1244(sp)
 8002504:	900b883a 	mov	r5,r18
 8002508:	000d883a 	mov	r6,zero
 800250c:	000f883a 	mov	r7,zero
 8002510:	da013f15 	stw	r8,1276(sp)
 8002514:	da413e15 	stw	r9,1272(sp)
 8002518:	da813d15 	stw	r10,1268(sp)
 800251c:	800b2d00 	call	800b2d0 <__eqdf2>
 8002520:	da013f17 	ldw	r8,1276(sp)
 8002524:	da413e17 	ldw	r9,1272(sp)
 8002528:	da813d17 	ldw	r10,1268(sp)
 800252c:	103f1426 	beq	r2,zero,8002180 <__alt_data_end+0xfc002180>
 8002530:	00800044 	movi	r2,1
 8002534:	1707c83a 	sub	r3,r2,fp
 8002538:	d8c12615 	stw	r3,1176(sp)
 800253c:	003f1106 	br	8002184 <__alt_data_end+0xfc002184>
 8002540:	dac12d17 	ldw	r11,1204(sp)
 8002544:	5a400017 	ldw	r9,0(r11)
 8002548:	5ac00104 	addi	r11,r11,4
 800254c:	dac12d15 	stw	r11,1204(sp)
 8002550:	483ec60e 	bge	r9,zero,800206c <__alt_data_end+0xfc00206c>
 8002554:	027fffc4 	movi	r9,-1
 8002558:	1c000047 	ldb	r16,1(r3)
 800255c:	00388406 	br	8000770 <__alt_data_end+0xfc000770>
 8002560:	043fffc4 	movi	r16,-1
 8002564:	00391006 	br	80009a8 <__alt_data_end+0xfc0009a8>
 8002568:	00800b44 	movi	r2,45
 800256c:	0739c83a 	sub	fp,zero,fp
 8002570:	d8812305 	stb	r2,1164(sp)
 8002574:	003f6906 	br	800231c <__alt_data_end+0xfc00231c>
 8002578:	4800081e 	bne	r9,zero,800259c <___vfprintf_internal_r+0x1fc8>
 800257c:	8c40004c 	andi	r17,r17,1
 8002580:	8800061e 	bne	r17,zero,800259c <___vfprintf_internal_r+0x1fc8>
 8002584:	00800044 	movi	r2,1
 8002588:	1025883a 	mov	r18,r2
 800258c:	003e1006 	br	8001dd0 <__alt_data_end+0xfc001dd0>
 8002590:	04800084 	movi	r18,2
 8002594:	90e5c83a 	sub	r18,r18,r3
 8002598:	003fb306 	br	8002468 <__alt_data_end+0xfc002468>
 800259c:	4c800084 	addi	r18,r9,2
 80025a0:	9005883a 	mov	r2,r18
 80025a4:	903e0a0e 	bge	r18,zero,8001dd0 <__alt_data_end+0xfc001dd0>
 80025a8:	003fb306 	br	8002478 <__alt_data_end+0xfc002478>
 80025ac:	0005883a 	mov	r2,zero
 80025b0:	003f8c06 	br	80023e4 <__alt_data_end+0xfc0023e4>
 80025b4:	88a2703a 	and	r17,r17,r2
 80025b8:	883f8826 	beq	r17,zero,80023dc <__alt_data_end+0xfc0023dc>
 80025bc:	003f8606 	br	80023d8 <__alt_data_end+0xfc0023d8>
 80025c0:	d8812344 	addi	r2,sp,1165
 80025c4:	003f7e06 	br	80023c0 <__alt_data_end+0xfc0023c0>
 80025c8:	d8c12617 	ldw	r3,1176(sp)
 80025cc:	003f4d06 	br	8002304 <__alt_data_end+0xfc002304>

080025d0 <__vfprintf_internal>:
 80025d0:	2007883a 	mov	r3,r4
 80025d4:	01020074 	movhi	r4,2049
 80025d8:	21049f04 	addi	r4,r4,4732
 80025dc:	21000017 	ldw	r4,0(r4)
 80025e0:	2805883a 	mov	r2,r5
 80025e4:	300f883a 	mov	r7,r6
 80025e8:	180b883a 	mov	r5,r3
 80025ec:	100d883a 	mov	r6,r2
 80025f0:	80005d41 	jmpi	80005d4 <___vfprintf_internal_r>

080025f4 <__swsetup_r>:
 80025f4:	00820074 	movhi	r2,2049
 80025f8:	defffd04 	addi	sp,sp,-12
 80025fc:	10849f04 	addi	r2,r2,4732
 8002600:	dc400115 	stw	r17,4(sp)
 8002604:	2023883a 	mov	r17,r4
 8002608:	11000017 	ldw	r4,0(r2)
 800260c:	dc000015 	stw	r16,0(sp)
 8002610:	dfc00215 	stw	ra,8(sp)
 8002614:	2821883a 	mov	r16,r5
 8002618:	20000226 	beq	r4,zero,8002624 <__swsetup_r+0x30>
 800261c:	20c00e17 	ldw	r3,56(r4)
 8002620:	18002e26 	beq	r3,zero,80026dc <__swsetup_r+0xe8>
 8002624:	8080030b 	ldhu	r2,12(r16)
 8002628:	10c0020c 	andi	r3,r2,8
 800262c:	100d883a 	mov	r6,r2
 8002630:	18000f26 	beq	r3,zero,8002670 <__swsetup_r+0x7c>
 8002634:	80c00417 	ldw	r3,16(r16)
 8002638:	18001526 	beq	r3,zero,8002690 <__swsetup_r+0x9c>
 800263c:	1100004c 	andi	r4,r2,1
 8002640:	20001c1e 	bne	r4,zero,80026b4 <__swsetup_r+0xc0>
 8002644:	1080008c 	andi	r2,r2,2
 8002648:	1000261e 	bne	r2,zero,80026e4 <__swsetup_r+0xf0>
 800264c:	80800517 	ldw	r2,20(r16)
 8002650:	80800215 	stw	r2,8(r16)
 8002654:	18001c26 	beq	r3,zero,80026c8 <__swsetup_r+0xd4>
 8002658:	0005883a 	mov	r2,zero
 800265c:	dfc00217 	ldw	ra,8(sp)
 8002660:	dc400117 	ldw	r17,4(sp)
 8002664:	dc000017 	ldw	r16,0(sp)
 8002668:	dec00304 	addi	sp,sp,12
 800266c:	f800283a 	ret
 8002670:	3080040c 	andi	r2,r6,16
 8002674:	10001726 	beq	r2,zero,80026d4 <__swsetup_r+0xe0>
 8002678:	3080010c 	andi	r2,r6,4
 800267c:	10001b1e 	bne	r2,zero,80026ec <__swsetup_r+0xf8>
 8002680:	80c00417 	ldw	r3,16(r16)
 8002684:	30800214 	ori	r2,r6,8
 8002688:	8080030d 	sth	r2,12(r16)
 800268c:	183feb1e 	bne	r3,zero,800263c <__alt_data_end+0xfc00263c>
 8002690:	1140a00c 	andi	r5,r2,640
 8002694:	01008004 	movi	r4,512
 8002698:	293fe826 	beq	r5,r4,800263c <__alt_data_end+0xfc00263c>
 800269c:	8809883a 	mov	r4,r17
 80026a0:	800b883a 	mov	r5,r16
 80026a4:	800514c0 	call	800514c <__smakebuf_r>
 80026a8:	8080030b 	ldhu	r2,12(r16)
 80026ac:	80c00417 	ldw	r3,16(r16)
 80026b0:	003fe206 	br	800263c <__alt_data_end+0xfc00263c>
 80026b4:	80800517 	ldw	r2,20(r16)
 80026b8:	80000215 	stw	zero,8(r16)
 80026bc:	0085c83a 	sub	r2,zero,r2
 80026c0:	80800615 	stw	r2,24(r16)
 80026c4:	183fe41e 	bne	r3,zero,8002658 <__alt_data_end+0xfc002658>
 80026c8:	8080030b 	ldhu	r2,12(r16)
 80026cc:	1080200c 	andi	r2,r2,128
 80026d0:	103fe226 	beq	r2,zero,800265c <__alt_data_end+0xfc00265c>
 80026d4:	00bfffc4 	movi	r2,-1
 80026d8:	003fe006 	br	800265c <__alt_data_end+0xfc00265c>
 80026dc:	80045f40 	call	80045f4 <__sinit>
 80026e0:	003fd006 	br	8002624 <__alt_data_end+0xfc002624>
 80026e4:	0005883a 	mov	r2,zero
 80026e8:	003fd906 	br	8002650 <__alt_data_end+0xfc002650>
 80026ec:	81400c17 	ldw	r5,48(r16)
 80026f0:	28000626 	beq	r5,zero,800270c <__swsetup_r+0x118>
 80026f4:	80801004 	addi	r2,r16,64
 80026f8:	28800326 	beq	r5,r2,8002708 <__swsetup_r+0x114>
 80026fc:	8809883a 	mov	r4,r17
 8002700:	80047680 	call	8004768 <_free_r>
 8002704:	8180030b 	ldhu	r6,12(r16)
 8002708:	80000c15 	stw	zero,48(r16)
 800270c:	80c00417 	ldw	r3,16(r16)
 8002710:	00bff6c4 	movi	r2,-37
 8002714:	118c703a 	and	r6,r2,r6
 8002718:	80000115 	stw	zero,4(r16)
 800271c:	80c00015 	stw	r3,0(r16)
 8002720:	003fd806 	br	8002684 <__alt_data_end+0xfc002684>

08002724 <quorem>:
 8002724:	defff704 	addi	sp,sp,-36
 8002728:	dc800215 	stw	r18,8(sp)
 800272c:	20800417 	ldw	r2,16(r4)
 8002730:	2c800417 	ldw	r18,16(r5)
 8002734:	dfc00815 	stw	ra,32(sp)
 8002738:	ddc00715 	stw	r23,28(sp)
 800273c:	dd800615 	stw	r22,24(sp)
 8002740:	dd400515 	stw	r21,20(sp)
 8002744:	dd000415 	stw	r20,16(sp)
 8002748:	dcc00315 	stw	r19,12(sp)
 800274c:	dc400115 	stw	r17,4(sp)
 8002750:	dc000015 	stw	r16,0(sp)
 8002754:	14807116 	blt	r2,r18,800291c <quorem+0x1f8>
 8002758:	94bfffc4 	addi	r18,r18,-1
 800275c:	94ad883a 	add	r22,r18,r18
 8002760:	b5ad883a 	add	r22,r22,r22
 8002764:	2c400504 	addi	r17,r5,20
 8002768:	8da9883a 	add	r20,r17,r22
 800276c:	25400504 	addi	r21,r4,20
 8002770:	282f883a 	mov	r23,r5
 8002774:	adad883a 	add	r22,r21,r22
 8002778:	a1400017 	ldw	r5,0(r20)
 800277c:	2021883a 	mov	r16,r4
 8002780:	b1000017 	ldw	r4,0(r22)
 8002784:	29400044 	addi	r5,r5,1
 8002788:	800a1580 	call	800a158 <__udivsi3>
 800278c:	1027883a 	mov	r19,r2
 8002790:	10002c26 	beq	r2,zero,8002844 <quorem+0x120>
 8002794:	a813883a 	mov	r9,r21
 8002798:	8811883a 	mov	r8,r17
 800279c:	0009883a 	mov	r4,zero
 80027a0:	000d883a 	mov	r6,zero
 80027a4:	41c00017 	ldw	r7,0(r8)
 80027a8:	49400017 	ldw	r5,0(r9)
 80027ac:	42000104 	addi	r8,r8,4
 80027b0:	38bfffcc 	andi	r2,r7,65535
 80027b4:	14c5383a 	mul	r2,r2,r19
 80027b8:	380ed43a 	srli	r7,r7,16
 80027bc:	28ffffcc 	andi	r3,r5,65535
 80027c0:	2085883a 	add	r2,r4,r2
 80027c4:	1008d43a 	srli	r4,r2,16
 80027c8:	3ccf383a 	mul	r7,r7,r19
 80027cc:	198d883a 	add	r6,r3,r6
 80027d0:	10ffffcc 	andi	r3,r2,65535
 80027d4:	30c7c83a 	sub	r3,r6,r3
 80027d8:	280ad43a 	srli	r5,r5,16
 80027dc:	21c9883a 	add	r4,r4,r7
 80027e0:	180dd43a 	srai	r6,r3,16
 80027e4:	20bfffcc 	andi	r2,r4,65535
 80027e8:	288bc83a 	sub	r5,r5,r2
 80027ec:	298b883a 	add	r5,r5,r6
 80027f0:	280e943a 	slli	r7,r5,16
 80027f4:	18ffffcc 	andi	r3,r3,65535
 80027f8:	2008d43a 	srli	r4,r4,16
 80027fc:	38ceb03a 	or	r7,r7,r3
 8002800:	49c00015 	stw	r7,0(r9)
 8002804:	280dd43a 	srai	r6,r5,16
 8002808:	4a400104 	addi	r9,r9,4
 800280c:	a23fe52e 	bgeu	r20,r8,80027a4 <__alt_data_end+0xfc0027a4>
 8002810:	b0800017 	ldw	r2,0(r22)
 8002814:	10000b1e 	bne	r2,zero,8002844 <quorem+0x120>
 8002818:	b0bfff04 	addi	r2,r22,-4
 800281c:	a880082e 	bgeu	r21,r2,8002840 <quorem+0x11c>
 8002820:	b0ffff17 	ldw	r3,-4(r22)
 8002824:	18000326 	beq	r3,zero,8002834 <quorem+0x110>
 8002828:	00000506 	br	8002840 <quorem+0x11c>
 800282c:	10c00017 	ldw	r3,0(r2)
 8002830:	1800031e 	bne	r3,zero,8002840 <quorem+0x11c>
 8002834:	10bfff04 	addi	r2,r2,-4
 8002838:	94bfffc4 	addi	r18,r18,-1
 800283c:	a8bffb36 	bltu	r21,r2,800282c <__alt_data_end+0xfc00282c>
 8002840:	84800415 	stw	r18,16(r16)
 8002844:	8009883a 	mov	r4,r16
 8002848:	b80b883a 	mov	r5,r23
 800284c:	800680c0 	call	800680c <__mcmp>
 8002850:	10002616 	blt	r2,zero,80028ec <quorem+0x1c8>
 8002854:	9cc00044 	addi	r19,r19,1
 8002858:	a80d883a 	mov	r6,r21
 800285c:	000b883a 	mov	r5,zero
 8002860:	31000017 	ldw	r4,0(r6)
 8002864:	88800017 	ldw	r2,0(r17)
 8002868:	31800104 	addi	r6,r6,4
 800286c:	20ffffcc 	andi	r3,r4,65535
 8002870:	194b883a 	add	r5,r3,r5
 8002874:	10ffffcc 	andi	r3,r2,65535
 8002878:	28c7c83a 	sub	r3,r5,r3
 800287c:	1004d43a 	srli	r2,r2,16
 8002880:	2008d43a 	srli	r4,r4,16
 8002884:	180bd43a 	srai	r5,r3,16
 8002888:	18ffffcc 	andi	r3,r3,65535
 800288c:	2089c83a 	sub	r4,r4,r2
 8002890:	2149883a 	add	r4,r4,r5
 8002894:	2004943a 	slli	r2,r4,16
 8002898:	8c400104 	addi	r17,r17,4
 800289c:	200bd43a 	srai	r5,r4,16
 80028a0:	10c6b03a 	or	r3,r2,r3
 80028a4:	30ffff15 	stw	r3,-4(r6)
 80028a8:	a47fed2e 	bgeu	r20,r17,8002860 <__alt_data_end+0xfc002860>
 80028ac:	9485883a 	add	r2,r18,r18
 80028b0:	1085883a 	add	r2,r2,r2
 80028b4:	a887883a 	add	r3,r21,r2
 80028b8:	18800017 	ldw	r2,0(r3)
 80028bc:	10000b1e 	bne	r2,zero,80028ec <quorem+0x1c8>
 80028c0:	18bfff04 	addi	r2,r3,-4
 80028c4:	a880082e 	bgeu	r21,r2,80028e8 <quorem+0x1c4>
 80028c8:	18ffff17 	ldw	r3,-4(r3)
 80028cc:	18000326 	beq	r3,zero,80028dc <quorem+0x1b8>
 80028d0:	00000506 	br	80028e8 <quorem+0x1c4>
 80028d4:	10c00017 	ldw	r3,0(r2)
 80028d8:	1800031e 	bne	r3,zero,80028e8 <quorem+0x1c4>
 80028dc:	10bfff04 	addi	r2,r2,-4
 80028e0:	94bfffc4 	addi	r18,r18,-1
 80028e4:	a8bffb36 	bltu	r21,r2,80028d4 <__alt_data_end+0xfc0028d4>
 80028e8:	84800415 	stw	r18,16(r16)
 80028ec:	9805883a 	mov	r2,r19
 80028f0:	dfc00817 	ldw	ra,32(sp)
 80028f4:	ddc00717 	ldw	r23,28(sp)
 80028f8:	dd800617 	ldw	r22,24(sp)
 80028fc:	dd400517 	ldw	r21,20(sp)
 8002900:	dd000417 	ldw	r20,16(sp)
 8002904:	dcc00317 	ldw	r19,12(sp)
 8002908:	dc800217 	ldw	r18,8(sp)
 800290c:	dc400117 	ldw	r17,4(sp)
 8002910:	dc000017 	ldw	r16,0(sp)
 8002914:	dec00904 	addi	sp,sp,36
 8002918:	f800283a 	ret
 800291c:	0005883a 	mov	r2,zero
 8002920:	003ff306 	br	80028f0 <__alt_data_end+0xfc0028f0>

08002924 <_dtoa_r>:
 8002924:	20801017 	ldw	r2,64(r4)
 8002928:	deffde04 	addi	sp,sp,-136
 800292c:	dd401d15 	stw	r21,116(sp)
 8002930:	dcc01b15 	stw	r19,108(sp)
 8002934:	dc801a15 	stw	r18,104(sp)
 8002938:	dc401915 	stw	r17,100(sp)
 800293c:	dc001815 	stw	r16,96(sp)
 8002940:	dfc02115 	stw	ra,132(sp)
 8002944:	df002015 	stw	fp,128(sp)
 8002948:	ddc01f15 	stw	r23,124(sp)
 800294c:	dd801e15 	stw	r22,120(sp)
 8002950:	dd001c15 	stw	r20,112(sp)
 8002954:	d9c00315 	stw	r7,12(sp)
 8002958:	2021883a 	mov	r16,r4
 800295c:	302b883a 	mov	r21,r6
 8002960:	2825883a 	mov	r18,r5
 8002964:	dc402417 	ldw	r17,144(sp)
 8002968:	3027883a 	mov	r19,r6
 800296c:	10000826 	beq	r2,zero,8002990 <_dtoa_r+0x6c>
 8002970:	21801117 	ldw	r6,68(r4)
 8002974:	00c00044 	movi	r3,1
 8002978:	100b883a 	mov	r5,r2
 800297c:	1986983a 	sll	r3,r3,r6
 8002980:	11800115 	stw	r6,4(r2)
 8002984:	10c00215 	stw	r3,8(r2)
 8002988:	8005ff40 	call	8005ff4 <_Bfree>
 800298c:	80001015 	stw	zero,64(r16)
 8002990:	a8002d16 	blt	r21,zero,8002a48 <_dtoa_r+0x124>
 8002994:	88000015 	stw	zero,0(r17)
 8002998:	a8dffc2c 	andhi	r3,r21,32752
 800299c:	009ffc34 	movhi	r2,32752
 80029a0:	18801b26 	beq	r3,r2,8002a10 <_dtoa_r+0xec>
 80029a4:	9009883a 	mov	r4,r18
 80029a8:	980b883a 	mov	r5,r19
 80029ac:	000d883a 	mov	r6,zero
 80029b0:	000f883a 	mov	r7,zero
 80029b4:	800b2d00 	call	800b2d0 <__eqdf2>
 80029b8:	10002a1e 	bne	r2,zero,8002a64 <_dtoa_r+0x140>
 80029bc:	d8c02317 	ldw	r3,140(sp)
 80029c0:	d9002517 	ldw	r4,148(sp)
 80029c4:	00800044 	movi	r2,1
 80029c8:	18800015 	stw	r2,0(r3)
 80029cc:	2001a226 	beq	r4,zero,8003058 <_dtoa_r+0x734>
 80029d0:	00820074 	movhi	r2,2049
 80029d4:	10bd3344 	addi	r2,r2,-2867
 80029d8:	20800015 	stw	r2,0(r4)
 80029dc:	10bfffc4 	addi	r2,r2,-1
 80029e0:	dfc02117 	ldw	ra,132(sp)
 80029e4:	df002017 	ldw	fp,128(sp)
 80029e8:	ddc01f17 	ldw	r23,124(sp)
 80029ec:	dd801e17 	ldw	r22,120(sp)
 80029f0:	dd401d17 	ldw	r21,116(sp)
 80029f4:	dd001c17 	ldw	r20,112(sp)
 80029f8:	dcc01b17 	ldw	r19,108(sp)
 80029fc:	dc801a17 	ldw	r18,104(sp)
 8002a00:	dc401917 	ldw	r17,100(sp)
 8002a04:	dc001817 	ldw	r16,96(sp)
 8002a08:	dec02204 	addi	sp,sp,136
 8002a0c:	f800283a 	ret
 8002a10:	d8c02317 	ldw	r3,140(sp)
 8002a14:	0089c3c4 	movi	r2,9999
 8002a18:	18800015 	stw	r2,0(r3)
 8002a1c:	90017c26 	beq	r18,zero,8003010 <_dtoa_r+0x6ec>
 8002a20:	00820074 	movhi	r2,2049
 8002a24:	10bd3f04 	addi	r2,r2,-2820
 8002a28:	d9002517 	ldw	r4,148(sp)
 8002a2c:	203fec26 	beq	r4,zero,80029e0 <__alt_data_end+0xfc0029e0>
 8002a30:	10c000c7 	ldb	r3,3(r2)
 8002a34:	18017d1e 	bne	r3,zero,800302c <_dtoa_r+0x708>
 8002a38:	10c000c4 	addi	r3,r2,3
 8002a3c:	d9802517 	ldw	r6,148(sp)
 8002a40:	30c00015 	stw	r3,0(r6)
 8002a44:	003fe606 	br	80029e0 <__alt_data_end+0xfc0029e0>
 8002a48:	04e00034 	movhi	r19,32768
 8002a4c:	9cffffc4 	addi	r19,r19,-1
 8002a50:	00800044 	movi	r2,1
 8002a54:	ace6703a 	and	r19,r21,r19
 8002a58:	88800015 	stw	r2,0(r17)
 8002a5c:	982b883a 	mov	r21,r19
 8002a60:	003fcd06 	br	8002998 <__alt_data_end+0xfc002998>
 8002a64:	d8800204 	addi	r2,sp,8
 8002a68:	a822d53a 	srli	r17,r21,20
 8002a6c:	d8800015 	stw	r2,0(sp)
 8002a70:	8009883a 	mov	r4,r16
 8002a74:	900b883a 	mov	r5,r18
 8002a78:	980d883a 	mov	r6,r19
 8002a7c:	d9c00104 	addi	r7,sp,4
 8002a80:	8006b800 	call	8006b80 <__d2b>
 8002a84:	1039883a 	mov	fp,r2
 8002a88:	88016a1e 	bne	r17,zero,8003034 <_dtoa_r+0x710>
 8002a8c:	dd000217 	ldw	r20,8(sp)
 8002a90:	dc400117 	ldw	r17,4(sp)
 8002a94:	00befbc4 	movi	r2,-1041
 8002a98:	a463883a 	add	r17,r20,r17
 8002a9c:	8882ea16 	blt	r17,r2,8003648 <_dtoa_r+0xd24>
 8002aa0:	00bf0384 	movi	r2,-1010
 8002aa4:	1445c83a 	sub	r2,r2,r17
 8002aa8:	89010484 	addi	r4,r17,1042
 8002aac:	a8aa983a 	sll	r21,r21,r2
 8002ab0:	9108d83a 	srl	r4,r18,r4
 8002ab4:	a908b03a 	or	r4,r21,r4
 8002ab8:	800c6600 	call	800c660 <__floatunsidf>
 8002abc:	017f8434 	movhi	r5,65040
 8002ac0:	01800044 	movi	r6,1
 8002ac4:	1009883a 	mov	r4,r2
 8002ac8:	194b883a 	add	r5,r3,r5
 8002acc:	8c7fffc4 	addi	r17,r17,-1
 8002ad0:	d9800f15 	stw	r6,60(sp)
 8002ad4:	000d883a 	mov	r6,zero
 8002ad8:	01cffe34 	movhi	r7,16376
 8002adc:	800bc380 	call	800bc38 <__subdf3>
 8002ae0:	0198dbf4 	movhi	r6,25455
 8002ae4:	01cff4f4 	movhi	r7,16339
 8002ae8:	1009883a 	mov	r4,r2
 8002aec:	180b883a 	mov	r5,r3
 8002af0:	3190d844 	addi	r6,r6,17249
 8002af4:	39e1e9c4 	addi	r7,r7,-30809
 8002af8:	800b5140 	call	800b514 <__muldf3>
 8002afc:	01a2d874 	movhi	r6,35681
 8002b00:	01cff1f4 	movhi	r7,16327
 8002b04:	180b883a 	mov	r5,r3
 8002b08:	31b22cc4 	addi	r6,r6,-14157
 8002b0c:	39e28a04 	addi	r7,r7,-30168
 8002b10:	1009883a 	mov	r4,r2
 8002b14:	800a1680 	call	800a168 <__adddf3>
 8002b18:	8809883a 	mov	r4,r17
 8002b1c:	102d883a 	mov	r22,r2
 8002b20:	182b883a 	mov	r21,r3
 8002b24:	800c5900 	call	800c590 <__floatsidf>
 8002b28:	019427f4 	movhi	r6,20639
 8002b2c:	01cff4f4 	movhi	r7,16339
 8002b30:	1009883a 	mov	r4,r2
 8002b34:	180b883a 	mov	r5,r3
 8002b38:	319e7ec4 	addi	r6,r6,31227
 8002b3c:	39d104c4 	addi	r7,r7,17427
 8002b40:	800b5140 	call	800b514 <__muldf3>
 8002b44:	b009883a 	mov	r4,r22
 8002b48:	a80b883a 	mov	r5,r21
 8002b4c:	100d883a 	mov	r6,r2
 8002b50:	180f883a 	mov	r7,r3
 8002b54:	800a1680 	call	800a168 <__adddf3>
 8002b58:	1009883a 	mov	r4,r2
 8002b5c:	180b883a 	mov	r5,r3
 8002b60:	102d883a 	mov	r22,r2
 8002b64:	182b883a 	mov	r21,r3
 8002b68:	800c5080 	call	800c508 <__fixdfsi>
 8002b6c:	b009883a 	mov	r4,r22
 8002b70:	a80b883a 	mov	r5,r21
 8002b74:	000d883a 	mov	r6,zero
 8002b78:	000f883a 	mov	r7,zero
 8002b7c:	d8800515 	stw	r2,20(sp)
 8002b80:	800b4340 	call	800b434 <__ledf2>
 8002b84:	10023116 	blt	r2,zero,800344c <_dtoa_r+0xb28>
 8002b88:	d8c00517 	ldw	r3,20(sp)
 8002b8c:	00800584 	movi	r2,22
 8002b90:	10c21f36 	bltu	r2,r3,8003410 <_dtoa_r+0xaec>
 8002b94:	180490fa 	slli	r2,r3,3
 8002b98:	00c20074 	movhi	r3,2049
 8002b9c:	18fd5b04 	addi	r3,r3,-2708
 8002ba0:	1885883a 	add	r2,r3,r2
 8002ba4:	11000017 	ldw	r4,0(r2)
 8002ba8:	11400117 	ldw	r5,4(r2)
 8002bac:	900d883a 	mov	r6,r18
 8002bb0:	980f883a 	mov	r7,r19
 8002bb4:	800b3540 	call	800b354 <__gedf2>
 8002bb8:	0082a70e 	bge	zero,r2,8003658 <_dtoa_r+0xd34>
 8002bbc:	d9000517 	ldw	r4,20(sp)
 8002bc0:	d8000c15 	stw	zero,48(sp)
 8002bc4:	213fffc4 	addi	r4,r4,-1
 8002bc8:	d9000515 	stw	r4,20(sp)
 8002bcc:	a463c83a 	sub	r17,r20,r17
 8002bd0:	8dbfffc4 	addi	r22,r17,-1
 8002bd4:	b0021916 	blt	r22,zero,800343c <_dtoa_r+0xb18>
 8002bd8:	d8000815 	stw	zero,32(sp)
 8002bdc:	d8800517 	ldw	r2,20(sp)
 8002be0:	10020e16 	blt	r2,zero,800341c <_dtoa_r+0xaf8>
 8002be4:	b0ad883a 	add	r22,r22,r2
 8002be8:	d8800a15 	stw	r2,40(sp)
 8002bec:	d8000915 	stw	zero,36(sp)
 8002bf0:	d8c00317 	ldw	r3,12(sp)
 8002bf4:	00800244 	movi	r2,9
 8002bf8:	10c11a36 	bltu	r2,r3,8003064 <_dtoa_r+0x740>
 8002bfc:	00800144 	movi	r2,5
 8002c00:	10c4fc0e 	bge	r2,r3,8003ff4 <_dtoa_r+0x16d0>
 8002c04:	18ffff04 	addi	r3,r3,-4
 8002c08:	d8c00315 	stw	r3,12(sp)
 8002c0c:	0029883a 	mov	r20,zero
 8002c10:	d9800317 	ldw	r6,12(sp)
 8002c14:	008000c4 	movi	r2,3
 8002c18:	3083bd26 	beq	r6,r2,8003b10 <_dtoa_r+0x11ec>
 8002c1c:	1183670e 	bge	r2,r6,80039bc <_dtoa_r+0x1098>
 8002c20:	d8c00317 	ldw	r3,12(sp)
 8002c24:	00800104 	movi	r2,4
 8002c28:	1882e726 	beq	r3,r2,80037c8 <_dtoa_r+0xea4>
 8002c2c:	00800144 	movi	r2,5
 8002c30:	1884f21e 	bne	r3,r2,8003ffc <_dtoa_r+0x16d8>
 8002c34:	00800044 	movi	r2,1
 8002c38:	d8800b15 	stw	r2,44(sp)
 8002c3c:	d8c02217 	ldw	r3,136(sp)
 8002c40:	d9000517 	ldw	r4,20(sp)
 8002c44:	1907883a 	add	r3,r3,r4
 8002c48:	19800044 	addi	r6,r3,1
 8002c4c:	d8c00d15 	stw	r3,52(sp)
 8002c50:	d9800615 	stw	r6,24(sp)
 8002c54:	0183c30e 	bge	zero,r6,8003b64 <_dtoa_r+0x1240>
 8002c58:	d9800617 	ldw	r6,24(sp)
 8002c5c:	3023883a 	mov	r17,r6
 8002c60:	80001115 	stw	zero,68(r16)
 8002c64:	008005c4 	movi	r2,23
 8002c68:	1184f62e 	bgeu	r2,r6,8004044 <_dtoa_r+0x1720>
 8002c6c:	00c00044 	movi	r3,1
 8002c70:	00800104 	movi	r2,4
 8002c74:	1085883a 	add	r2,r2,r2
 8002c78:	11000504 	addi	r4,r2,20
 8002c7c:	180b883a 	mov	r5,r3
 8002c80:	18c00044 	addi	r3,r3,1
 8002c84:	313ffb2e 	bgeu	r6,r4,8002c74 <__alt_data_end+0xfc002c74>
 8002c88:	81401115 	stw	r5,68(r16)
 8002c8c:	8009883a 	mov	r4,r16
 8002c90:	8005f4c0 	call	8005f4c <_Balloc>
 8002c94:	d8800715 	stw	r2,28(sp)
 8002c98:	80801015 	stw	r2,64(r16)
 8002c9c:	00800384 	movi	r2,14
 8002ca0:	1440fd36 	bltu	r2,r17,8003098 <_dtoa_r+0x774>
 8002ca4:	a000fc26 	beq	r20,zero,8003098 <_dtoa_r+0x774>
 8002ca8:	d8800517 	ldw	r2,20(sp)
 8002cac:	0083b90e 	bge	zero,r2,8003b94 <_dtoa_r+0x1270>
 8002cb0:	d8c00517 	ldw	r3,20(sp)
 8002cb4:	108003cc 	andi	r2,r2,15
 8002cb8:	100490fa 	slli	r2,r2,3
 8002cbc:	182fd13a 	srai	r23,r3,4
 8002cc0:	00c20074 	movhi	r3,2049
 8002cc4:	18fd5b04 	addi	r3,r3,-2708
 8002cc8:	1885883a 	add	r2,r3,r2
 8002ccc:	b8c0040c 	andi	r3,r23,16
 8002cd0:	12c00017 	ldw	r11,0(r2)
 8002cd4:	12800117 	ldw	r10,4(r2)
 8002cd8:	18039726 	beq	r3,zero,8003b38 <_dtoa_r+0x1214>
 8002cdc:	00820074 	movhi	r2,2049
 8002ce0:	10bd5104 	addi	r2,r2,-2748
 8002ce4:	11800817 	ldw	r6,32(r2)
 8002ce8:	11c00917 	ldw	r7,36(r2)
 8002cec:	9009883a 	mov	r4,r18
 8002cf0:	980b883a 	mov	r5,r19
 8002cf4:	da801615 	stw	r10,88(sp)
 8002cf8:	dac01515 	stw	r11,84(sp)
 8002cfc:	800aa040 	call	800aa04 <__divdf3>
 8002d00:	da801617 	ldw	r10,88(sp)
 8002d04:	dac01517 	ldw	r11,84(sp)
 8002d08:	bdc003cc 	andi	r23,r23,15
 8002d0c:	044000c4 	movi	r17,3
 8002d10:	d8800e15 	stw	r2,56(sp)
 8002d14:	182b883a 	mov	r21,r3
 8002d18:	b8001126 	beq	r23,zero,8002d60 <_dtoa_r+0x43c>
 8002d1c:	05020074 	movhi	r20,2049
 8002d20:	a53d5104 	addi	r20,r20,-2748
 8002d24:	5805883a 	mov	r2,r11
 8002d28:	5007883a 	mov	r3,r10
 8002d2c:	b980004c 	andi	r6,r23,1
 8002d30:	1009883a 	mov	r4,r2
 8002d34:	b82fd07a 	srai	r23,r23,1
 8002d38:	180b883a 	mov	r5,r3
 8002d3c:	30000426 	beq	r6,zero,8002d50 <_dtoa_r+0x42c>
 8002d40:	a1800017 	ldw	r6,0(r20)
 8002d44:	a1c00117 	ldw	r7,4(r20)
 8002d48:	8c400044 	addi	r17,r17,1
 8002d4c:	800b5140 	call	800b514 <__muldf3>
 8002d50:	a5000204 	addi	r20,r20,8
 8002d54:	b83ff51e 	bne	r23,zero,8002d2c <__alt_data_end+0xfc002d2c>
 8002d58:	1017883a 	mov	r11,r2
 8002d5c:	1815883a 	mov	r10,r3
 8002d60:	d9000e17 	ldw	r4,56(sp)
 8002d64:	a80b883a 	mov	r5,r21
 8002d68:	580d883a 	mov	r6,r11
 8002d6c:	500f883a 	mov	r7,r10
 8002d70:	800aa040 	call	800aa04 <__divdf3>
 8002d74:	1029883a 	mov	r20,r2
 8002d78:	182b883a 	mov	r21,r3
 8002d7c:	d9800c17 	ldw	r6,48(sp)
 8002d80:	30000626 	beq	r6,zero,8002d9c <_dtoa_r+0x478>
 8002d84:	a009883a 	mov	r4,r20
 8002d88:	a80b883a 	mov	r5,r21
 8002d8c:	000d883a 	mov	r6,zero
 8002d90:	01cffc34 	movhi	r7,16368
 8002d94:	800b4340 	call	800b434 <__ledf2>
 8002d98:	10043216 	blt	r2,zero,8003e64 <_dtoa_r+0x1540>
 8002d9c:	8809883a 	mov	r4,r17
 8002da0:	800c5900 	call	800c590 <__floatsidf>
 8002da4:	1009883a 	mov	r4,r2
 8002da8:	180b883a 	mov	r5,r3
 8002dac:	a00d883a 	mov	r6,r20
 8002db0:	a80f883a 	mov	r7,r21
 8002db4:	800b5140 	call	800b514 <__muldf3>
 8002db8:	000d883a 	mov	r6,zero
 8002dbc:	1009883a 	mov	r4,r2
 8002dc0:	180b883a 	mov	r5,r3
 8002dc4:	01d00734 	movhi	r7,16412
 8002dc8:	800a1680 	call	800a168 <__adddf3>
 8002dcc:	1023883a 	mov	r17,r2
 8002dd0:	d9800617 	ldw	r6,24(sp)
 8002dd4:	00bf3034 	movhi	r2,64704
 8002dd8:	1885883a 	add	r2,r3,r2
 8002ddc:	d8800e15 	stw	r2,56(sp)
 8002de0:	30032e26 	beq	r6,zero,8003a9c <_dtoa_r+0x1178>
 8002de4:	d8c00517 	ldw	r3,20(sp)
 8002de8:	da800617 	ldw	r10,24(sp)
 8002dec:	d8c01215 	stw	r3,72(sp)
 8002df0:	d9000b17 	ldw	r4,44(sp)
 8002df4:	2003b026 	beq	r4,zero,8003cb8 <_dtoa_r+0x1394>
 8002df8:	50bfffc4 	addi	r2,r10,-1
 8002dfc:	100490fa 	slli	r2,r2,3
 8002e00:	00c20074 	movhi	r3,2049
 8002e04:	18fd5b04 	addi	r3,r3,-2708
 8002e08:	1885883a 	add	r2,r3,r2
 8002e0c:	11800017 	ldw	r6,0(r2)
 8002e10:	11c00117 	ldw	r7,4(r2)
 8002e14:	d8800717 	ldw	r2,28(sp)
 8002e18:	0009883a 	mov	r4,zero
 8002e1c:	014ff834 	movhi	r5,16352
 8002e20:	da801615 	stw	r10,88(sp)
 8002e24:	15c00044 	addi	r23,r2,1
 8002e28:	800aa040 	call	800aa04 <__divdf3>
 8002e2c:	d9c00e17 	ldw	r7,56(sp)
 8002e30:	880d883a 	mov	r6,r17
 8002e34:	1009883a 	mov	r4,r2
 8002e38:	180b883a 	mov	r5,r3
 8002e3c:	800bc380 	call	800bc38 <__subdf3>
 8002e40:	a80b883a 	mov	r5,r21
 8002e44:	a009883a 	mov	r4,r20
 8002e48:	d8c01015 	stw	r3,64(sp)
 8002e4c:	d8800e15 	stw	r2,56(sp)
 8002e50:	800c5080 	call	800c508 <__fixdfsi>
 8002e54:	1009883a 	mov	r4,r2
 8002e58:	d8801715 	stw	r2,92(sp)
 8002e5c:	800c5900 	call	800c590 <__floatsidf>
 8002e60:	a009883a 	mov	r4,r20
 8002e64:	a80b883a 	mov	r5,r21
 8002e68:	100d883a 	mov	r6,r2
 8002e6c:	180f883a 	mov	r7,r3
 8002e70:	800bc380 	call	800bc38 <__subdf3>
 8002e74:	da001717 	ldw	r8,92(sp)
 8002e78:	1829883a 	mov	r20,r3
 8002e7c:	d8c00717 	ldw	r3,28(sp)
 8002e80:	d9000e17 	ldw	r4,56(sp)
 8002e84:	d9401017 	ldw	r5,64(sp)
 8002e88:	42000c04 	addi	r8,r8,48
 8002e8c:	1023883a 	mov	r17,r2
 8002e90:	1a000005 	stb	r8,0(r3)
 8002e94:	880d883a 	mov	r6,r17
 8002e98:	a00f883a 	mov	r7,r20
 8002e9c:	402b883a 	mov	r21,r8
 8002ea0:	800b3540 	call	800b354 <__gedf2>
 8002ea4:	00844516 	blt	zero,r2,8003fbc <_dtoa_r+0x1698>
 8002ea8:	0009883a 	mov	r4,zero
 8002eac:	014ffc34 	movhi	r5,16368
 8002eb0:	880d883a 	mov	r6,r17
 8002eb4:	a00f883a 	mov	r7,r20
 8002eb8:	800bc380 	call	800bc38 <__subdf3>
 8002ebc:	d9000e17 	ldw	r4,56(sp)
 8002ec0:	d9401017 	ldw	r5,64(sp)
 8002ec4:	100d883a 	mov	r6,r2
 8002ec8:	180f883a 	mov	r7,r3
 8002ecc:	800b3540 	call	800b354 <__gedf2>
 8002ed0:	da801617 	ldw	r10,88(sp)
 8002ed4:	00843616 	blt	zero,r2,8003fb0 <_dtoa_r+0x168c>
 8002ed8:	00800044 	movi	r2,1
 8002edc:	12806e0e 	bge	r2,r10,8003098 <_dtoa_r+0x774>
 8002ee0:	d9000717 	ldw	r4,28(sp)
 8002ee4:	dd801315 	stw	r22,76(sp)
 8002ee8:	dc001115 	stw	r16,68(sp)
 8002eec:	2295883a 	add	r10,r4,r10
 8002ef0:	dcc01415 	stw	r19,80(sp)
 8002ef4:	502d883a 	mov	r22,r10
 8002ef8:	dcc01017 	ldw	r19,64(sp)
 8002efc:	b821883a 	mov	r16,r23
 8002f00:	dc801015 	stw	r18,64(sp)
 8002f04:	dc800e17 	ldw	r18,56(sp)
 8002f08:	00000906 	br	8002f30 <_dtoa_r+0x60c>
 8002f0c:	800bc380 	call	800bc38 <__subdf3>
 8002f10:	1009883a 	mov	r4,r2
 8002f14:	180b883a 	mov	r5,r3
 8002f18:	900d883a 	mov	r6,r18
 8002f1c:	980f883a 	mov	r7,r19
 8002f20:	800b4340 	call	800b434 <__ledf2>
 8002f24:	10040e16 	blt	r2,zero,8003f60 <_dtoa_r+0x163c>
 8002f28:	b821883a 	mov	r16,r23
 8002f2c:	bd841026 	beq	r23,r22,8003f70 <_dtoa_r+0x164c>
 8002f30:	9009883a 	mov	r4,r18
 8002f34:	980b883a 	mov	r5,r19
 8002f38:	000d883a 	mov	r6,zero
 8002f3c:	01d00934 	movhi	r7,16420
 8002f40:	800b5140 	call	800b514 <__muldf3>
 8002f44:	000d883a 	mov	r6,zero
 8002f48:	01d00934 	movhi	r7,16420
 8002f4c:	8809883a 	mov	r4,r17
 8002f50:	a00b883a 	mov	r5,r20
 8002f54:	1025883a 	mov	r18,r2
 8002f58:	1827883a 	mov	r19,r3
 8002f5c:	800b5140 	call	800b514 <__muldf3>
 8002f60:	180b883a 	mov	r5,r3
 8002f64:	1009883a 	mov	r4,r2
 8002f68:	1823883a 	mov	r17,r3
 8002f6c:	1029883a 	mov	r20,r2
 8002f70:	800c5080 	call	800c508 <__fixdfsi>
 8002f74:	1009883a 	mov	r4,r2
 8002f78:	102b883a 	mov	r21,r2
 8002f7c:	800c5900 	call	800c590 <__floatsidf>
 8002f80:	a009883a 	mov	r4,r20
 8002f84:	880b883a 	mov	r5,r17
 8002f88:	100d883a 	mov	r6,r2
 8002f8c:	180f883a 	mov	r7,r3
 8002f90:	800bc380 	call	800bc38 <__subdf3>
 8002f94:	ad400c04 	addi	r21,r21,48
 8002f98:	1009883a 	mov	r4,r2
 8002f9c:	180b883a 	mov	r5,r3
 8002fa0:	900d883a 	mov	r6,r18
 8002fa4:	980f883a 	mov	r7,r19
 8002fa8:	85400005 	stb	r21,0(r16)
 8002fac:	1023883a 	mov	r17,r2
 8002fb0:	1829883a 	mov	r20,r3
 8002fb4:	800b4340 	call	800b434 <__ledf2>
 8002fb8:	bdc00044 	addi	r23,r23,1
 8002fbc:	0009883a 	mov	r4,zero
 8002fc0:	014ffc34 	movhi	r5,16368
 8002fc4:	880d883a 	mov	r6,r17
 8002fc8:	a00f883a 	mov	r7,r20
 8002fcc:	103fcf0e 	bge	r2,zero,8002f0c <__alt_data_end+0xfc002f0c>
 8002fd0:	d9801217 	ldw	r6,72(sp)
 8002fd4:	dc001117 	ldw	r16,68(sp)
 8002fd8:	d9800515 	stw	r6,20(sp)
 8002fdc:	8009883a 	mov	r4,r16
 8002fe0:	e00b883a 	mov	r5,fp
 8002fe4:	8005ff40 	call	8005ff4 <_Bfree>
 8002fe8:	d8c00517 	ldw	r3,20(sp)
 8002fec:	d9002317 	ldw	r4,140(sp)
 8002ff0:	d9802517 	ldw	r6,148(sp)
 8002ff4:	b8000005 	stb	zero,0(r23)
 8002ff8:	18800044 	addi	r2,r3,1
 8002ffc:	20800015 	stw	r2,0(r4)
 8003000:	30027226 	beq	r6,zero,80039cc <_dtoa_r+0x10a8>
 8003004:	35c00015 	stw	r23,0(r6)
 8003008:	d8800717 	ldw	r2,28(sp)
 800300c:	003e7406 	br	80029e0 <__alt_data_end+0xfc0029e0>
 8003010:	00800434 	movhi	r2,16
 8003014:	10bfffc4 	addi	r2,r2,-1
 8003018:	a8aa703a 	and	r21,r21,r2
 800301c:	a83e801e 	bne	r21,zero,8002a20 <__alt_data_end+0xfc002a20>
 8003020:	00820074 	movhi	r2,2049
 8003024:	10bd3c04 	addi	r2,r2,-2832
 8003028:	003e7f06 	br	8002a28 <__alt_data_end+0xfc002a28>
 800302c:	10c00204 	addi	r3,r2,8
 8003030:	003e8206 	br	8002a3c <__alt_data_end+0xfc002a3c>
 8003034:	01400434 	movhi	r5,16
 8003038:	297fffc4 	addi	r5,r5,-1
 800303c:	994a703a 	and	r5,r19,r5
 8003040:	9009883a 	mov	r4,r18
 8003044:	8c7f0044 	addi	r17,r17,-1023
 8003048:	294ffc34 	orhi	r5,r5,16368
 800304c:	dd000217 	ldw	r20,8(sp)
 8003050:	d8000f15 	stw	zero,60(sp)
 8003054:	003e9f06 	br	8002ad4 <__alt_data_end+0xfc002ad4>
 8003058:	00820074 	movhi	r2,2049
 800305c:	10bd3304 	addi	r2,r2,-2868
 8003060:	003e5f06 	br	80029e0 <__alt_data_end+0xfc0029e0>
 8003064:	80001115 	stw	zero,68(r16)
 8003068:	8009883a 	mov	r4,r16
 800306c:	000b883a 	mov	r5,zero
 8003070:	8005f4c0 	call	8005f4c <_Balloc>
 8003074:	01bfffc4 	movi	r6,-1
 8003078:	d8800715 	stw	r2,28(sp)
 800307c:	80801015 	stw	r2,64(r16)
 8003080:	00800044 	movi	r2,1
 8003084:	d9800615 	stw	r6,24(sp)
 8003088:	d8800b15 	stw	r2,44(sp)
 800308c:	d8002215 	stw	zero,136(sp)
 8003090:	d9800d15 	stw	r6,52(sp)
 8003094:	d8000315 	stw	zero,12(sp)
 8003098:	d8800117 	ldw	r2,4(sp)
 800309c:	10008e16 	blt	r2,zero,80032d8 <_dtoa_r+0x9b4>
 80030a0:	d9000517 	ldw	r4,20(sp)
 80030a4:	00c00384 	movi	r3,14
 80030a8:	19008b16 	blt	r3,r4,80032d8 <_dtoa_r+0x9b4>
 80030ac:	200490fa 	slli	r2,r4,3
 80030b0:	00c20074 	movhi	r3,2049
 80030b4:	d9802217 	ldw	r6,136(sp)
 80030b8:	18fd5b04 	addi	r3,r3,-2708
 80030bc:	1885883a 	add	r2,r3,r2
 80030c0:	14400017 	ldw	r17,0(r2)
 80030c4:	15000117 	ldw	r20,4(r2)
 80030c8:	3001c716 	blt	r6,zero,80037e8 <_dtoa_r+0xec4>
 80030cc:	880d883a 	mov	r6,r17
 80030d0:	a00f883a 	mov	r7,r20
 80030d4:	9009883a 	mov	r4,r18
 80030d8:	980b883a 	mov	r5,r19
 80030dc:	800aa040 	call	800aa04 <__divdf3>
 80030e0:	180b883a 	mov	r5,r3
 80030e4:	1009883a 	mov	r4,r2
 80030e8:	800c5080 	call	800c508 <__fixdfsi>
 80030ec:	1009883a 	mov	r4,r2
 80030f0:	102d883a 	mov	r22,r2
 80030f4:	800c5900 	call	800c590 <__floatsidf>
 80030f8:	1009883a 	mov	r4,r2
 80030fc:	180b883a 	mov	r5,r3
 8003100:	880d883a 	mov	r6,r17
 8003104:	a00f883a 	mov	r7,r20
 8003108:	800b5140 	call	800b514 <__muldf3>
 800310c:	9009883a 	mov	r4,r18
 8003110:	980b883a 	mov	r5,r19
 8003114:	100d883a 	mov	r6,r2
 8003118:	180f883a 	mov	r7,r3
 800311c:	800bc380 	call	800bc38 <__subdf3>
 8003120:	d9000717 	ldw	r4,28(sp)
 8003124:	d9800617 	ldw	r6,24(sp)
 8003128:	180b883a 	mov	r5,r3
 800312c:	b0c00c04 	addi	r3,r22,48
 8003130:	20c00005 	stb	r3,0(r4)
 8003134:	25c00044 	addi	r23,r4,1
 8003138:	01000044 	movi	r4,1
 800313c:	1011883a 	mov	r8,r2
 8003140:	2807883a 	mov	r3,r5
 8003144:	31003d26 	beq	r6,r4,800323c <_dtoa_r+0x918>
 8003148:	000d883a 	mov	r6,zero
 800314c:	01d00934 	movhi	r7,16420
 8003150:	1009883a 	mov	r4,r2
 8003154:	800b5140 	call	800b514 <__muldf3>
 8003158:	1009883a 	mov	r4,r2
 800315c:	180b883a 	mov	r5,r3
 8003160:	000d883a 	mov	r6,zero
 8003164:	000f883a 	mov	r7,zero
 8003168:	1027883a 	mov	r19,r2
 800316c:	182b883a 	mov	r21,r3
 8003170:	800b2d00 	call	800b2d0 <__eqdf2>
 8003174:	103f9926 	beq	r2,zero,8002fdc <__alt_data_end+0xfc002fdc>
 8003178:	d8c00617 	ldw	r3,24(sp)
 800317c:	d9000717 	ldw	r4,28(sp)
 8003180:	b825883a 	mov	r18,r23
 8003184:	18bfffc4 	addi	r2,r3,-1
 8003188:	20ad883a 	add	r22,r4,r2
 800318c:	dc000315 	stw	r16,12(sp)
 8003190:	00000a06 	br	80031bc <_dtoa_r+0x898>
 8003194:	800b5140 	call	800b514 <__muldf3>
 8003198:	1009883a 	mov	r4,r2
 800319c:	180b883a 	mov	r5,r3
 80031a0:	000d883a 	mov	r6,zero
 80031a4:	000f883a 	mov	r7,zero
 80031a8:	1027883a 	mov	r19,r2
 80031ac:	182b883a 	mov	r21,r3
 80031b0:	b825883a 	mov	r18,r23
 80031b4:	800b2d00 	call	800b2d0 <__eqdf2>
 80031b8:	10022626 	beq	r2,zero,8003a54 <_dtoa_r+0x1130>
 80031bc:	880d883a 	mov	r6,r17
 80031c0:	a00f883a 	mov	r7,r20
 80031c4:	9809883a 	mov	r4,r19
 80031c8:	a80b883a 	mov	r5,r21
 80031cc:	800aa040 	call	800aa04 <__divdf3>
 80031d0:	180b883a 	mov	r5,r3
 80031d4:	1009883a 	mov	r4,r2
 80031d8:	800c5080 	call	800c508 <__fixdfsi>
 80031dc:	1009883a 	mov	r4,r2
 80031e0:	1021883a 	mov	r16,r2
 80031e4:	800c5900 	call	800c590 <__floatsidf>
 80031e8:	1009883a 	mov	r4,r2
 80031ec:	180b883a 	mov	r5,r3
 80031f0:	880d883a 	mov	r6,r17
 80031f4:	a00f883a 	mov	r7,r20
 80031f8:	800b5140 	call	800b514 <__muldf3>
 80031fc:	9809883a 	mov	r4,r19
 8003200:	a80b883a 	mov	r5,r21
 8003204:	100d883a 	mov	r6,r2
 8003208:	180f883a 	mov	r7,r3
 800320c:	800bc380 	call	800bc38 <__subdf3>
 8003210:	82000c04 	addi	r8,r16,48
 8003214:	92000005 	stb	r8,0(r18)
 8003218:	1009883a 	mov	r4,r2
 800321c:	180b883a 	mov	r5,r3
 8003220:	000d883a 	mov	r6,zero
 8003224:	01d00934 	movhi	r7,16420
 8003228:	1011883a 	mov	r8,r2
 800322c:	bdc00044 	addi	r23,r23,1
 8003230:	95bfd81e 	bne	r18,r22,8003194 <__alt_data_end+0xfc003194>
 8003234:	802d883a 	mov	r22,r16
 8003238:	dc000317 	ldw	r16,12(sp)
 800323c:	4009883a 	mov	r4,r8
 8003240:	180b883a 	mov	r5,r3
 8003244:	400d883a 	mov	r6,r8
 8003248:	180f883a 	mov	r7,r3
 800324c:	800a1680 	call	800a168 <__adddf3>
 8003250:	8809883a 	mov	r4,r17
 8003254:	a00b883a 	mov	r5,r20
 8003258:	100d883a 	mov	r6,r2
 800325c:	180f883a 	mov	r7,r3
 8003260:	1027883a 	mov	r19,r2
 8003264:	1825883a 	mov	r18,r3
 8003268:	800b4340 	call	800b434 <__ledf2>
 800326c:	10000816 	blt	r2,zero,8003290 <_dtoa_r+0x96c>
 8003270:	8809883a 	mov	r4,r17
 8003274:	a00b883a 	mov	r5,r20
 8003278:	980d883a 	mov	r6,r19
 800327c:	900f883a 	mov	r7,r18
 8003280:	800b2d00 	call	800b2d0 <__eqdf2>
 8003284:	103f551e 	bne	r2,zero,8002fdc <__alt_data_end+0xfc002fdc>
 8003288:	b580004c 	andi	r22,r22,1
 800328c:	b03f5326 	beq	r22,zero,8002fdc <__alt_data_end+0xfc002fdc>
 8003290:	bd7fffc3 	ldbu	r21,-1(r23)
 8003294:	b8bfffc4 	addi	r2,r23,-1
 8003298:	1007883a 	mov	r3,r2
 800329c:	01400e44 	movi	r5,57
 80032a0:	d9800717 	ldw	r6,28(sp)
 80032a4:	00000506 	br	80032bc <_dtoa_r+0x998>
 80032a8:	18ffffc4 	addi	r3,r3,-1
 80032ac:	30825e26 	beq	r6,r2,8003c28 <_dtoa_r+0x1304>
 80032b0:	1d400003 	ldbu	r21,0(r3)
 80032b4:	102f883a 	mov	r23,r2
 80032b8:	10bfffc4 	addi	r2,r2,-1
 80032bc:	a9003fcc 	andi	r4,r21,255
 80032c0:	2100201c 	xori	r4,r4,128
 80032c4:	213fe004 	addi	r4,r4,-128
 80032c8:	217ff726 	beq	r4,r5,80032a8 <__alt_data_end+0xfc0032a8>
 80032cc:	aa000044 	addi	r8,r21,1
 80032d0:	12000005 	stb	r8,0(r2)
 80032d4:	003f4106 	br	8002fdc <__alt_data_end+0xfc002fdc>
 80032d8:	d8c00b17 	ldw	r3,44(sp)
 80032dc:	18006726 	beq	r3,zero,800347c <_dtoa_r+0xb58>
 80032e0:	d9000317 	ldw	r4,12(sp)
 80032e4:	00c00044 	movi	r3,1
 80032e8:	19016a0e 	bge	r3,r4,8003894 <_dtoa_r+0xf70>
 80032ec:	d8800617 	ldw	r2,24(sp)
 80032f0:	d8c00917 	ldw	r3,36(sp)
 80032f4:	157fffc4 	addi	r21,r2,-1
 80032f8:	1d420716 	blt	r3,r21,8003b18 <_dtoa_r+0x11f4>
 80032fc:	1d6bc83a 	sub	r21,r3,r21
 8003300:	d8800617 	ldw	r2,24(sp)
 8003304:	1002c716 	blt	r2,zero,8003e24 <_dtoa_r+0x1500>
 8003308:	dd000817 	ldw	r20,32(sp)
 800330c:	d8800617 	ldw	r2,24(sp)
 8003310:	d9800817 	ldw	r6,32(sp)
 8003314:	8009883a 	mov	r4,r16
 8003318:	01400044 	movi	r5,1
 800331c:	308d883a 	add	r6,r6,r2
 8003320:	d9800815 	stw	r6,32(sp)
 8003324:	b0ad883a 	add	r22,r22,r2
 8003328:	800634c0 	call	800634c <__i2b>
 800332c:	1023883a 	mov	r17,r2
 8003330:	a0000826 	beq	r20,zero,8003354 <_dtoa_r+0xa30>
 8003334:	0580070e 	bge	zero,r22,8003354 <_dtoa_r+0xa30>
 8003338:	b005883a 	mov	r2,r22
 800333c:	a5812016 	blt	r20,r22,80037c0 <_dtoa_r+0xe9c>
 8003340:	d8c00817 	ldw	r3,32(sp)
 8003344:	a0a9c83a 	sub	r20,r20,r2
 8003348:	b0adc83a 	sub	r22,r22,r2
 800334c:	1887c83a 	sub	r3,r3,r2
 8003350:	d8c00815 	stw	r3,32(sp)
 8003354:	d9000917 	ldw	r4,36(sp)
 8003358:	0100140e 	bge	zero,r4,80033ac <_dtoa_r+0xa88>
 800335c:	d9800b17 	ldw	r6,44(sp)
 8003360:	3001e526 	beq	r6,zero,8003af8 <_dtoa_r+0x11d4>
 8003364:	05400e0e 	bge	zero,r21,80033a0 <_dtoa_r+0xa7c>
 8003368:	880b883a 	mov	r5,r17
 800336c:	8009883a 	mov	r4,r16
 8003370:	a80d883a 	mov	r6,r21
 8003374:	80065840 	call	8006584 <__pow5mult>
 8003378:	e00d883a 	mov	r6,fp
 800337c:	8009883a 	mov	r4,r16
 8003380:	100b883a 	mov	r5,r2
 8003384:	1023883a 	mov	r17,r2
 8003388:	80063880 	call	8006388 <__multiply>
 800338c:	102f883a 	mov	r23,r2
 8003390:	e00b883a 	mov	r5,fp
 8003394:	8009883a 	mov	r4,r16
 8003398:	8005ff40 	call	8005ff4 <_Bfree>
 800339c:	b839883a 	mov	fp,r23
 80033a0:	d8800917 	ldw	r2,36(sp)
 80033a4:	154dc83a 	sub	r6,r2,r21
 80033a8:	3001281e 	bne	r6,zero,800384c <_dtoa_r+0xf28>
 80033ac:	05c00044 	movi	r23,1
 80033b0:	8009883a 	mov	r4,r16
 80033b4:	b80b883a 	mov	r5,r23
 80033b8:	800634c0 	call	800634c <__i2b>
 80033bc:	d8c00a17 	ldw	r3,40(sp)
 80033c0:	102b883a 	mov	r21,r2
 80033c4:	00c0310e 	bge	zero,r3,800348c <_dtoa_r+0xb68>
 80033c8:	8009883a 	mov	r4,r16
 80033cc:	100b883a 	mov	r5,r2
 80033d0:	180d883a 	mov	r6,r3
 80033d4:	80065840 	call	8006584 <__pow5mult>
 80033d8:	d9000317 	ldw	r4,12(sp)
 80033dc:	102b883a 	mov	r21,r2
 80033e0:	b9011f0e 	bge	r23,r4,8003860 <_dtoa_r+0xf3c>
 80033e4:	0027883a 	mov	r19,zero
 80033e8:	a8800417 	ldw	r2,16(r21)
 80033ec:	10800104 	addi	r2,r2,4
 80033f0:	1085883a 	add	r2,r2,r2
 80033f4:	1085883a 	add	r2,r2,r2
 80033f8:	a885883a 	add	r2,r21,r2
 80033fc:	11000017 	ldw	r4,0(r2)
 8003400:	80062340 	call	8006234 <__hi0bits>
 8003404:	00c00804 	movi	r3,32
 8003408:	1885c83a 	sub	r2,r3,r2
 800340c:	00002506 	br	80034a4 <_dtoa_r+0xb80>
 8003410:	01800044 	movi	r6,1
 8003414:	d9800c15 	stw	r6,48(sp)
 8003418:	003dec06 	br	8002bcc <__alt_data_end+0xfc002bcc>
 800341c:	d8c00817 	ldw	r3,32(sp)
 8003420:	d9000517 	ldw	r4,20(sp)
 8003424:	d8000a15 	stw	zero,40(sp)
 8003428:	1907c83a 	sub	r3,r3,r4
 800342c:	010dc83a 	sub	r6,zero,r4
 8003430:	d8c00815 	stw	r3,32(sp)
 8003434:	d9800915 	stw	r6,36(sp)
 8003438:	003ded06 	br	8002bf0 <__alt_data_end+0xfc002bf0>
 800343c:	05adc83a 	sub	r22,zero,r22
 8003440:	dd800815 	stw	r22,32(sp)
 8003444:	002d883a 	mov	r22,zero
 8003448:	003de406 	br	8002bdc <__alt_data_end+0xfc002bdc>
 800344c:	d9000517 	ldw	r4,20(sp)
 8003450:	800c5900 	call	800c590 <__floatsidf>
 8003454:	1009883a 	mov	r4,r2
 8003458:	180b883a 	mov	r5,r3
 800345c:	b00d883a 	mov	r6,r22
 8003460:	a80f883a 	mov	r7,r21
 8003464:	800b2d00 	call	800b2d0 <__eqdf2>
 8003468:	103dc726 	beq	r2,zero,8002b88 <__alt_data_end+0xfc002b88>
 800346c:	d8800517 	ldw	r2,20(sp)
 8003470:	10bfffc4 	addi	r2,r2,-1
 8003474:	d8800515 	stw	r2,20(sp)
 8003478:	003dc306 	br	8002b88 <__alt_data_end+0xfc002b88>
 800347c:	dd400917 	ldw	r21,36(sp)
 8003480:	dd000817 	ldw	r20,32(sp)
 8003484:	0023883a 	mov	r17,zero
 8003488:	003fa906 	br	8003330 <__alt_data_end+0xfc003330>
 800348c:	d9800317 	ldw	r6,12(sp)
 8003490:	b981670e 	bge	r23,r6,8003a30 <_dtoa_r+0x110c>
 8003494:	0027883a 	mov	r19,zero
 8003498:	d8c00a17 	ldw	r3,40(sp)
 800349c:	183fd21e 	bne	r3,zero,80033e8 <__alt_data_end+0xfc0033e8>
 80034a0:	00800044 	movi	r2,1
 80034a4:	1585883a 	add	r2,r2,r22
 80034a8:	108007cc 	andi	r2,r2,31
 80034ac:	10005f26 	beq	r2,zero,800362c <_dtoa_r+0xd08>
 80034b0:	00c00804 	movi	r3,32
 80034b4:	1887c83a 	sub	r3,r3,r2
 80034b8:	01000104 	movi	r4,4
 80034bc:	20c2dd0e 	bge	r4,r3,8004034 <_dtoa_r+0x1710>
 80034c0:	d9000817 	ldw	r4,32(sp)
 80034c4:	00c00704 	movi	r3,28
 80034c8:	1885c83a 	sub	r2,r3,r2
 80034cc:	2089883a 	add	r4,r4,r2
 80034d0:	d9000815 	stw	r4,32(sp)
 80034d4:	a0a9883a 	add	r20,r20,r2
 80034d8:	b0ad883a 	add	r22,r22,r2
 80034dc:	d8800817 	ldw	r2,32(sp)
 80034e0:	0080050e 	bge	zero,r2,80034f8 <_dtoa_r+0xbd4>
 80034e4:	e00b883a 	mov	r5,fp
 80034e8:	8009883a 	mov	r4,r16
 80034ec:	100d883a 	mov	r6,r2
 80034f0:	80066c40 	call	80066c4 <__lshift>
 80034f4:	1039883a 	mov	fp,r2
 80034f8:	0580050e 	bge	zero,r22,8003510 <_dtoa_r+0xbec>
 80034fc:	a80b883a 	mov	r5,r21
 8003500:	8009883a 	mov	r4,r16
 8003504:	b00d883a 	mov	r6,r22
 8003508:	80066c40 	call	80066c4 <__lshift>
 800350c:	102b883a 	mov	r21,r2
 8003510:	d8c00c17 	ldw	r3,48(sp)
 8003514:	1801161e 	bne	r3,zero,8003970 <_dtoa_r+0x104c>
 8003518:	d8c00617 	ldw	r3,24(sp)
 800351c:	00c12d0e 	bge	zero,r3,80039d4 <_dtoa_r+0x10b0>
 8003520:	d8c00b17 	ldw	r3,44(sp)
 8003524:	1800571e 	bne	r3,zero,8003684 <_dtoa_r+0xd60>
 8003528:	dc800717 	ldw	r18,28(sp)
 800352c:	dcc00617 	ldw	r19,24(sp)
 8003530:	9029883a 	mov	r20,r18
 8003534:	00000206 	br	8003540 <_dtoa_r+0xc1c>
 8003538:	800601c0 	call	800601c <__multadd>
 800353c:	1039883a 	mov	fp,r2
 8003540:	e009883a 	mov	r4,fp
 8003544:	a80b883a 	mov	r5,r21
 8003548:	80027240 	call	8002724 <quorem>
 800354c:	10800c04 	addi	r2,r2,48
 8003550:	90800005 	stb	r2,0(r18)
 8003554:	94800044 	addi	r18,r18,1
 8003558:	9507c83a 	sub	r3,r18,r20
 800355c:	8009883a 	mov	r4,r16
 8003560:	e00b883a 	mov	r5,fp
 8003564:	01800284 	movi	r6,10
 8003568:	000f883a 	mov	r7,zero
 800356c:	1cfff216 	blt	r3,r19,8003538 <__alt_data_end+0xfc003538>
 8003570:	1011883a 	mov	r8,r2
 8003574:	d8800617 	ldw	r2,24(sp)
 8003578:	00822e0e 	bge	zero,r2,8003e34 <_dtoa_r+0x1510>
 800357c:	d9000717 	ldw	r4,28(sp)
 8003580:	0025883a 	mov	r18,zero
 8003584:	20af883a 	add	r23,r4,r2
 8003588:	e00b883a 	mov	r5,fp
 800358c:	01800044 	movi	r6,1
 8003590:	8009883a 	mov	r4,r16
 8003594:	da001715 	stw	r8,92(sp)
 8003598:	80066c40 	call	80066c4 <__lshift>
 800359c:	1009883a 	mov	r4,r2
 80035a0:	a80b883a 	mov	r5,r21
 80035a4:	1039883a 	mov	fp,r2
 80035a8:	800680c0 	call	800680c <__mcmp>
 80035ac:	da001717 	ldw	r8,92(sp)
 80035b0:	00816e0e 	bge	zero,r2,8003b6c <_dtoa_r+0x1248>
 80035b4:	b93fffc3 	ldbu	r4,-1(r23)
 80035b8:	b8bfffc4 	addi	r2,r23,-1
 80035bc:	1007883a 	mov	r3,r2
 80035c0:	01800e44 	movi	r6,57
 80035c4:	d9c00717 	ldw	r7,28(sp)
 80035c8:	00000506 	br	80035e0 <_dtoa_r+0xcbc>
 80035cc:	18ffffc4 	addi	r3,r3,-1
 80035d0:	38811926 	beq	r7,r2,8003a38 <_dtoa_r+0x1114>
 80035d4:	19000003 	ldbu	r4,0(r3)
 80035d8:	102f883a 	mov	r23,r2
 80035dc:	10bfffc4 	addi	r2,r2,-1
 80035e0:	21403fcc 	andi	r5,r4,255
 80035e4:	2940201c 	xori	r5,r5,128
 80035e8:	297fe004 	addi	r5,r5,-128
 80035ec:	29bff726 	beq	r5,r6,80035cc <__alt_data_end+0xfc0035cc>
 80035f0:	21000044 	addi	r4,r4,1
 80035f4:	11000005 	stb	r4,0(r2)
 80035f8:	8009883a 	mov	r4,r16
 80035fc:	a80b883a 	mov	r5,r21
 8003600:	8005ff40 	call	8005ff4 <_Bfree>
 8003604:	883e7526 	beq	r17,zero,8002fdc <__alt_data_end+0xfc002fdc>
 8003608:	90000426 	beq	r18,zero,800361c <_dtoa_r+0xcf8>
 800360c:	94400326 	beq	r18,r17,800361c <_dtoa_r+0xcf8>
 8003610:	8009883a 	mov	r4,r16
 8003614:	900b883a 	mov	r5,r18
 8003618:	8005ff40 	call	8005ff4 <_Bfree>
 800361c:	8009883a 	mov	r4,r16
 8003620:	880b883a 	mov	r5,r17
 8003624:	8005ff40 	call	8005ff4 <_Bfree>
 8003628:	003e6c06 	br	8002fdc <__alt_data_end+0xfc002fdc>
 800362c:	00800704 	movi	r2,28
 8003630:	d9800817 	ldw	r6,32(sp)
 8003634:	a0a9883a 	add	r20,r20,r2
 8003638:	b0ad883a 	add	r22,r22,r2
 800363c:	308d883a 	add	r6,r6,r2
 8003640:	d9800815 	stw	r6,32(sp)
 8003644:	003fa506 	br	80034dc <__alt_data_end+0xfc0034dc>
 8003648:	013efb84 	movi	r4,-1042
 800364c:	246bc83a 	sub	r21,r4,r17
 8003650:	9548983a 	sll	r4,r18,r21
 8003654:	003d1806 	br	8002ab8 <__alt_data_end+0xfc002ab8>
 8003658:	d8000c15 	stw	zero,48(sp)
 800365c:	003d5b06 	br	8002bcc <__alt_data_end+0xfc002bcc>
 8003660:	880b883a 	mov	r5,r17
 8003664:	8009883a 	mov	r4,r16
 8003668:	01800284 	movi	r6,10
 800366c:	000f883a 	mov	r7,zero
 8003670:	800601c0 	call	800601c <__multadd>
 8003674:	1023883a 	mov	r17,r2
 8003678:	d8800d17 	ldw	r2,52(sp)
 800367c:	0082550e 	bge	zero,r2,8003fd4 <_dtoa_r+0x16b0>
 8003680:	d8800615 	stw	r2,24(sp)
 8003684:	0500050e 	bge	zero,r20,800369c <_dtoa_r+0xd78>
 8003688:	880b883a 	mov	r5,r17
 800368c:	8009883a 	mov	r4,r16
 8003690:	a00d883a 	mov	r6,r20
 8003694:	80066c40 	call	80066c4 <__lshift>
 8003698:	1023883a 	mov	r17,r2
 800369c:	98016a1e 	bne	r19,zero,8003c48 <_dtoa_r+0x1324>
 80036a0:	8829883a 	mov	r20,r17
 80036a4:	d9000617 	ldw	r4,24(sp)
 80036a8:	dcc00717 	ldw	r19,28(sp)
 80036ac:	9480004c 	andi	r18,r18,1
 80036b0:	20bfffc4 	addi	r2,r4,-1
 80036b4:	9885883a 	add	r2,r19,r2
 80036b8:	d8800415 	stw	r2,16(sp)
 80036bc:	dc800615 	stw	r18,24(sp)
 80036c0:	e009883a 	mov	r4,fp
 80036c4:	a80b883a 	mov	r5,r21
 80036c8:	80027240 	call	8002724 <quorem>
 80036cc:	e009883a 	mov	r4,fp
 80036d0:	880b883a 	mov	r5,r17
 80036d4:	102f883a 	mov	r23,r2
 80036d8:	800680c0 	call	800680c <__mcmp>
 80036dc:	8009883a 	mov	r4,r16
 80036e0:	a80b883a 	mov	r5,r21
 80036e4:	a00d883a 	mov	r6,r20
 80036e8:	102d883a 	mov	r22,r2
 80036ec:	800686c0 	call	800686c <__mdiff>
 80036f0:	1007883a 	mov	r3,r2
 80036f4:	10800317 	ldw	r2,12(r2)
 80036f8:	bc800c04 	addi	r18,r23,48
 80036fc:	1000971e 	bne	r2,zero,800395c <_dtoa_r+0x1038>
 8003700:	180b883a 	mov	r5,r3
 8003704:	e009883a 	mov	r4,fp
 8003708:	d8c01515 	stw	r3,84(sp)
 800370c:	800680c0 	call	800680c <__mcmp>
 8003710:	d8c01517 	ldw	r3,84(sp)
 8003714:	8009883a 	mov	r4,r16
 8003718:	d8801515 	stw	r2,84(sp)
 800371c:	180b883a 	mov	r5,r3
 8003720:	8005ff40 	call	8005ff4 <_Bfree>
 8003724:	d8801517 	ldw	r2,84(sp)
 8003728:	1000041e 	bne	r2,zero,800373c <_dtoa_r+0xe18>
 800372c:	d9800317 	ldw	r6,12(sp)
 8003730:	3000021e 	bne	r6,zero,800373c <_dtoa_r+0xe18>
 8003734:	d8c00617 	ldw	r3,24(sp)
 8003738:	18007626 	beq	r3,zero,8003914 <_dtoa_r+0xff0>
 800373c:	b0005b16 	blt	r22,zero,80038ac <_dtoa_r+0xf88>
 8003740:	b000041e 	bne	r22,zero,8003754 <_dtoa_r+0xe30>
 8003744:	d9000317 	ldw	r4,12(sp)
 8003748:	2000021e 	bne	r4,zero,8003754 <_dtoa_r+0xe30>
 800374c:	d8c00617 	ldw	r3,24(sp)
 8003750:	18005626 	beq	r3,zero,80038ac <_dtoa_r+0xf88>
 8003754:	00814d16 	blt	zero,r2,8003c8c <_dtoa_r+0x1368>
 8003758:	d8c00417 	ldw	r3,16(sp)
 800375c:	9d800044 	addi	r22,r19,1
 8003760:	9c800005 	stb	r18,0(r19)
 8003764:	b02f883a 	mov	r23,r22
 8003768:	98c14c26 	beq	r19,r3,8003c9c <_dtoa_r+0x1378>
 800376c:	e00b883a 	mov	r5,fp
 8003770:	8009883a 	mov	r4,r16
 8003774:	01800284 	movi	r6,10
 8003778:	000f883a 	mov	r7,zero
 800377c:	800601c0 	call	800601c <__multadd>
 8003780:	1039883a 	mov	fp,r2
 8003784:	8d006d26 	beq	r17,r20,800393c <_dtoa_r+0x1018>
 8003788:	880b883a 	mov	r5,r17
 800378c:	01800284 	movi	r6,10
 8003790:	000f883a 	mov	r7,zero
 8003794:	8009883a 	mov	r4,r16
 8003798:	800601c0 	call	800601c <__multadd>
 800379c:	a00b883a 	mov	r5,r20
 80037a0:	8009883a 	mov	r4,r16
 80037a4:	01800284 	movi	r6,10
 80037a8:	000f883a 	mov	r7,zero
 80037ac:	1023883a 	mov	r17,r2
 80037b0:	800601c0 	call	800601c <__multadd>
 80037b4:	1029883a 	mov	r20,r2
 80037b8:	b027883a 	mov	r19,r22
 80037bc:	003fc006 	br	80036c0 <__alt_data_end+0xfc0036c0>
 80037c0:	a005883a 	mov	r2,r20
 80037c4:	003ede06 	br	8003340 <__alt_data_end+0xfc003340>
 80037c8:	01000044 	movi	r4,1
 80037cc:	d9000b15 	stw	r4,44(sp)
 80037d0:	d9802217 	ldw	r6,136(sp)
 80037d4:	0180dc0e 	bge	zero,r6,8003b48 <_dtoa_r+0x1224>
 80037d8:	3023883a 	mov	r17,r6
 80037dc:	d9800d15 	stw	r6,52(sp)
 80037e0:	d9800615 	stw	r6,24(sp)
 80037e4:	003d1e06 	br	8002c60 <__alt_data_end+0xfc002c60>
 80037e8:	d8800617 	ldw	r2,24(sp)
 80037ec:	00be3716 	blt	zero,r2,80030cc <__alt_data_end+0xfc0030cc>
 80037f0:	1000be1e 	bne	r2,zero,8003aec <_dtoa_r+0x11c8>
 80037f4:	8809883a 	mov	r4,r17
 80037f8:	a00b883a 	mov	r5,r20
 80037fc:	000d883a 	mov	r6,zero
 8003800:	01d00534 	movhi	r7,16404
 8003804:	800b5140 	call	800b514 <__muldf3>
 8003808:	1009883a 	mov	r4,r2
 800380c:	180b883a 	mov	r5,r3
 8003810:	900d883a 	mov	r6,r18
 8003814:	980f883a 	mov	r7,r19
 8003818:	800b3540 	call	800b354 <__gedf2>
 800381c:	002b883a 	mov	r21,zero
 8003820:	0023883a 	mov	r17,zero
 8003824:	10007a16 	blt	r2,zero,8003a10 <_dtoa_r+0x10ec>
 8003828:	d9002217 	ldw	r4,136(sp)
 800382c:	ddc00717 	ldw	r23,28(sp)
 8003830:	0108303a 	nor	r4,zero,r4
 8003834:	d9000515 	stw	r4,20(sp)
 8003838:	8009883a 	mov	r4,r16
 800383c:	a80b883a 	mov	r5,r21
 8003840:	8005ff40 	call	8005ff4 <_Bfree>
 8003844:	883f751e 	bne	r17,zero,800361c <__alt_data_end+0xfc00361c>
 8003848:	003de406 	br	8002fdc <__alt_data_end+0xfc002fdc>
 800384c:	e00b883a 	mov	r5,fp
 8003850:	8009883a 	mov	r4,r16
 8003854:	80065840 	call	8006584 <__pow5mult>
 8003858:	1039883a 	mov	fp,r2
 800385c:	003ed306 	br	80033ac <__alt_data_end+0xfc0033ac>
 8003860:	903ee01e 	bne	r18,zero,80033e4 <__alt_data_end+0xfc0033e4>
 8003864:	00800434 	movhi	r2,16
 8003868:	10bfffc4 	addi	r2,r2,-1
 800386c:	9884703a 	and	r2,r19,r2
 8003870:	103f081e 	bne	r2,zero,8003494 <__alt_data_end+0xfc003494>
 8003874:	9cdffc2c 	andhi	r19,r19,32752
 8003878:	983f0626 	beq	r19,zero,8003494 <__alt_data_end+0xfc003494>
 800387c:	d8800817 	ldw	r2,32(sp)
 8003880:	b5800044 	addi	r22,r22,1
 8003884:	04c00044 	movi	r19,1
 8003888:	10800044 	addi	r2,r2,1
 800388c:	d8800815 	stw	r2,32(sp)
 8003890:	003f0106 	br	8003498 <__alt_data_end+0xfc003498>
 8003894:	d9800f17 	ldw	r6,60(sp)
 8003898:	30016826 	beq	r6,zero,8003e3c <_dtoa_r+0x1518>
 800389c:	10810cc4 	addi	r2,r2,1075
 80038a0:	dd400917 	ldw	r21,36(sp)
 80038a4:	dd000817 	ldw	r20,32(sp)
 80038a8:	003e9906 	br	8003310 <__alt_data_end+0xfc003310>
 80038ac:	9011883a 	mov	r8,r18
 80038b0:	4007883a 	mov	r3,r8
 80038b4:	e02d883a 	mov	r22,fp
 80038b8:	0080100e 	bge	zero,r2,80038fc <_dtoa_r+0xfd8>
 80038bc:	01800044 	movi	r6,1
 80038c0:	8009883a 	mov	r4,r16
 80038c4:	e00b883a 	mov	r5,fp
 80038c8:	da001515 	stw	r8,84(sp)
 80038cc:	da001715 	stw	r8,92(sp)
 80038d0:	80066c40 	call	80066c4 <__lshift>
 80038d4:	1009883a 	mov	r4,r2
 80038d8:	a80b883a 	mov	r5,r21
 80038dc:	102d883a 	mov	r22,r2
 80038e0:	800680c0 	call	800680c <__mcmp>
 80038e4:	d8c01517 	ldw	r3,84(sp)
 80038e8:	da001717 	ldw	r8,92(sp)
 80038ec:	0081a50e 	bge	zero,r2,8003f84 <_dtoa_r+0x1660>
 80038f0:	00800e44 	movi	r2,57
 80038f4:	40817b26 	beq	r8,r2,8003ee4 <_dtoa_r+0x15c0>
 80038f8:	40c00044 	addi	r3,r8,1
 80038fc:	8825883a 	mov	r18,r17
 8003900:	9dc00044 	addi	r23,r19,1
 8003904:	98c00005 	stb	r3,0(r19)
 8003908:	a023883a 	mov	r17,r20
 800390c:	b039883a 	mov	fp,r22
 8003910:	003f3906 	br	80035f8 <__alt_data_end+0xfc0035f8>
 8003914:	00800e44 	movi	r2,57
 8003918:	9011883a 	mov	r8,r18
 800391c:	90817226 	beq	r18,r2,8003ee8 <_dtoa_r+0x15c4>
 8003920:	0580010e 	bge	zero,r22,8003928 <_dtoa_r+0x1004>
 8003924:	ba000c44 	addi	r8,r23,49
 8003928:	8825883a 	mov	r18,r17
 800392c:	9dc00044 	addi	r23,r19,1
 8003930:	9a000005 	stb	r8,0(r19)
 8003934:	a023883a 	mov	r17,r20
 8003938:	003f2f06 	br	80035f8 <__alt_data_end+0xfc0035f8>
 800393c:	880b883a 	mov	r5,r17
 8003940:	8009883a 	mov	r4,r16
 8003944:	01800284 	movi	r6,10
 8003948:	000f883a 	mov	r7,zero
 800394c:	800601c0 	call	800601c <__multadd>
 8003950:	1023883a 	mov	r17,r2
 8003954:	1029883a 	mov	r20,r2
 8003958:	003f9706 	br	80037b8 <__alt_data_end+0xfc0037b8>
 800395c:	8009883a 	mov	r4,r16
 8003960:	180b883a 	mov	r5,r3
 8003964:	8005ff40 	call	8005ff4 <_Bfree>
 8003968:	00800044 	movi	r2,1
 800396c:	003f7306 	br	800373c <__alt_data_end+0xfc00373c>
 8003970:	e009883a 	mov	r4,fp
 8003974:	a80b883a 	mov	r5,r21
 8003978:	800680c0 	call	800680c <__mcmp>
 800397c:	103ee60e 	bge	r2,zero,8003518 <__alt_data_end+0xfc003518>
 8003980:	8009883a 	mov	r4,r16
 8003984:	e00b883a 	mov	r5,fp
 8003988:	01800284 	movi	r6,10
 800398c:	000f883a 	mov	r7,zero
 8003990:	800601c0 	call	800601c <__multadd>
 8003994:	d9000517 	ldw	r4,20(sp)
 8003998:	d9800b17 	ldw	r6,44(sp)
 800399c:	1039883a 	mov	fp,r2
 80039a0:	213fffc4 	addi	r4,r4,-1
 80039a4:	d9000515 	stw	r4,20(sp)
 80039a8:	303f2d1e 	bne	r6,zero,8003660 <__alt_data_end+0xfc003660>
 80039ac:	d9000d17 	ldw	r4,52(sp)
 80039b0:	0101780e 	bge	zero,r4,8003f94 <_dtoa_r+0x1670>
 80039b4:	d9000615 	stw	r4,24(sp)
 80039b8:	003edb06 	br	8003528 <__alt_data_end+0xfc003528>
 80039bc:	00800084 	movi	r2,2
 80039c0:	30818e1e 	bne	r6,r2,8003ffc <_dtoa_r+0x16d8>
 80039c4:	d8000b15 	stw	zero,44(sp)
 80039c8:	003f8106 	br	80037d0 <__alt_data_end+0xfc0037d0>
 80039cc:	d8800717 	ldw	r2,28(sp)
 80039d0:	003c0306 	br	80029e0 <__alt_data_end+0xfc0029e0>
 80039d4:	d9000317 	ldw	r4,12(sp)
 80039d8:	00800084 	movi	r2,2
 80039dc:	113ed00e 	bge	r2,r4,8003520 <__alt_data_end+0xfc003520>
 80039e0:	d8c00617 	ldw	r3,24(sp)
 80039e4:	183f901e 	bne	r3,zero,8003828 <__alt_data_end+0xfc003828>
 80039e8:	a80b883a 	mov	r5,r21
 80039ec:	8009883a 	mov	r4,r16
 80039f0:	01800144 	movi	r6,5
 80039f4:	000f883a 	mov	r7,zero
 80039f8:	800601c0 	call	800601c <__multadd>
 80039fc:	e009883a 	mov	r4,fp
 8003a00:	100b883a 	mov	r5,r2
 8003a04:	102b883a 	mov	r21,r2
 8003a08:	800680c0 	call	800680c <__mcmp>
 8003a0c:	00bf860e 	bge	zero,r2,8003828 <__alt_data_end+0xfc003828>
 8003a10:	d9800717 	ldw	r6,28(sp)
 8003a14:	00800c44 	movi	r2,49
 8003a18:	30800005 	stb	r2,0(r6)
 8003a1c:	d8800517 	ldw	r2,20(sp)
 8003a20:	35c00044 	addi	r23,r6,1
 8003a24:	10800044 	addi	r2,r2,1
 8003a28:	d8800515 	stw	r2,20(sp)
 8003a2c:	003f8206 	br	8003838 <__alt_data_end+0xfc003838>
 8003a30:	903e981e 	bne	r18,zero,8003494 <__alt_data_end+0xfc003494>
 8003a34:	003f8b06 	br	8003864 <__alt_data_end+0xfc003864>
 8003a38:	d9800517 	ldw	r6,20(sp)
 8003a3c:	d8c00717 	ldw	r3,28(sp)
 8003a40:	00800c44 	movi	r2,49
 8003a44:	31800044 	addi	r6,r6,1
 8003a48:	d9800515 	stw	r6,20(sp)
 8003a4c:	18800005 	stb	r2,0(r3)
 8003a50:	003ee906 	br	80035f8 <__alt_data_end+0xfc0035f8>
 8003a54:	dc000317 	ldw	r16,12(sp)
 8003a58:	003d6006 	br	8002fdc <__alt_data_end+0xfc002fdc>
 8003a5c:	8809883a 	mov	r4,r17
 8003a60:	800c5900 	call	800c590 <__floatsidf>
 8003a64:	a009883a 	mov	r4,r20
 8003a68:	a80b883a 	mov	r5,r21
 8003a6c:	100d883a 	mov	r6,r2
 8003a70:	180f883a 	mov	r7,r3
 8003a74:	800b5140 	call	800b514 <__muldf3>
 8003a78:	1009883a 	mov	r4,r2
 8003a7c:	180b883a 	mov	r5,r3
 8003a80:	000d883a 	mov	r6,zero
 8003a84:	01d00734 	movhi	r7,16412
 8003a88:	800a1680 	call	800a168 <__adddf3>
 8003a8c:	1023883a 	mov	r17,r2
 8003a90:	00bf3034 	movhi	r2,64704
 8003a94:	1885883a 	add	r2,r3,r2
 8003a98:	d8800e15 	stw	r2,56(sp)
 8003a9c:	a009883a 	mov	r4,r20
 8003aa0:	a80b883a 	mov	r5,r21
 8003aa4:	000d883a 	mov	r6,zero
 8003aa8:	01d00534 	movhi	r7,16404
 8003aac:	800bc380 	call	800bc38 <__subdf3>
 8003ab0:	d9c00e17 	ldw	r7,56(sp)
 8003ab4:	1009883a 	mov	r4,r2
 8003ab8:	180b883a 	mov	r5,r3
 8003abc:	880d883a 	mov	r6,r17
 8003ac0:	102b883a 	mov	r21,r2
 8003ac4:	1829883a 	mov	r20,r3
 8003ac8:	800b3540 	call	800b354 <__gedf2>
 8003acc:	00807716 	blt	zero,r2,8003cac <_dtoa_r+0x1388>
 8003ad0:	d8800e17 	ldw	r2,56(sp)
 8003ad4:	a809883a 	mov	r4,r21
 8003ad8:	a00b883a 	mov	r5,r20
 8003adc:	11e0003c 	xorhi	r7,r2,32768
 8003ae0:	880d883a 	mov	r6,r17
 8003ae4:	800b4340 	call	800b434 <__ledf2>
 8003ae8:	103d6b0e 	bge	r2,zero,8003098 <__alt_data_end+0xfc003098>
 8003aec:	002b883a 	mov	r21,zero
 8003af0:	0023883a 	mov	r17,zero
 8003af4:	003f4c06 	br	8003828 <__alt_data_end+0xfc003828>
 8003af8:	d9800917 	ldw	r6,36(sp)
 8003afc:	e00b883a 	mov	r5,fp
 8003b00:	8009883a 	mov	r4,r16
 8003b04:	80065840 	call	8006584 <__pow5mult>
 8003b08:	1039883a 	mov	fp,r2
 8003b0c:	003e2706 	br	80033ac <__alt_data_end+0xfc0033ac>
 8003b10:	d8000b15 	stw	zero,44(sp)
 8003b14:	003c4906 	br	8002c3c <__alt_data_end+0xfc002c3c>
 8003b18:	d9000917 	ldw	r4,36(sp)
 8003b1c:	d9800a17 	ldw	r6,40(sp)
 8003b20:	dd400915 	stw	r21,36(sp)
 8003b24:	a905c83a 	sub	r2,r21,r4
 8003b28:	308d883a 	add	r6,r6,r2
 8003b2c:	d9800a15 	stw	r6,40(sp)
 8003b30:	002b883a 	mov	r21,zero
 8003b34:	003df206 	br	8003300 <__alt_data_end+0xfc003300>
 8003b38:	dc800e15 	stw	r18,56(sp)
 8003b3c:	982b883a 	mov	r21,r19
 8003b40:	04400084 	movi	r17,2
 8003b44:	003c7406 	br	8002d18 <__alt_data_end+0xfc002d18>
 8003b48:	04400044 	movi	r17,1
 8003b4c:	dc400d15 	stw	r17,52(sp)
 8003b50:	dc400615 	stw	r17,24(sp)
 8003b54:	dc402215 	stw	r17,136(sp)
 8003b58:	80001115 	stw	zero,68(r16)
 8003b5c:	000b883a 	mov	r5,zero
 8003b60:	003c4a06 	br	8002c8c <__alt_data_end+0xfc002c8c>
 8003b64:	3023883a 	mov	r17,r6
 8003b68:	003ffb06 	br	8003b58 <__alt_data_end+0xfc003b58>
 8003b6c:	1000021e 	bne	r2,zero,8003b78 <_dtoa_r+0x1254>
 8003b70:	4200004c 	andi	r8,r8,1
 8003b74:	403e8f1e 	bne	r8,zero,80035b4 <__alt_data_end+0xfc0035b4>
 8003b78:	01000c04 	movi	r4,48
 8003b7c:	00000106 	br	8003b84 <_dtoa_r+0x1260>
 8003b80:	102f883a 	mov	r23,r2
 8003b84:	b8bfffc4 	addi	r2,r23,-1
 8003b88:	10c00007 	ldb	r3,0(r2)
 8003b8c:	193ffc26 	beq	r3,r4,8003b80 <__alt_data_end+0xfc003b80>
 8003b90:	003e9906 	br	80035f8 <__alt_data_end+0xfc0035f8>
 8003b94:	d9000517 	ldw	r4,20(sp)
 8003b98:	012fc83a 	sub	r23,zero,r4
 8003b9c:	b800ad26 	beq	r23,zero,8003e54 <_dtoa_r+0x1530>
 8003ba0:	b88003cc 	andi	r2,r23,15
 8003ba4:	100490fa 	slli	r2,r2,3
 8003ba8:	00c20074 	movhi	r3,2049
 8003bac:	18fd5b04 	addi	r3,r3,-2708
 8003bb0:	1885883a 	add	r2,r3,r2
 8003bb4:	11800017 	ldw	r6,0(r2)
 8003bb8:	11c00117 	ldw	r7,4(r2)
 8003bbc:	b82fd13a 	srai	r23,r23,4
 8003bc0:	9009883a 	mov	r4,r18
 8003bc4:	980b883a 	mov	r5,r19
 8003bc8:	800b5140 	call	800b514 <__muldf3>
 8003bcc:	1029883a 	mov	r20,r2
 8003bd0:	182b883a 	mov	r21,r3
 8003bd4:	b800f426 	beq	r23,zero,8003fa8 <_dtoa_r+0x1684>
 8003bd8:	02020074 	movhi	r8,2049
 8003bdc:	423d5104 	addi	r8,r8,-2748
 8003be0:	8029883a 	mov	r20,r16
 8003be4:	04400084 	movi	r17,2
 8003be8:	4021883a 	mov	r16,r8
 8003bec:	b980004c 	andi	r6,r23,1
 8003bf0:	1009883a 	mov	r4,r2
 8003bf4:	b82fd07a 	srai	r23,r23,1
 8003bf8:	180b883a 	mov	r5,r3
 8003bfc:	30000426 	beq	r6,zero,8003c10 <_dtoa_r+0x12ec>
 8003c00:	81800017 	ldw	r6,0(r16)
 8003c04:	81c00117 	ldw	r7,4(r16)
 8003c08:	8c400044 	addi	r17,r17,1
 8003c0c:	800b5140 	call	800b514 <__muldf3>
 8003c10:	84000204 	addi	r16,r16,8
 8003c14:	b83ff51e 	bne	r23,zero,8003bec <__alt_data_end+0xfc003bec>
 8003c18:	a021883a 	mov	r16,r20
 8003c1c:	182b883a 	mov	r21,r3
 8003c20:	1029883a 	mov	r20,r2
 8003c24:	003c5506 	br	8002d7c <__alt_data_end+0xfc002d7c>
 8003c28:	d9800517 	ldw	r6,20(sp)
 8003c2c:	d9000717 	ldw	r4,28(sp)
 8003c30:	00c00c04 	movi	r3,48
 8003c34:	31800044 	addi	r6,r6,1
 8003c38:	d9800515 	stw	r6,20(sp)
 8003c3c:	20c00005 	stb	r3,0(r4)
 8003c40:	02000c44 	movi	r8,49
 8003c44:	003da206 	br	80032d0 <__alt_data_end+0xfc0032d0>
 8003c48:	89400117 	ldw	r5,4(r17)
 8003c4c:	8009883a 	mov	r4,r16
 8003c50:	8005f4c0 	call	8005f4c <_Balloc>
 8003c54:	89800417 	ldw	r6,16(r17)
 8003c58:	11000304 	addi	r4,r2,12
 8003c5c:	89400304 	addi	r5,r17,12
 8003c60:	31800084 	addi	r6,r6,2
 8003c64:	318d883a 	add	r6,r6,r6
 8003c68:	318d883a 	add	r6,r6,r6
 8003c6c:	1027883a 	mov	r19,r2
 8003c70:	8005b940 	call	8005b94 <memcpy>
 8003c74:	8009883a 	mov	r4,r16
 8003c78:	980b883a 	mov	r5,r19
 8003c7c:	01800044 	movi	r6,1
 8003c80:	80066c40 	call	80066c4 <__lshift>
 8003c84:	1029883a 	mov	r20,r2
 8003c88:	003e8606 	br	80036a4 <__alt_data_end+0xfc0036a4>
 8003c8c:	00800e44 	movi	r2,57
 8003c90:	90809526 	beq	r18,r2,8003ee8 <_dtoa_r+0x15c4>
 8003c94:	92000044 	addi	r8,r18,1
 8003c98:	003f2306 	br	8003928 <__alt_data_end+0xfc003928>
 8003c9c:	9011883a 	mov	r8,r18
 8003ca0:	8825883a 	mov	r18,r17
 8003ca4:	a023883a 	mov	r17,r20
 8003ca8:	003e3706 	br	8003588 <__alt_data_end+0xfc003588>
 8003cac:	002b883a 	mov	r21,zero
 8003cb0:	0023883a 	mov	r17,zero
 8003cb4:	003f5606 	br	8003a10 <__alt_data_end+0xfc003a10>
 8003cb8:	51bfffc4 	addi	r6,r10,-1
 8003cbc:	300490fa 	slli	r2,r6,3
 8003cc0:	00c20074 	movhi	r3,2049
 8003cc4:	18fd5b04 	addi	r3,r3,-2708
 8003cc8:	1885883a 	add	r2,r3,r2
 8003ccc:	d9c00e17 	ldw	r7,56(sp)
 8003cd0:	11000017 	ldw	r4,0(r2)
 8003cd4:	11400117 	ldw	r5,4(r2)
 8003cd8:	d8800717 	ldw	r2,28(sp)
 8003cdc:	d9801015 	stw	r6,64(sp)
 8003ce0:	880d883a 	mov	r6,r17
 8003ce4:	da801615 	stw	r10,88(sp)
 8003ce8:	15c00044 	addi	r23,r2,1
 8003cec:	800b5140 	call	800b514 <__muldf3>
 8003cf0:	a80b883a 	mov	r5,r21
 8003cf4:	a009883a 	mov	r4,r20
 8003cf8:	d8c01115 	stw	r3,68(sp)
 8003cfc:	d8800e15 	stw	r2,56(sp)
 8003d00:	800c5080 	call	800c508 <__fixdfsi>
 8003d04:	1009883a 	mov	r4,r2
 8003d08:	1023883a 	mov	r17,r2
 8003d0c:	800c5900 	call	800c590 <__floatsidf>
 8003d10:	a009883a 	mov	r4,r20
 8003d14:	a80b883a 	mov	r5,r21
 8003d18:	100d883a 	mov	r6,r2
 8003d1c:	180f883a 	mov	r7,r3
 8003d20:	800bc380 	call	800bc38 <__subdf3>
 8003d24:	1813883a 	mov	r9,r3
 8003d28:	d8c00717 	ldw	r3,28(sp)
 8003d2c:	8c400c04 	addi	r17,r17,48
 8003d30:	1011883a 	mov	r8,r2
 8003d34:	1c400005 	stb	r17,0(r3)
 8003d38:	da801617 	ldw	r10,88(sp)
 8003d3c:	00800044 	movi	r2,1
 8003d40:	50802326 	beq	r10,r2,8003dd0 <_dtoa_r+0x14ac>
 8003d44:	d8800717 	ldw	r2,28(sp)
 8003d48:	b82b883a 	mov	r21,r23
 8003d4c:	dc001315 	stw	r16,76(sp)
 8003d50:	12a9883a 	add	r20,r2,r10
 8003d54:	4807883a 	mov	r3,r9
 8003d58:	4005883a 	mov	r2,r8
 8003d5c:	dc801415 	stw	r18,80(sp)
 8003d60:	000d883a 	mov	r6,zero
 8003d64:	01d00934 	movhi	r7,16420
 8003d68:	1009883a 	mov	r4,r2
 8003d6c:	180b883a 	mov	r5,r3
 8003d70:	800b5140 	call	800b514 <__muldf3>
 8003d74:	180b883a 	mov	r5,r3
 8003d78:	1009883a 	mov	r4,r2
 8003d7c:	1821883a 	mov	r16,r3
 8003d80:	1025883a 	mov	r18,r2
 8003d84:	800c5080 	call	800c508 <__fixdfsi>
 8003d88:	1009883a 	mov	r4,r2
 8003d8c:	1023883a 	mov	r17,r2
 8003d90:	800c5900 	call	800c590 <__floatsidf>
 8003d94:	9009883a 	mov	r4,r18
 8003d98:	800b883a 	mov	r5,r16
 8003d9c:	100d883a 	mov	r6,r2
 8003da0:	180f883a 	mov	r7,r3
 8003da4:	8c400c04 	addi	r17,r17,48
 8003da8:	800bc380 	call	800bc38 <__subdf3>
 8003dac:	ad400044 	addi	r21,r21,1
 8003db0:	ac7fffc5 	stb	r17,-1(r21)
 8003db4:	ad3fea1e 	bne	r21,r20,8003d60 <__alt_data_end+0xfc003d60>
 8003db8:	1813883a 	mov	r9,r3
 8003dbc:	d8c01017 	ldw	r3,64(sp)
 8003dc0:	dc001317 	ldw	r16,76(sp)
 8003dc4:	dc801417 	ldw	r18,80(sp)
 8003dc8:	1011883a 	mov	r8,r2
 8003dcc:	b8ef883a 	add	r23,r23,r3
 8003dd0:	d9000e17 	ldw	r4,56(sp)
 8003dd4:	d9401117 	ldw	r5,68(sp)
 8003dd8:	000d883a 	mov	r6,zero
 8003ddc:	01cff834 	movhi	r7,16352
 8003de0:	da001715 	stw	r8,92(sp)
 8003de4:	da401515 	stw	r9,84(sp)
 8003de8:	800a1680 	call	800a168 <__adddf3>
 8003dec:	da001717 	ldw	r8,92(sp)
 8003df0:	da401517 	ldw	r9,84(sp)
 8003df4:	1009883a 	mov	r4,r2
 8003df8:	400d883a 	mov	r6,r8
 8003dfc:	480f883a 	mov	r7,r9
 8003e00:	180b883a 	mov	r5,r3
 8003e04:	800b4340 	call	800b434 <__ledf2>
 8003e08:	da001717 	ldw	r8,92(sp)
 8003e0c:	da401517 	ldw	r9,84(sp)
 8003e10:	10003b0e 	bge	r2,zero,8003f00 <_dtoa_r+0x15dc>
 8003e14:	d9001217 	ldw	r4,72(sp)
 8003e18:	bd7fffc3 	ldbu	r21,-1(r23)
 8003e1c:	d9000515 	stw	r4,20(sp)
 8003e20:	003d1c06 	br	8003294 <__alt_data_end+0xfc003294>
 8003e24:	d8c00817 	ldw	r3,32(sp)
 8003e28:	18a9c83a 	sub	r20,r3,r2
 8003e2c:	0005883a 	mov	r2,zero
 8003e30:	003d3706 	br	8003310 <__alt_data_end+0xfc003310>
 8003e34:	00800044 	movi	r2,1
 8003e38:	003dd006 	br	800357c <__alt_data_end+0xfc00357c>
 8003e3c:	d8c00217 	ldw	r3,8(sp)
 8003e40:	00800d84 	movi	r2,54
 8003e44:	dd400917 	ldw	r21,36(sp)
 8003e48:	10c5c83a 	sub	r2,r2,r3
 8003e4c:	dd000817 	ldw	r20,32(sp)
 8003e50:	003d2f06 	br	8003310 <__alt_data_end+0xfc003310>
 8003e54:	9029883a 	mov	r20,r18
 8003e58:	982b883a 	mov	r21,r19
 8003e5c:	04400084 	movi	r17,2
 8003e60:	003bc606 	br	8002d7c <__alt_data_end+0xfc002d7c>
 8003e64:	d8800617 	ldw	r2,24(sp)
 8003e68:	103efc26 	beq	r2,zero,8003a5c <__alt_data_end+0xfc003a5c>
 8003e6c:	d8c00d17 	ldw	r3,52(sp)
 8003e70:	00fc890e 	bge	zero,r3,8003098 <__alt_data_end+0xfc003098>
 8003e74:	a80b883a 	mov	r5,r21
 8003e78:	a009883a 	mov	r4,r20
 8003e7c:	000d883a 	mov	r6,zero
 8003e80:	01d00934 	movhi	r7,16420
 8003e84:	800b5140 	call	800b514 <__muldf3>
 8003e88:	89000044 	addi	r4,r17,1
 8003e8c:	1029883a 	mov	r20,r2
 8003e90:	182b883a 	mov	r21,r3
 8003e94:	800c5900 	call	800c590 <__floatsidf>
 8003e98:	a009883a 	mov	r4,r20
 8003e9c:	a80b883a 	mov	r5,r21
 8003ea0:	100d883a 	mov	r6,r2
 8003ea4:	180f883a 	mov	r7,r3
 8003ea8:	800b5140 	call	800b514 <__muldf3>
 8003eac:	1009883a 	mov	r4,r2
 8003eb0:	180b883a 	mov	r5,r3
 8003eb4:	000d883a 	mov	r6,zero
 8003eb8:	01d00734 	movhi	r7,16412
 8003ebc:	800a1680 	call	800a168 <__adddf3>
 8003ec0:	d9000517 	ldw	r4,20(sp)
 8003ec4:	1023883a 	mov	r17,r2
 8003ec8:	00bf3034 	movhi	r2,64704
 8003ecc:	213fffc4 	addi	r4,r4,-1
 8003ed0:	1885883a 	add	r2,r3,r2
 8003ed4:	d9001215 	stw	r4,72(sp)
 8003ed8:	d8800e15 	stw	r2,56(sp)
 8003edc:	da800d17 	ldw	r10,52(sp)
 8003ee0:	003bc306 	br	8002df0 <__alt_data_end+0xfc002df0>
 8003ee4:	b039883a 	mov	fp,r22
 8003ee8:	01000e44 	movi	r4,57
 8003eec:	8825883a 	mov	r18,r17
 8003ef0:	9dc00044 	addi	r23,r19,1
 8003ef4:	99000005 	stb	r4,0(r19)
 8003ef8:	a023883a 	mov	r17,r20
 8003efc:	003dae06 	br	80035b8 <__alt_data_end+0xfc0035b8>
 8003f00:	d9800e17 	ldw	r6,56(sp)
 8003f04:	d9c01117 	ldw	r7,68(sp)
 8003f08:	0009883a 	mov	r4,zero
 8003f0c:	014ff834 	movhi	r5,16352
 8003f10:	da001715 	stw	r8,92(sp)
 8003f14:	da401515 	stw	r9,84(sp)
 8003f18:	800bc380 	call	800bc38 <__subdf3>
 8003f1c:	da001717 	ldw	r8,92(sp)
 8003f20:	da401517 	ldw	r9,84(sp)
 8003f24:	1009883a 	mov	r4,r2
 8003f28:	180b883a 	mov	r5,r3
 8003f2c:	400d883a 	mov	r6,r8
 8003f30:	480f883a 	mov	r7,r9
 8003f34:	800b3540 	call	800b354 <__gedf2>
 8003f38:	00bc570e 	bge	zero,r2,8003098 <__alt_data_end+0xfc003098>
 8003f3c:	01000c04 	movi	r4,48
 8003f40:	00000106 	br	8003f48 <_dtoa_r+0x1624>
 8003f44:	102f883a 	mov	r23,r2
 8003f48:	b8bfffc4 	addi	r2,r23,-1
 8003f4c:	10c00007 	ldb	r3,0(r2)
 8003f50:	193ffc26 	beq	r3,r4,8003f44 <__alt_data_end+0xfc003f44>
 8003f54:	d9801217 	ldw	r6,72(sp)
 8003f58:	d9800515 	stw	r6,20(sp)
 8003f5c:	003c1f06 	br	8002fdc <__alt_data_end+0xfc002fdc>
 8003f60:	d8801217 	ldw	r2,72(sp)
 8003f64:	dc001117 	ldw	r16,68(sp)
 8003f68:	d8800515 	stw	r2,20(sp)
 8003f6c:	003cc906 	br	8003294 <__alt_data_end+0xfc003294>
 8003f70:	dd801317 	ldw	r22,76(sp)
 8003f74:	dc001117 	ldw	r16,68(sp)
 8003f78:	dcc01417 	ldw	r19,80(sp)
 8003f7c:	dc801017 	ldw	r18,64(sp)
 8003f80:	003c4506 	br	8003098 <__alt_data_end+0xfc003098>
 8003f84:	103e5d1e 	bne	r2,zero,80038fc <__alt_data_end+0xfc0038fc>
 8003f88:	4080004c 	andi	r2,r8,1
 8003f8c:	103e5b26 	beq	r2,zero,80038fc <__alt_data_end+0xfc0038fc>
 8003f90:	003e5706 	br	80038f0 <__alt_data_end+0xfc0038f0>
 8003f94:	d8c00317 	ldw	r3,12(sp)
 8003f98:	00800084 	movi	r2,2
 8003f9c:	10c00a16 	blt	r2,r3,8003fc8 <_dtoa_r+0x16a4>
 8003fa0:	d9000d17 	ldw	r4,52(sp)
 8003fa4:	003e8306 	br	80039b4 <__alt_data_end+0xfc0039b4>
 8003fa8:	04400084 	movi	r17,2
 8003fac:	003b7306 	br	8002d7c <__alt_data_end+0xfc002d7c>
 8003fb0:	d9801217 	ldw	r6,72(sp)
 8003fb4:	d9800515 	stw	r6,20(sp)
 8003fb8:	003cb606 	br	8003294 <__alt_data_end+0xfc003294>
 8003fbc:	d9001217 	ldw	r4,72(sp)
 8003fc0:	d9000515 	stw	r4,20(sp)
 8003fc4:	003c0506 	br	8002fdc <__alt_data_end+0xfc002fdc>
 8003fc8:	d9800d17 	ldw	r6,52(sp)
 8003fcc:	d9800615 	stw	r6,24(sp)
 8003fd0:	003e8306 	br	80039e0 <__alt_data_end+0xfc0039e0>
 8003fd4:	d9800317 	ldw	r6,12(sp)
 8003fd8:	00800084 	movi	r2,2
 8003fdc:	11800216 	blt	r2,r6,8003fe8 <_dtoa_r+0x16c4>
 8003fe0:	d8800d17 	ldw	r2,52(sp)
 8003fe4:	003da606 	br	8003680 <__alt_data_end+0xfc003680>
 8003fe8:	d8800d17 	ldw	r2,52(sp)
 8003fec:	d8800615 	stw	r2,24(sp)
 8003ff0:	003e7b06 	br	80039e0 <__alt_data_end+0xfc0039e0>
 8003ff4:	05000044 	movi	r20,1
 8003ff8:	003b0506 	br	8002c10 <__alt_data_end+0xfc002c10>
 8003ffc:	8009883a 	mov	r4,r16
 8004000:	80001115 	stw	zero,68(r16)
 8004004:	000b883a 	mov	r5,zero
 8004008:	8005f4c0 	call	8005f4c <_Balloc>
 800400c:	d8800715 	stw	r2,28(sp)
 8004010:	d8c00717 	ldw	r3,28(sp)
 8004014:	00bfffc4 	movi	r2,-1
 8004018:	01000044 	movi	r4,1
 800401c:	d8800615 	stw	r2,24(sp)
 8004020:	80c01015 	stw	r3,64(r16)
 8004024:	d9000b15 	stw	r4,44(sp)
 8004028:	d8002215 	stw	zero,136(sp)
 800402c:	d8800d15 	stw	r2,52(sp)
 8004030:	003c1906 	br	8003098 <__alt_data_end+0xfc003098>
 8004034:	193d2926 	beq	r3,r4,80034dc <__alt_data_end+0xfc0034dc>
 8004038:	00c00f04 	movi	r3,60
 800403c:	1885c83a 	sub	r2,r3,r2
 8004040:	003d7b06 	br	8003630 <__alt_data_end+0xfc003630>
 8004044:	000b883a 	mov	r5,zero
 8004048:	003b1006 	br	8002c8c <__alt_data_end+0xfc002c8c>

0800404c <_fflush_r>:
 800404c:	defffb04 	addi	sp,sp,-20
 8004050:	dcc00315 	stw	r19,12(sp)
 8004054:	dc000015 	stw	r16,0(sp)
 8004058:	dfc00415 	stw	ra,16(sp)
 800405c:	dc800215 	stw	r18,8(sp)
 8004060:	dc400115 	stw	r17,4(sp)
 8004064:	2027883a 	mov	r19,r4
 8004068:	2821883a 	mov	r16,r5
 800406c:	20000226 	beq	r4,zero,8004078 <_fflush_r+0x2c>
 8004070:	20800e17 	ldw	r2,56(r4)
 8004074:	10005326 	beq	r2,zero,80041c4 <_fflush_r+0x178>
 8004078:	8080030b 	ldhu	r2,12(r16)
 800407c:	10ffffcc 	andi	r3,r2,65535
 8004080:	18e0001c 	xori	r3,r3,32768
 8004084:	18e00004 	addi	r3,r3,-32768
 8004088:	18002c26 	beq	r3,zero,800413c <_fflush_r+0xf0>
 800408c:	10c0020c 	andi	r3,r2,8
 8004090:	1800321e 	bne	r3,zero,800415c <_fflush_r+0x110>
 8004094:	80c00117 	ldw	r3,4(r16)
 8004098:	10820014 	ori	r2,r2,2048
 800409c:	8080030d 	sth	r2,12(r16)
 80040a0:	00c0570e 	bge	zero,r3,8004200 <_fflush_r+0x1b4>
 80040a4:	82000a17 	ldw	r8,40(r16)
 80040a8:	40002426 	beq	r8,zero,800413c <_fflush_r+0xf0>
 80040ac:	9c400017 	ldw	r17,0(r19)
 80040b0:	10c4000c 	andi	r3,r2,4096
 80040b4:	98000015 	stw	zero,0(r19)
 80040b8:	18004626 	beq	r3,zero,80041d4 <_fflush_r+0x188>
 80040bc:	81801417 	ldw	r6,80(r16)
 80040c0:	10c0010c 	andi	r3,r2,4
 80040c4:	18000626 	beq	r3,zero,80040e0 <_fflush_r+0x94>
 80040c8:	80c00117 	ldw	r3,4(r16)
 80040cc:	80800c17 	ldw	r2,48(r16)
 80040d0:	30cdc83a 	sub	r6,r6,r3
 80040d4:	10000226 	beq	r2,zero,80040e0 <_fflush_r+0x94>
 80040d8:	80800f17 	ldw	r2,60(r16)
 80040dc:	308dc83a 	sub	r6,r6,r2
 80040e0:	81400717 	ldw	r5,28(r16)
 80040e4:	9809883a 	mov	r4,r19
 80040e8:	000f883a 	mov	r7,zero
 80040ec:	403ee83a 	callr	r8
 80040f0:	00ffffc4 	movi	r3,-1
 80040f4:	10c04526 	beq	r2,r3,800420c <_fflush_r+0x1c0>
 80040f8:	80c0030b 	ldhu	r3,12(r16)
 80040fc:	81000417 	ldw	r4,16(r16)
 8004100:	80000115 	stw	zero,4(r16)
 8004104:	197dffcc 	andi	r5,r3,63487
 8004108:	8140030d 	sth	r5,12(r16)
 800410c:	81000015 	stw	r4,0(r16)
 8004110:	18c4000c 	andi	r3,r3,4096
 8004114:	18000126 	beq	r3,zero,800411c <_fflush_r+0xd0>
 8004118:	80801415 	stw	r2,80(r16)
 800411c:	81400c17 	ldw	r5,48(r16)
 8004120:	9c400015 	stw	r17,0(r19)
 8004124:	28000526 	beq	r5,zero,800413c <_fflush_r+0xf0>
 8004128:	80801004 	addi	r2,r16,64
 800412c:	28800226 	beq	r5,r2,8004138 <_fflush_r+0xec>
 8004130:	9809883a 	mov	r4,r19
 8004134:	80047680 	call	8004768 <_free_r>
 8004138:	80000c15 	stw	zero,48(r16)
 800413c:	0005883a 	mov	r2,zero
 8004140:	dfc00417 	ldw	ra,16(sp)
 8004144:	dcc00317 	ldw	r19,12(sp)
 8004148:	dc800217 	ldw	r18,8(sp)
 800414c:	dc400117 	ldw	r17,4(sp)
 8004150:	dc000017 	ldw	r16,0(sp)
 8004154:	dec00504 	addi	sp,sp,20
 8004158:	f800283a 	ret
 800415c:	84800417 	ldw	r18,16(r16)
 8004160:	903ff626 	beq	r18,zero,800413c <__alt_data_end+0xfc00413c>
 8004164:	84400017 	ldw	r17,0(r16)
 8004168:	108000cc 	andi	r2,r2,3
 800416c:	84800015 	stw	r18,0(r16)
 8004170:	8ca3c83a 	sub	r17,r17,r18
 8004174:	10001526 	beq	r2,zero,80041cc <_fflush_r+0x180>
 8004178:	0005883a 	mov	r2,zero
 800417c:	80800215 	stw	r2,8(r16)
 8004180:	04400316 	blt	zero,r17,8004190 <_fflush_r+0x144>
 8004184:	003fed06 	br	800413c <__alt_data_end+0xfc00413c>
 8004188:	90a5883a 	add	r18,r18,r2
 800418c:	047feb0e 	bge	zero,r17,800413c <__alt_data_end+0xfc00413c>
 8004190:	80800917 	ldw	r2,36(r16)
 8004194:	81400717 	ldw	r5,28(r16)
 8004198:	880f883a 	mov	r7,r17
 800419c:	900d883a 	mov	r6,r18
 80041a0:	9809883a 	mov	r4,r19
 80041a4:	103ee83a 	callr	r2
 80041a8:	88a3c83a 	sub	r17,r17,r2
 80041ac:	00bff616 	blt	zero,r2,8004188 <__alt_data_end+0xfc004188>
 80041b0:	80c0030b 	ldhu	r3,12(r16)
 80041b4:	00bfffc4 	movi	r2,-1
 80041b8:	18c01014 	ori	r3,r3,64
 80041bc:	80c0030d 	sth	r3,12(r16)
 80041c0:	003fdf06 	br	8004140 <__alt_data_end+0xfc004140>
 80041c4:	80045f40 	call	80045f4 <__sinit>
 80041c8:	003fab06 	br	8004078 <__alt_data_end+0xfc004078>
 80041cc:	80800517 	ldw	r2,20(r16)
 80041d0:	003fea06 	br	800417c <__alt_data_end+0xfc00417c>
 80041d4:	81400717 	ldw	r5,28(r16)
 80041d8:	000d883a 	mov	r6,zero
 80041dc:	9809883a 	mov	r4,r19
 80041e0:	01c00044 	movi	r7,1
 80041e4:	403ee83a 	callr	r8
 80041e8:	100d883a 	mov	r6,r2
 80041ec:	00bfffc4 	movi	r2,-1
 80041f0:	30801326 	beq	r6,r2,8004240 <_fflush_r+0x1f4>
 80041f4:	8080030b 	ldhu	r2,12(r16)
 80041f8:	82000a17 	ldw	r8,40(r16)
 80041fc:	003fb006 	br	80040c0 <__alt_data_end+0xfc0040c0>
 8004200:	80c00f17 	ldw	r3,60(r16)
 8004204:	00ffa716 	blt	zero,r3,80040a4 <__alt_data_end+0xfc0040a4>
 8004208:	003fcc06 	br	800413c <__alt_data_end+0xfc00413c>
 800420c:	98c00017 	ldw	r3,0(r19)
 8004210:	183fb926 	beq	r3,zero,80040f8 <__alt_data_end+0xfc0040f8>
 8004214:	01000744 	movi	r4,29
 8004218:	19000226 	beq	r3,r4,8004224 <_fflush_r+0x1d8>
 800421c:	01000584 	movi	r4,22
 8004220:	1900101e 	bne	r3,r4,8004264 <_fflush_r+0x218>
 8004224:	8080030b 	ldhu	r2,12(r16)
 8004228:	80c00417 	ldw	r3,16(r16)
 800422c:	80000115 	stw	zero,4(r16)
 8004230:	10bdffcc 	andi	r2,r2,63487
 8004234:	8080030d 	sth	r2,12(r16)
 8004238:	80c00015 	stw	r3,0(r16)
 800423c:	003fb706 	br	800411c <__alt_data_end+0xfc00411c>
 8004240:	98800017 	ldw	r2,0(r19)
 8004244:	103feb26 	beq	r2,zero,80041f4 <__alt_data_end+0xfc0041f4>
 8004248:	00c00744 	movi	r3,29
 800424c:	10c00226 	beq	r2,r3,8004258 <_fflush_r+0x20c>
 8004250:	00c00584 	movi	r3,22
 8004254:	10ffd61e 	bne	r2,r3,80041b0 <__alt_data_end+0xfc0041b0>
 8004258:	9c400015 	stw	r17,0(r19)
 800425c:	0005883a 	mov	r2,zero
 8004260:	003fb706 	br	8004140 <__alt_data_end+0xfc004140>
 8004264:	80c0030b 	ldhu	r3,12(r16)
 8004268:	18c01014 	ori	r3,r3,64
 800426c:	80c0030d 	sth	r3,12(r16)
 8004270:	003fb306 	br	8004140 <__alt_data_end+0xfc004140>

08004274 <fflush>:
 8004274:	20000526 	beq	r4,zero,800428c <fflush+0x18>
 8004278:	00820074 	movhi	r2,2049
 800427c:	10849f04 	addi	r2,r2,4732
 8004280:	200b883a 	mov	r5,r4
 8004284:	11000017 	ldw	r4,0(r2)
 8004288:	800404c1 	jmpi	800404c <_fflush_r>
 800428c:	00820074 	movhi	r2,2049
 8004290:	10849e04 	addi	r2,r2,4728
 8004294:	11000017 	ldw	r4,0(r2)
 8004298:	01420034 	movhi	r5,2048
 800429c:	29501304 	addi	r5,r5,16460
 80042a0:	8004fb41 	jmpi	8004fb4 <_fwalk_reent>

080042a4 <__fp_lock>:
 80042a4:	0005883a 	mov	r2,zero
 80042a8:	f800283a 	ret

080042ac <__fp_unlock>:
 80042ac:	0005883a 	mov	r2,zero
 80042b0:	f800283a 	ret

080042b4 <_cleanup_r>:
 80042b4:	01420074 	movhi	r5,2049
 80042b8:	29638a04 	addi	r5,r5,-29144
 80042bc:	8004efc1 	jmpi	8004efc <_fwalk>

080042c0 <__sinit.part.1>:
 80042c0:	defff604 	addi	sp,sp,-40
 80042c4:	00c20034 	movhi	r3,2048
 80042c8:	dfc00915 	stw	ra,36(sp)
 80042cc:	df000815 	stw	fp,32(sp)
 80042d0:	ddc00715 	stw	r23,28(sp)
 80042d4:	dd800615 	stw	r22,24(sp)
 80042d8:	dd400515 	stw	r21,20(sp)
 80042dc:	dd000415 	stw	r20,16(sp)
 80042e0:	dcc00315 	stw	r19,12(sp)
 80042e4:	dc800215 	stw	r18,8(sp)
 80042e8:	dc400115 	stw	r17,4(sp)
 80042ec:	dc000015 	stw	r16,0(sp)
 80042f0:	18d0ad04 	addi	r3,r3,17076
 80042f4:	24000117 	ldw	r16,4(r4)
 80042f8:	20c00f15 	stw	r3,60(r4)
 80042fc:	07000044 	movi	fp,1
 8004300:	00c000c4 	movi	r3,3
 8004304:	2080bb04 	addi	r2,r4,748
 8004308:	20c0b915 	stw	r3,740(r4)
 800430c:	27000e15 	stw	fp,56(r4)
 8004310:	2080ba15 	stw	r2,744(r4)
 8004314:	2000b815 	stw	zero,736(r4)
 8004318:	05c00204 	movi	r23,8
 800431c:	00800104 	movi	r2,4
 8004320:	2025883a 	mov	r18,r4
 8004324:	b80d883a 	mov	r6,r23
 8004328:	81001704 	addi	r4,r16,92
 800432c:	000b883a 	mov	r5,zero
 8004330:	80000015 	stw	zero,0(r16)
 8004334:	80000115 	stw	zero,4(r16)
 8004338:	80000215 	stw	zero,8(r16)
 800433c:	8080030d 	sth	r2,12(r16)
 8004340:	80001915 	stw	zero,100(r16)
 8004344:	8000038d 	sth	zero,14(r16)
 8004348:	80000415 	stw	zero,16(r16)
 800434c:	80000515 	stw	zero,20(r16)
 8004350:	80000615 	stw	zero,24(r16)
 8004354:	8005e280 	call	8005e28 <memset>
 8004358:	05820034 	movhi	r22,2048
 800435c:	94400217 	ldw	r17,8(r18)
 8004360:	05420034 	movhi	r21,2048
 8004364:	05020034 	movhi	r20,2048
 8004368:	04c20034 	movhi	r19,2048
 800436c:	b59d5004 	addi	r22,r22,30016
 8004370:	ad5d6704 	addi	r21,r21,30108
 8004374:	a51d8604 	addi	r20,r20,30232
 8004378:	9cdd9d04 	addi	r19,r19,30324
 800437c:	85800815 	stw	r22,32(r16)
 8004380:	85400915 	stw	r21,36(r16)
 8004384:	85000a15 	stw	r20,40(r16)
 8004388:	84c00b15 	stw	r19,44(r16)
 800438c:	84000715 	stw	r16,28(r16)
 8004390:	00800284 	movi	r2,10
 8004394:	89001704 	addi	r4,r17,92
 8004398:	b80d883a 	mov	r6,r23
 800439c:	000b883a 	mov	r5,zero
 80043a0:	88000015 	stw	zero,0(r17)
 80043a4:	88000115 	stw	zero,4(r17)
 80043a8:	88000215 	stw	zero,8(r17)
 80043ac:	8880030d 	sth	r2,12(r17)
 80043b0:	88001915 	stw	zero,100(r17)
 80043b4:	8f00038d 	sth	fp,14(r17)
 80043b8:	88000415 	stw	zero,16(r17)
 80043bc:	88000515 	stw	zero,20(r17)
 80043c0:	88000615 	stw	zero,24(r17)
 80043c4:	8005e280 	call	8005e28 <memset>
 80043c8:	94000317 	ldw	r16,12(r18)
 80043cc:	00800484 	movi	r2,18
 80043d0:	8c400715 	stw	r17,28(r17)
 80043d4:	8d800815 	stw	r22,32(r17)
 80043d8:	8d400915 	stw	r21,36(r17)
 80043dc:	8d000a15 	stw	r20,40(r17)
 80043e0:	8cc00b15 	stw	r19,44(r17)
 80043e4:	8080030d 	sth	r2,12(r16)
 80043e8:	00800084 	movi	r2,2
 80043ec:	80000015 	stw	zero,0(r16)
 80043f0:	80000115 	stw	zero,4(r16)
 80043f4:	80000215 	stw	zero,8(r16)
 80043f8:	80001915 	stw	zero,100(r16)
 80043fc:	8080038d 	sth	r2,14(r16)
 8004400:	80000415 	stw	zero,16(r16)
 8004404:	80000515 	stw	zero,20(r16)
 8004408:	80000615 	stw	zero,24(r16)
 800440c:	81001704 	addi	r4,r16,92
 8004410:	000b883a 	mov	r5,zero
 8004414:	b80d883a 	mov	r6,r23
 8004418:	8005e280 	call	8005e28 <memset>
 800441c:	84000715 	stw	r16,28(r16)
 8004420:	85800815 	stw	r22,32(r16)
 8004424:	85400915 	stw	r21,36(r16)
 8004428:	85000a15 	stw	r20,40(r16)
 800442c:	84c00b15 	stw	r19,44(r16)
 8004430:	dfc00917 	ldw	ra,36(sp)
 8004434:	df000817 	ldw	fp,32(sp)
 8004438:	ddc00717 	ldw	r23,28(sp)
 800443c:	dd800617 	ldw	r22,24(sp)
 8004440:	dd400517 	ldw	r21,20(sp)
 8004444:	dd000417 	ldw	r20,16(sp)
 8004448:	dcc00317 	ldw	r19,12(sp)
 800444c:	dc800217 	ldw	r18,8(sp)
 8004450:	dc400117 	ldw	r17,4(sp)
 8004454:	dc000017 	ldw	r16,0(sp)
 8004458:	dec00a04 	addi	sp,sp,40
 800445c:	f800283a 	ret

08004460 <__sfmoreglue>:
 8004460:	defffc04 	addi	sp,sp,-16
 8004464:	dc400115 	stw	r17,4(sp)
 8004468:	2c401a24 	muli	r17,r5,104
 800446c:	dc800215 	stw	r18,8(sp)
 8004470:	2825883a 	mov	r18,r5
 8004474:	89400304 	addi	r5,r17,12
 8004478:	dc000015 	stw	r16,0(sp)
 800447c:	dfc00315 	stw	ra,12(sp)
 8004480:	80053040 	call	8005304 <_malloc_r>
 8004484:	1021883a 	mov	r16,r2
 8004488:	10000726 	beq	r2,zero,80044a8 <__sfmoreglue+0x48>
 800448c:	11000304 	addi	r4,r2,12
 8004490:	10000015 	stw	zero,0(r2)
 8004494:	14800115 	stw	r18,4(r2)
 8004498:	11000215 	stw	r4,8(r2)
 800449c:	000b883a 	mov	r5,zero
 80044a0:	880d883a 	mov	r6,r17
 80044a4:	8005e280 	call	8005e28 <memset>
 80044a8:	8005883a 	mov	r2,r16
 80044ac:	dfc00317 	ldw	ra,12(sp)
 80044b0:	dc800217 	ldw	r18,8(sp)
 80044b4:	dc400117 	ldw	r17,4(sp)
 80044b8:	dc000017 	ldw	r16,0(sp)
 80044bc:	dec00404 	addi	sp,sp,16
 80044c0:	f800283a 	ret

080044c4 <__sfp>:
 80044c4:	00820074 	movhi	r2,2049
 80044c8:	defffb04 	addi	sp,sp,-20
 80044cc:	10849e04 	addi	r2,r2,4728
 80044d0:	dc800215 	stw	r18,8(sp)
 80044d4:	14800017 	ldw	r18,0(r2)
 80044d8:	dcc00315 	stw	r19,12(sp)
 80044dc:	dfc00415 	stw	ra,16(sp)
 80044e0:	90800e17 	ldw	r2,56(r18)
 80044e4:	dc400115 	stw	r17,4(sp)
 80044e8:	dc000015 	stw	r16,0(sp)
 80044ec:	2027883a 	mov	r19,r4
 80044f0:	1000021e 	bne	r2,zero,80044fc <__sfp+0x38>
 80044f4:	9009883a 	mov	r4,r18
 80044f8:	80042c00 	call	80042c0 <__sinit.part.1>
 80044fc:	9480b804 	addi	r18,r18,736
 8004500:	047fffc4 	movi	r17,-1
 8004504:	91400117 	ldw	r5,4(r18)
 8004508:	94000217 	ldw	r16,8(r18)
 800450c:	297fffc4 	addi	r5,r5,-1
 8004510:	28000a16 	blt	r5,zero,800453c <__sfp+0x78>
 8004514:	8080030f 	ldh	r2,12(r16)
 8004518:	10000c26 	beq	r2,zero,800454c <__sfp+0x88>
 800451c:	80c01d04 	addi	r3,r16,116
 8004520:	00000206 	br	800452c <__sfp+0x68>
 8004524:	18bfe60f 	ldh	r2,-104(r3)
 8004528:	10000826 	beq	r2,zero,800454c <__sfp+0x88>
 800452c:	297fffc4 	addi	r5,r5,-1
 8004530:	1c3ffd04 	addi	r16,r3,-12
 8004534:	18c01a04 	addi	r3,r3,104
 8004538:	2c7ffa1e 	bne	r5,r17,8004524 <__alt_data_end+0xfc004524>
 800453c:	90800017 	ldw	r2,0(r18)
 8004540:	10001d26 	beq	r2,zero,80045b8 <__sfp+0xf4>
 8004544:	1025883a 	mov	r18,r2
 8004548:	003fee06 	br	8004504 <__alt_data_end+0xfc004504>
 800454c:	00bfffc4 	movi	r2,-1
 8004550:	8080038d 	sth	r2,14(r16)
 8004554:	00800044 	movi	r2,1
 8004558:	8080030d 	sth	r2,12(r16)
 800455c:	80001915 	stw	zero,100(r16)
 8004560:	80000015 	stw	zero,0(r16)
 8004564:	80000215 	stw	zero,8(r16)
 8004568:	80000115 	stw	zero,4(r16)
 800456c:	80000415 	stw	zero,16(r16)
 8004570:	80000515 	stw	zero,20(r16)
 8004574:	80000615 	stw	zero,24(r16)
 8004578:	81001704 	addi	r4,r16,92
 800457c:	000b883a 	mov	r5,zero
 8004580:	01800204 	movi	r6,8
 8004584:	8005e280 	call	8005e28 <memset>
 8004588:	8005883a 	mov	r2,r16
 800458c:	80000c15 	stw	zero,48(r16)
 8004590:	80000d15 	stw	zero,52(r16)
 8004594:	80001115 	stw	zero,68(r16)
 8004598:	80001215 	stw	zero,72(r16)
 800459c:	dfc00417 	ldw	ra,16(sp)
 80045a0:	dcc00317 	ldw	r19,12(sp)
 80045a4:	dc800217 	ldw	r18,8(sp)
 80045a8:	dc400117 	ldw	r17,4(sp)
 80045ac:	dc000017 	ldw	r16,0(sp)
 80045b0:	dec00504 	addi	sp,sp,20
 80045b4:	f800283a 	ret
 80045b8:	9809883a 	mov	r4,r19
 80045bc:	01400104 	movi	r5,4
 80045c0:	80044600 	call	8004460 <__sfmoreglue>
 80045c4:	90800015 	stw	r2,0(r18)
 80045c8:	103fde1e 	bne	r2,zero,8004544 <__alt_data_end+0xfc004544>
 80045cc:	00800304 	movi	r2,12
 80045d0:	98800015 	stw	r2,0(r19)
 80045d4:	0005883a 	mov	r2,zero
 80045d8:	003ff006 	br	800459c <__alt_data_end+0xfc00459c>

080045dc <_cleanup>:
 80045dc:	00820074 	movhi	r2,2049
 80045e0:	10849e04 	addi	r2,r2,4728
 80045e4:	11000017 	ldw	r4,0(r2)
 80045e8:	01420074 	movhi	r5,2049
 80045ec:	29638a04 	addi	r5,r5,-29144
 80045f0:	8004efc1 	jmpi	8004efc <_fwalk>

080045f4 <__sinit>:
 80045f4:	20800e17 	ldw	r2,56(r4)
 80045f8:	10000126 	beq	r2,zero,8004600 <__sinit+0xc>
 80045fc:	f800283a 	ret
 8004600:	80042c01 	jmpi	80042c0 <__sinit.part.1>

08004604 <__sfp_lock_acquire>:
 8004604:	f800283a 	ret

08004608 <__sfp_lock_release>:
 8004608:	f800283a 	ret

0800460c <__sinit_lock_acquire>:
 800460c:	f800283a 	ret

08004610 <__sinit_lock_release>:
 8004610:	f800283a 	ret

08004614 <__fp_lock_all>:
 8004614:	00820074 	movhi	r2,2049
 8004618:	10849f04 	addi	r2,r2,4732
 800461c:	11000017 	ldw	r4,0(r2)
 8004620:	01420034 	movhi	r5,2048
 8004624:	2950a904 	addi	r5,r5,17060
 8004628:	8004efc1 	jmpi	8004efc <_fwalk>

0800462c <__fp_unlock_all>:
 800462c:	00820074 	movhi	r2,2049
 8004630:	10849f04 	addi	r2,r2,4732
 8004634:	11000017 	ldw	r4,0(r2)
 8004638:	01420034 	movhi	r5,2048
 800463c:	2950ab04 	addi	r5,r5,17068
 8004640:	8004efc1 	jmpi	8004efc <_fwalk>

08004644 <_malloc_trim_r>:
 8004644:	defffb04 	addi	sp,sp,-20
 8004648:	dcc00315 	stw	r19,12(sp)
 800464c:	04c20074 	movhi	r19,2049
 8004650:	dc800215 	stw	r18,8(sp)
 8004654:	dc400115 	stw	r17,4(sp)
 8004658:	dc000015 	stw	r16,0(sp)
 800465c:	dfc00415 	stw	ra,16(sp)
 8004660:	2821883a 	mov	r16,r5
 8004664:	9cff0f04 	addi	r19,r19,-964
 8004668:	2025883a 	mov	r18,r4
 800466c:	800cd280 	call	800cd28 <__malloc_lock>
 8004670:	98800217 	ldw	r2,8(r19)
 8004674:	14400117 	ldw	r17,4(r2)
 8004678:	00bfff04 	movi	r2,-4
 800467c:	88a2703a 	and	r17,r17,r2
 8004680:	8c21c83a 	sub	r16,r17,r16
 8004684:	8403fbc4 	addi	r16,r16,4079
 8004688:	8020d33a 	srli	r16,r16,12
 800468c:	0083ffc4 	movi	r2,4095
 8004690:	843fffc4 	addi	r16,r16,-1
 8004694:	8020933a 	slli	r16,r16,12
 8004698:	1400060e 	bge	r2,r16,80046b4 <_malloc_trim_r+0x70>
 800469c:	9009883a 	mov	r4,r18
 80046a0:	000b883a 	mov	r5,zero
 80046a4:	80074ec0 	call	80074ec <_sbrk_r>
 80046a8:	98c00217 	ldw	r3,8(r19)
 80046ac:	1c47883a 	add	r3,r3,r17
 80046b0:	10c00a26 	beq	r2,r3,80046dc <_malloc_trim_r+0x98>
 80046b4:	9009883a 	mov	r4,r18
 80046b8:	800cd480 	call	800cd48 <__malloc_unlock>
 80046bc:	0005883a 	mov	r2,zero
 80046c0:	dfc00417 	ldw	ra,16(sp)
 80046c4:	dcc00317 	ldw	r19,12(sp)
 80046c8:	dc800217 	ldw	r18,8(sp)
 80046cc:	dc400117 	ldw	r17,4(sp)
 80046d0:	dc000017 	ldw	r16,0(sp)
 80046d4:	dec00504 	addi	sp,sp,20
 80046d8:	f800283a 	ret
 80046dc:	9009883a 	mov	r4,r18
 80046e0:	040bc83a 	sub	r5,zero,r16
 80046e4:	80074ec0 	call	80074ec <_sbrk_r>
 80046e8:	00ffffc4 	movi	r3,-1
 80046ec:	10c00d26 	beq	r2,r3,8004724 <_malloc_trim_r+0xe0>
 80046f0:	00c20074 	movhi	r3,2049
 80046f4:	18cb8104 	addi	r3,r3,11780
 80046f8:	18800017 	ldw	r2,0(r3)
 80046fc:	99000217 	ldw	r4,8(r19)
 8004700:	8c23c83a 	sub	r17,r17,r16
 8004704:	8c400054 	ori	r17,r17,1
 8004708:	1421c83a 	sub	r16,r2,r16
 800470c:	24400115 	stw	r17,4(r4)
 8004710:	9009883a 	mov	r4,r18
 8004714:	1c000015 	stw	r16,0(r3)
 8004718:	800cd480 	call	800cd48 <__malloc_unlock>
 800471c:	00800044 	movi	r2,1
 8004720:	003fe706 	br	80046c0 <__alt_data_end+0xfc0046c0>
 8004724:	9009883a 	mov	r4,r18
 8004728:	000b883a 	mov	r5,zero
 800472c:	80074ec0 	call	80074ec <_sbrk_r>
 8004730:	99000217 	ldw	r4,8(r19)
 8004734:	014003c4 	movi	r5,15
 8004738:	1107c83a 	sub	r3,r2,r4
 800473c:	28ffdd0e 	bge	r5,r3,80046b4 <__alt_data_end+0xfc0046b4>
 8004740:	01420074 	movhi	r5,2049
 8004744:	2944a104 	addi	r5,r5,4740
 8004748:	29400017 	ldw	r5,0(r5)
 800474c:	18c00054 	ori	r3,r3,1
 8004750:	20c00115 	stw	r3,4(r4)
 8004754:	00c20074 	movhi	r3,2049
 8004758:	1145c83a 	sub	r2,r2,r5
 800475c:	18cb8104 	addi	r3,r3,11780
 8004760:	18800015 	stw	r2,0(r3)
 8004764:	003fd306 	br	80046b4 <__alt_data_end+0xfc0046b4>

08004768 <_free_r>:
 8004768:	28004c26 	beq	r5,zero,800489c <_free_r+0x134>
 800476c:	defffd04 	addi	sp,sp,-12
 8004770:	dc400115 	stw	r17,4(sp)
 8004774:	dc000015 	stw	r16,0(sp)
 8004778:	2023883a 	mov	r17,r4
 800477c:	2821883a 	mov	r16,r5
 8004780:	dfc00215 	stw	ra,8(sp)
 8004784:	800cd280 	call	800cd28 <__malloc_lock>
 8004788:	813fff17 	ldw	r4,-4(r16)
 800478c:	00bfff84 	movi	r2,-2
 8004790:	02420074 	movhi	r9,2049
 8004794:	81bffe04 	addi	r6,r16,-8
 8004798:	2084703a 	and	r2,r4,r2
 800479c:	4a7f0f04 	addi	r9,r9,-964
 80047a0:	308b883a 	add	r5,r6,r2
 80047a4:	2a000117 	ldw	r8,4(r5)
 80047a8:	49c00217 	ldw	r7,8(r9)
 80047ac:	00ffff04 	movi	r3,-4
 80047b0:	40c6703a 	and	r3,r8,r3
 80047b4:	39405326 	beq	r7,r5,8004904 <_free_r+0x19c>
 80047b8:	28c00115 	stw	r3,4(r5)
 80047bc:	2100004c 	andi	r4,r4,1
 80047c0:	2000091e 	bne	r4,zero,80047e8 <_free_r+0x80>
 80047c4:	81fffe17 	ldw	r7,-8(r16)
 80047c8:	4a000204 	addi	r8,r9,8
 80047cc:	31cdc83a 	sub	r6,r6,r7
 80047d0:	31000217 	ldw	r4,8(r6)
 80047d4:	11c5883a 	add	r2,r2,r7
 80047d8:	22006126 	beq	r4,r8,8004960 <_free_r+0x1f8>
 80047dc:	31c00317 	ldw	r7,12(r6)
 80047e0:	21c00315 	stw	r7,12(r4)
 80047e4:	39000215 	stw	r4,8(r7)
 80047e8:	28c9883a 	add	r4,r5,r3
 80047ec:	21c00117 	ldw	r7,4(r4)
 80047f0:	39c0004c 	andi	r7,r7,1
 80047f4:	38000d1e 	bne	r7,zero,800482c <_free_r+0xc4>
 80047f8:	29000217 	ldw	r4,8(r5)
 80047fc:	10c5883a 	add	r2,r2,r3
 8004800:	00c20074 	movhi	r3,2049
 8004804:	18ff1104 	addi	r3,r3,-956
 8004808:	20c07526 	beq	r4,r3,80049e0 <_free_r+0x278>
 800480c:	29c00317 	ldw	r7,12(r5)
 8004810:	11400054 	ori	r5,r2,1
 8004814:	3087883a 	add	r3,r6,r2
 8004818:	21c00315 	stw	r7,12(r4)
 800481c:	39000215 	stw	r4,8(r7)
 8004820:	31400115 	stw	r5,4(r6)
 8004824:	18800015 	stw	r2,0(r3)
 8004828:	00000406 	br	800483c <_free_r+0xd4>
 800482c:	10c00054 	ori	r3,r2,1
 8004830:	30c00115 	stw	r3,4(r6)
 8004834:	3087883a 	add	r3,r6,r2
 8004838:	18800015 	stw	r2,0(r3)
 800483c:	00c07fc4 	movi	r3,511
 8004840:	18801736 	bltu	r3,r2,80048a0 <_free_r+0x138>
 8004844:	1004d0fa 	srli	r2,r2,3
 8004848:	01400044 	movi	r5,1
 800484c:	49000117 	ldw	r4,4(r9)
 8004850:	1087883a 	add	r3,r2,r2
 8004854:	18c7883a 	add	r3,r3,r3
 8004858:	1005d0ba 	srai	r2,r2,2
 800485c:	18c7883a 	add	r3,r3,r3
 8004860:	1a47883a 	add	r3,r3,r9
 8004864:	19c00217 	ldw	r7,8(r3)
 8004868:	2884983a 	sll	r2,r5,r2
 800486c:	30c00315 	stw	r3,12(r6)
 8004870:	31c00215 	stw	r7,8(r6)
 8004874:	1104b03a 	or	r2,r2,r4
 8004878:	19800215 	stw	r6,8(r3)
 800487c:	48800115 	stw	r2,4(r9)
 8004880:	39800315 	stw	r6,12(r7)
 8004884:	8809883a 	mov	r4,r17
 8004888:	dfc00217 	ldw	ra,8(sp)
 800488c:	dc400117 	ldw	r17,4(sp)
 8004890:	dc000017 	ldw	r16,0(sp)
 8004894:	dec00304 	addi	sp,sp,12
 8004898:	800cd481 	jmpi	800cd48 <__malloc_unlock>
 800489c:	f800283a 	ret
 80048a0:	1006d27a 	srli	r3,r2,9
 80048a4:	01000104 	movi	r4,4
 80048a8:	20c04036 	bltu	r4,r3,80049ac <_free_r+0x244>
 80048ac:	1006d1ba 	srli	r3,r2,6
 80048b0:	19400e04 	addi	r5,r3,56
 80048b4:	2947883a 	add	r3,r5,r5
 80048b8:	18c7883a 	add	r3,r3,r3
 80048bc:	18c7883a 	add	r3,r3,r3
 80048c0:	1a49883a 	add	r4,r3,r9
 80048c4:	20c00217 	ldw	r3,8(r4)
 80048c8:	01c20074 	movhi	r7,2049
 80048cc:	39ff0f04 	addi	r7,r7,-964
 80048d0:	19003b26 	beq	r3,r4,80049c0 <_free_r+0x258>
 80048d4:	01ffff04 	movi	r7,-4
 80048d8:	19400117 	ldw	r5,4(r3)
 80048dc:	29ca703a 	and	r5,r5,r7
 80048e0:	1140022e 	bgeu	r2,r5,80048ec <_free_r+0x184>
 80048e4:	18c00217 	ldw	r3,8(r3)
 80048e8:	20fffb1e 	bne	r4,r3,80048d8 <__alt_data_end+0xfc0048d8>
 80048ec:	18800317 	ldw	r2,12(r3)
 80048f0:	30800315 	stw	r2,12(r6)
 80048f4:	30c00215 	stw	r3,8(r6)
 80048f8:	11800215 	stw	r6,8(r2)
 80048fc:	19800315 	stw	r6,12(r3)
 8004900:	003fe006 	br	8004884 <__alt_data_end+0xfc004884>
 8004904:	2100004c 	andi	r4,r4,1
 8004908:	1885883a 	add	r2,r3,r2
 800490c:	2000071e 	bne	r4,zero,800492c <_free_r+0x1c4>
 8004910:	817ffe17 	ldw	r5,-8(r16)
 8004914:	314dc83a 	sub	r6,r6,r5
 8004918:	30c00317 	ldw	r3,12(r6)
 800491c:	31000217 	ldw	r4,8(r6)
 8004920:	1145883a 	add	r2,r2,r5
 8004924:	20c00315 	stw	r3,12(r4)
 8004928:	19000215 	stw	r4,8(r3)
 800492c:	10c00054 	ori	r3,r2,1
 8004930:	30c00115 	stw	r3,4(r6)
 8004934:	00c20074 	movhi	r3,2049
 8004938:	18c4a204 	addi	r3,r3,4744
 800493c:	18c00017 	ldw	r3,0(r3)
 8004940:	49800215 	stw	r6,8(r9)
 8004944:	10ffcf36 	bltu	r2,r3,8004884 <__alt_data_end+0xfc004884>
 8004948:	00820074 	movhi	r2,2049
 800494c:	108b7904 	addi	r2,r2,11748
 8004950:	11400017 	ldw	r5,0(r2)
 8004954:	8809883a 	mov	r4,r17
 8004958:	80046440 	call	8004644 <_malloc_trim_r>
 800495c:	003fc906 	br	8004884 <__alt_data_end+0xfc004884>
 8004960:	28c9883a 	add	r4,r5,r3
 8004964:	21000117 	ldw	r4,4(r4)
 8004968:	2100004c 	andi	r4,r4,1
 800496c:	20000a1e 	bne	r4,zero,8004998 <_free_r+0x230>
 8004970:	29000317 	ldw	r4,12(r5)
 8004974:	29400217 	ldw	r5,8(r5)
 8004978:	10c5883a 	add	r2,r2,r3
 800497c:	10c00054 	ori	r3,r2,1
 8004980:	29000315 	stw	r4,12(r5)
 8004984:	21400215 	stw	r5,8(r4)
 8004988:	30c00115 	stw	r3,4(r6)
 800498c:	308d883a 	add	r6,r6,r2
 8004990:	30800015 	stw	r2,0(r6)
 8004994:	003fbb06 	br	8004884 <__alt_data_end+0xfc004884>
 8004998:	10c00054 	ori	r3,r2,1
 800499c:	30c00115 	stw	r3,4(r6)
 80049a0:	308d883a 	add	r6,r6,r2
 80049a4:	30800015 	stw	r2,0(r6)
 80049a8:	003fb606 	br	8004884 <__alt_data_end+0xfc004884>
 80049ac:	01000504 	movi	r4,20
 80049b0:	20c01436 	bltu	r4,r3,8004a04 <_free_r+0x29c>
 80049b4:	194016c4 	addi	r5,r3,91
 80049b8:	2947883a 	add	r3,r5,r5
 80049bc:	003fbe06 	br	80048b8 <__alt_data_end+0xfc0048b8>
 80049c0:	280bd0ba 	srai	r5,r5,2
 80049c4:	00800044 	movi	r2,1
 80049c8:	39000117 	ldw	r4,4(r7)
 80049cc:	114a983a 	sll	r5,r2,r5
 80049d0:	1805883a 	mov	r2,r3
 80049d4:	2908b03a 	or	r4,r5,r4
 80049d8:	39000115 	stw	r4,4(r7)
 80049dc:	003fc406 	br	80048f0 <__alt_data_end+0xfc0048f0>
 80049e0:	49800515 	stw	r6,20(r9)
 80049e4:	49800415 	stw	r6,16(r9)
 80049e8:	10c00054 	ori	r3,r2,1
 80049ec:	31000315 	stw	r4,12(r6)
 80049f0:	31000215 	stw	r4,8(r6)
 80049f4:	30c00115 	stw	r3,4(r6)
 80049f8:	308d883a 	add	r6,r6,r2
 80049fc:	30800015 	stw	r2,0(r6)
 8004a00:	003fa006 	br	8004884 <__alt_data_end+0xfc004884>
 8004a04:	01001504 	movi	r4,84
 8004a08:	20c00436 	bltu	r4,r3,8004a1c <_free_r+0x2b4>
 8004a0c:	1006d33a 	srli	r3,r2,12
 8004a10:	19401b84 	addi	r5,r3,110
 8004a14:	2947883a 	add	r3,r5,r5
 8004a18:	003fa706 	br	80048b8 <__alt_data_end+0xfc0048b8>
 8004a1c:	01005504 	movi	r4,340
 8004a20:	20c00436 	bltu	r4,r3,8004a34 <_free_r+0x2cc>
 8004a24:	1006d3fa 	srli	r3,r2,15
 8004a28:	19401dc4 	addi	r5,r3,119
 8004a2c:	2947883a 	add	r3,r5,r5
 8004a30:	003fa106 	br	80048b8 <__alt_data_end+0xfc0048b8>
 8004a34:	01015504 	movi	r4,1364
 8004a38:	20c00436 	bltu	r4,r3,8004a4c <_free_r+0x2e4>
 8004a3c:	1006d4ba 	srli	r3,r2,18
 8004a40:	19401f04 	addi	r5,r3,124
 8004a44:	2947883a 	add	r3,r5,r5
 8004a48:	003f9b06 	br	80048b8 <__alt_data_end+0xfc0048b8>
 8004a4c:	00c03f04 	movi	r3,252
 8004a50:	01401f84 	movi	r5,126
 8004a54:	003f9806 	br	80048b8 <__alt_data_end+0xfc0048b8>

08004a58 <__sfvwrite_r>:
 8004a58:	30800217 	ldw	r2,8(r6)
 8004a5c:	10004526 	beq	r2,zero,8004b74 <__sfvwrite_r+0x11c>
 8004a60:	28c0030b 	ldhu	r3,12(r5)
 8004a64:	defff404 	addi	sp,sp,-48
 8004a68:	dd400715 	stw	r21,28(sp)
 8004a6c:	dcc00515 	stw	r19,20(sp)
 8004a70:	dc000215 	stw	r16,8(sp)
 8004a74:	dfc00b15 	stw	ra,44(sp)
 8004a78:	df000a15 	stw	fp,40(sp)
 8004a7c:	ddc00915 	stw	r23,36(sp)
 8004a80:	dd800815 	stw	r22,32(sp)
 8004a84:	dd000615 	stw	r20,24(sp)
 8004a88:	dc800415 	stw	r18,16(sp)
 8004a8c:	dc400315 	stw	r17,12(sp)
 8004a90:	1880020c 	andi	r2,r3,8
 8004a94:	2821883a 	mov	r16,r5
 8004a98:	202b883a 	mov	r21,r4
 8004a9c:	3027883a 	mov	r19,r6
 8004aa0:	10002526 	beq	r2,zero,8004b38 <__sfvwrite_r+0xe0>
 8004aa4:	28800417 	ldw	r2,16(r5)
 8004aa8:	10002326 	beq	r2,zero,8004b38 <__sfvwrite_r+0xe0>
 8004aac:	1880008c 	andi	r2,r3,2
 8004ab0:	9c400017 	ldw	r17,0(r19)
 8004ab4:	10003126 	beq	r2,zero,8004b7c <__sfvwrite_r+0x124>
 8004ab8:	0029883a 	mov	r20,zero
 8004abc:	0025883a 	mov	r18,zero
 8004ac0:	05810004 	movi	r22,1024
 8004ac4:	a00d883a 	mov	r6,r20
 8004ac8:	a809883a 	mov	r4,r21
 8004acc:	90002526 	beq	r18,zero,8004b64 <__sfvwrite_r+0x10c>
 8004ad0:	900f883a 	mov	r7,r18
 8004ad4:	81400717 	ldw	r5,28(r16)
 8004ad8:	b480012e 	bgeu	r22,r18,8004ae0 <__sfvwrite_r+0x88>
 8004adc:	01c10004 	movi	r7,1024
 8004ae0:	80800917 	ldw	r2,36(r16)
 8004ae4:	103ee83a 	callr	r2
 8004ae8:	0080510e 	bge	zero,r2,8004c30 <__sfvwrite_r+0x1d8>
 8004aec:	98c00217 	ldw	r3,8(r19)
 8004af0:	a0a9883a 	add	r20,r20,r2
 8004af4:	90a5c83a 	sub	r18,r18,r2
 8004af8:	1885c83a 	sub	r2,r3,r2
 8004afc:	98800215 	stw	r2,8(r19)
 8004b00:	103ff01e 	bne	r2,zero,8004ac4 <__alt_data_end+0xfc004ac4>
 8004b04:	0005883a 	mov	r2,zero
 8004b08:	dfc00b17 	ldw	ra,44(sp)
 8004b0c:	df000a17 	ldw	fp,40(sp)
 8004b10:	ddc00917 	ldw	r23,36(sp)
 8004b14:	dd800817 	ldw	r22,32(sp)
 8004b18:	dd400717 	ldw	r21,28(sp)
 8004b1c:	dd000617 	ldw	r20,24(sp)
 8004b20:	dcc00517 	ldw	r19,20(sp)
 8004b24:	dc800417 	ldw	r18,16(sp)
 8004b28:	dc400317 	ldw	r17,12(sp)
 8004b2c:	dc000217 	ldw	r16,8(sp)
 8004b30:	dec00c04 	addi	sp,sp,48
 8004b34:	f800283a 	ret
 8004b38:	a809883a 	mov	r4,r21
 8004b3c:	800b883a 	mov	r5,r16
 8004b40:	80025f40 	call	80025f4 <__swsetup_r>
 8004b44:	80c0030b 	ldhu	r3,12(r16)
 8004b48:	103fd826 	beq	r2,zero,8004aac <__alt_data_end+0xfc004aac>
 8004b4c:	18c01014 	ori	r3,r3,64
 8004b50:	80c0030d 	sth	r3,12(r16)
 8004b54:	00c00244 	movi	r3,9
 8004b58:	00bfffc4 	movi	r2,-1
 8004b5c:	a8c00015 	stw	r3,0(r21)
 8004b60:	003fe906 	br	8004b08 <__alt_data_end+0xfc004b08>
 8004b64:	8d000017 	ldw	r20,0(r17)
 8004b68:	8c800117 	ldw	r18,4(r17)
 8004b6c:	8c400204 	addi	r17,r17,8
 8004b70:	003fd406 	br	8004ac4 <__alt_data_end+0xfc004ac4>
 8004b74:	0005883a 	mov	r2,zero
 8004b78:	f800283a 	ret
 8004b7c:	1880004c 	andi	r2,r3,1
 8004b80:	1000301e 	bne	r2,zero,8004c44 <__sfvwrite_r+0x1ec>
 8004b84:	002f883a 	mov	r23,zero
 8004b88:	0025883a 	mov	r18,zero
 8004b8c:	90001c26 	beq	r18,zero,8004c00 <__sfvwrite_r+0x1a8>
 8004b90:	1880800c 	andi	r2,r3,512
 8004b94:	85000217 	ldw	r20,8(r16)
 8004b98:	10006c26 	beq	r2,zero,8004d4c <__sfvwrite_r+0x2f4>
 8004b9c:	a02d883a 	mov	r22,r20
 8004ba0:	95008536 	bltu	r18,r20,8004db8 <__sfvwrite_r+0x360>
 8004ba4:	1881200c 	andi	r2,r3,1152
 8004ba8:	10009d1e 	bne	r2,zero,8004e20 <__sfvwrite_r+0x3c8>
 8004bac:	81000017 	ldw	r4,0(r16)
 8004bb0:	a039883a 	mov	fp,r20
 8004bb4:	9029883a 	mov	r20,r18
 8004bb8:	b80b883a 	mov	r5,r23
 8004bbc:	b00d883a 	mov	r6,r22
 8004bc0:	8005ccc0 	call	8005ccc <memmove>
 8004bc4:	80c00217 	ldw	r3,8(r16)
 8004bc8:	81000017 	ldw	r4,0(r16)
 8004bcc:	9005883a 	mov	r2,r18
 8004bd0:	1f39c83a 	sub	fp,r3,fp
 8004bd4:	258f883a 	add	r7,r4,r22
 8004bd8:	87000215 	stw	fp,8(r16)
 8004bdc:	81c00015 	stw	r7,0(r16)
 8004be0:	98c00217 	ldw	r3,8(r19)
 8004be4:	b8af883a 	add	r23,r23,r2
 8004be8:	90a5c83a 	sub	r18,r18,r2
 8004bec:	1d05c83a 	sub	r2,r3,r20
 8004bf0:	98800215 	stw	r2,8(r19)
 8004bf4:	103fc326 	beq	r2,zero,8004b04 <__alt_data_end+0xfc004b04>
 8004bf8:	80c0030b 	ldhu	r3,12(r16)
 8004bfc:	903fe41e 	bne	r18,zero,8004b90 <__alt_data_end+0xfc004b90>
 8004c00:	8dc00017 	ldw	r23,0(r17)
 8004c04:	8c800117 	ldw	r18,4(r17)
 8004c08:	8c400204 	addi	r17,r17,8
 8004c0c:	003fdf06 	br	8004b8c <__alt_data_end+0xfc004b8c>
 8004c10:	8006ed80 	call	8006ed8 <_realloc_r>
 8004c14:	102d883a 	mov	r22,r2
 8004c18:	1000a01e 	bne	r2,zero,8004e9c <__sfvwrite_r+0x444>
 8004c1c:	81400417 	ldw	r5,16(r16)
 8004c20:	a809883a 	mov	r4,r21
 8004c24:	80047680 	call	8004768 <_free_r>
 8004c28:	00800304 	movi	r2,12
 8004c2c:	a8800015 	stw	r2,0(r21)
 8004c30:	80c0030b 	ldhu	r3,12(r16)
 8004c34:	00bfffc4 	movi	r2,-1
 8004c38:	18c01014 	ori	r3,r3,64
 8004c3c:	80c0030d 	sth	r3,12(r16)
 8004c40:	003fb106 	br	8004b08 <__alt_data_end+0xfc004b08>
 8004c44:	0029883a 	mov	r20,zero
 8004c48:	0011883a 	mov	r8,zero
 8004c4c:	0039883a 	mov	fp,zero
 8004c50:	0025883a 	mov	r18,zero
 8004c54:	90001f26 	beq	r18,zero,8004cd4 <__sfvwrite_r+0x27c>
 8004c58:	40006826 	beq	r8,zero,8004dfc <__sfvwrite_r+0x3a4>
 8004c5c:	a02f883a 	mov	r23,r20
 8004c60:	9500012e 	bgeu	r18,r20,8004c68 <__sfvwrite_r+0x210>
 8004c64:	902f883a 	mov	r23,r18
 8004c68:	81000017 	ldw	r4,0(r16)
 8004c6c:	80800417 	ldw	r2,16(r16)
 8004c70:	b82d883a 	mov	r22,r23
 8004c74:	81800217 	ldw	r6,8(r16)
 8004c78:	81c00517 	ldw	r7,20(r16)
 8004c7c:	1100022e 	bgeu	r2,r4,8004c88 <__sfvwrite_r+0x230>
 8004c80:	31c7883a 	add	r3,r6,r7
 8004c84:	1dc01816 	blt	r3,r23,8004ce8 <__sfvwrite_r+0x290>
 8004c88:	b9c03f16 	blt	r23,r7,8004d88 <__sfvwrite_r+0x330>
 8004c8c:	80800917 	ldw	r2,36(r16)
 8004c90:	81400717 	ldw	r5,28(r16)
 8004c94:	a809883a 	mov	r4,r21
 8004c98:	da000115 	stw	r8,4(sp)
 8004c9c:	e00d883a 	mov	r6,fp
 8004ca0:	103ee83a 	callr	r2
 8004ca4:	102d883a 	mov	r22,r2
 8004ca8:	da000117 	ldw	r8,4(sp)
 8004cac:	00bfe00e 	bge	zero,r2,8004c30 <__alt_data_end+0xfc004c30>
 8004cb0:	a5a9c83a 	sub	r20,r20,r22
 8004cb4:	a0001f26 	beq	r20,zero,8004d34 <__sfvwrite_r+0x2dc>
 8004cb8:	98800217 	ldw	r2,8(r19)
 8004cbc:	e5b9883a 	add	fp,fp,r22
 8004cc0:	95a5c83a 	sub	r18,r18,r22
 8004cc4:	15adc83a 	sub	r22,r2,r22
 8004cc8:	9d800215 	stw	r22,8(r19)
 8004ccc:	b03f8d26 	beq	r22,zero,8004b04 <__alt_data_end+0xfc004b04>
 8004cd0:	903fe11e 	bne	r18,zero,8004c58 <__alt_data_end+0xfc004c58>
 8004cd4:	8f000017 	ldw	fp,0(r17)
 8004cd8:	8c800117 	ldw	r18,4(r17)
 8004cdc:	0011883a 	mov	r8,zero
 8004ce0:	8c400204 	addi	r17,r17,8
 8004ce4:	003fdb06 	br	8004c54 <__alt_data_end+0xfc004c54>
 8004ce8:	180d883a 	mov	r6,r3
 8004cec:	e00b883a 	mov	r5,fp
 8004cf0:	da000115 	stw	r8,4(sp)
 8004cf4:	d8c00015 	stw	r3,0(sp)
 8004cf8:	8005ccc0 	call	8005ccc <memmove>
 8004cfc:	d8c00017 	ldw	r3,0(sp)
 8004d00:	80800017 	ldw	r2,0(r16)
 8004d04:	a809883a 	mov	r4,r21
 8004d08:	800b883a 	mov	r5,r16
 8004d0c:	10c5883a 	add	r2,r2,r3
 8004d10:	80800015 	stw	r2,0(r16)
 8004d14:	d8c00015 	stw	r3,0(sp)
 8004d18:	800404c0 	call	800404c <_fflush_r>
 8004d1c:	d8c00017 	ldw	r3,0(sp)
 8004d20:	da000117 	ldw	r8,4(sp)
 8004d24:	103fc21e 	bne	r2,zero,8004c30 <__alt_data_end+0xfc004c30>
 8004d28:	182d883a 	mov	r22,r3
 8004d2c:	a5a9c83a 	sub	r20,r20,r22
 8004d30:	a03fe11e 	bne	r20,zero,8004cb8 <__alt_data_end+0xfc004cb8>
 8004d34:	a809883a 	mov	r4,r21
 8004d38:	800b883a 	mov	r5,r16
 8004d3c:	800404c0 	call	800404c <_fflush_r>
 8004d40:	103fbb1e 	bne	r2,zero,8004c30 <__alt_data_end+0xfc004c30>
 8004d44:	0011883a 	mov	r8,zero
 8004d48:	003fdb06 	br	8004cb8 <__alt_data_end+0xfc004cb8>
 8004d4c:	81000017 	ldw	r4,0(r16)
 8004d50:	80800417 	ldw	r2,16(r16)
 8004d54:	1100012e 	bgeu	r2,r4,8004d5c <__sfvwrite_r+0x304>
 8004d58:	a4805a36 	bltu	r20,r18,8004ec4 <__sfvwrite_r+0x46c>
 8004d5c:	81c00517 	ldw	r7,20(r16)
 8004d60:	91c01a36 	bltu	r18,r7,8004dcc <__sfvwrite_r+0x374>
 8004d64:	80800917 	ldw	r2,36(r16)
 8004d68:	81400717 	ldw	r5,28(r16)
 8004d6c:	a809883a 	mov	r4,r21
 8004d70:	b80d883a 	mov	r6,r23
 8004d74:	103ee83a 	callr	r2
 8004d78:	1029883a 	mov	r20,r2
 8004d7c:	00bfac0e 	bge	zero,r2,8004c30 <__alt_data_end+0xfc004c30>
 8004d80:	a005883a 	mov	r2,r20
 8004d84:	003f9606 	br	8004be0 <__alt_data_end+0xfc004be0>
 8004d88:	b80d883a 	mov	r6,r23
 8004d8c:	e00b883a 	mov	r5,fp
 8004d90:	da000115 	stw	r8,4(sp)
 8004d94:	8005ccc0 	call	8005ccc <memmove>
 8004d98:	80800217 	ldw	r2,8(r16)
 8004d9c:	80c00017 	ldw	r3,0(r16)
 8004da0:	da000117 	ldw	r8,4(sp)
 8004da4:	15c5c83a 	sub	r2,r2,r23
 8004da8:	1def883a 	add	r23,r3,r23
 8004dac:	80800215 	stw	r2,8(r16)
 8004db0:	85c00015 	stw	r23,0(r16)
 8004db4:	003fbe06 	br	8004cb0 <__alt_data_end+0xfc004cb0>
 8004db8:	81000017 	ldw	r4,0(r16)
 8004dbc:	9039883a 	mov	fp,r18
 8004dc0:	9029883a 	mov	r20,r18
 8004dc4:	902d883a 	mov	r22,r18
 8004dc8:	003f7b06 	br	8004bb8 <__alt_data_end+0xfc004bb8>
 8004dcc:	b80b883a 	mov	r5,r23
 8004dd0:	900d883a 	mov	r6,r18
 8004dd4:	8005ccc0 	call	8005ccc <memmove>
 8004dd8:	80c00217 	ldw	r3,8(r16)
 8004ddc:	80800017 	ldw	r2,0(r16)
 8004de0:	9029883a 	mov	r20,r18
 8004de4:	1c87c83a 	sub	r3,r3,r18
 8004de8:	1485883a 	add	r2,r2,r18
 8004dec:	80800015 	stw	r2,0(r16)
 8004df0:	80c00215 	stw	r3,8(r16)
 8004df4:	9005883a 	mov	r2,r18
 8004df8:	003f7906 	br	8004be0 <__alt_data_end+0xfc004be0>
 8004dfc:	e009883a 	mov	r4,fp
 8004e00:	01400284 	movi	r5,10
 8004e04:	900d883a 	mov	r6,r18
 8004e08:	8005aac0 	call	8005aac <memchr>
 8004e0c:	10003826 	beq	r2,zero,8004ef0 <__sfvwrite_r+0x498>
 8004e10:	10800044 	addi	r2,r2,1
 8004e14:	1729c83a 	sub	r20,r2,fp
 8004e18:	02000044 	movi	r8,1
 8004e1c:	003f8f06 	br	8004c5c <__alt_data_end+0xfc004c5c>
 8004e20:	80800517 	ldw	r2,20(r16)
 8004e24:	81400417 	ldw	r5,16(r16)
 8004e28:	87000017 	ldw	fp,0(r16)
 8004e2c:	10a9883a 	add	r20,r2,r2
 8004e30:	a085883a 	add	r2,r20,r2
 8004e34:	1028d7fa 	srli	r20,r2,31
 8004e38:	e179c83a 	sub	fp,fp,r5
 8004e3c:	e1000044 	addi	r4,fp,1
 8004e40:	a085883a 	add	r2,r20,r2
 8004e44:	1029d07a 	srai	r20,r2,1
 8004e48:	2485883a 	add	r2,r4,r18
 8004e4c:	a00d883a 	mov	r6,r20
 8004e50:	a080022e 	bgeu	r20,r2,8004e5c <__sfvwrite_r+0x404>
 8004e54:	1029883a 	mov	r20,r2
 8004e58:	100d883a 	mov	r6,r2
 8004e5c:	18c1000c 	andi	r3,r3,1024
 8004e60:	a809883a 	mov	r4,r21
 8004e64:	183f6a26 	beq	r3,zero,8004c10 <__alt_data_end+0xfc004c10>
 8004e68:	300b883a 	mov	r5,r6
 8004e6c:	80053040 	call	8005304 <_malloc_r>
 8004e70:	102d883a 	mov	r22,r2
 8004e74:	103f6c26 	beq	r2,zero,8004c28 <__alt_data_end+0xfc004c28>
 8004e78:	81400417 	ldw	r5,16(r16)
 8004e7c:	1009883a 	mov	r4,r2
 8004e80:	e00d883a 	mov	r6,fp
 8004e84:	8005b940 	call	8005b94 <memcpy>
 8004e88:	8080030b 	ldhu	r2,12(r16)
 8004e8c:	00fedfc4 	movi	r3,-1153
 8004e90:	10c4703a 	and	r2,r2,r3
 8004e94:	10802014 	ori	r2,r2,128
 8004e98:	8080030d 	sth	r2,12(r16)
 8004e9c:	b709883a 	add	r4,r22,fp
 8004ea0:	a707c83a 	sub	r3,r20,fp
 8004ea4:	85800415 	stw	r22,16(r16)
 8004ea8:	85000515 	stw	r20,20(r16)
 8004eac:	81000015 	stw	r4,0(r16)
 8004eb0:	9039883a 	mov	fp,r18
 8004eb4:	80c00215 	stw	r3,8(r16)
 8004eb8:	9029883a 	mov	r20,r18
 8004ebc:	902d883a 	mov	r22,r18
 8004ec0:	003f3d06 	br	8004bb8 <__alt_data_end+0xfc004bb8>
 8004ec4:	b80b883a 	mov	r5,r23
 8004ec8:	a00d883a 	mov	r6,r20
 8004ecc:	8005ccc0 	call	8005ccc <memmove>
 8004ed0:	80800017 	ldw	r2,0(r16)
 8004ed4:	a809883a 	mov	r4,r21
 8004ed8:	800b883a 	mov	r5,r16
 8004edc:	1505883a 	add	r2,r2,r20
 8004ee0:	80800015 	stw	r2,0(r16)
 8004ee4:	800404c0 	call	800404c <_fflush_r>
 8004ee8:	103fa526 	beq	r2,zero,8004d80 <__alt_data_end+0xfc004d80>
 8004eec:	003f5006 	br	8004c30 <__alt_data_end+0xfc004c30>
 8004ef0:	95000044 	addi	r20,r18,1
 8004ef4:	02000044 	movi	r8,1
 8004ef8:	003f5806 	br	8004c5c <__alt_data_end+0xfc004c5c>

08004efc <_fwalk>:
 8004efc:	defff804 	addi	sp,sp,-32
 8004f00:	dd400515 	stw	r21,20(sp)
 8004f04:	2540b804 	addi	r21,r4,736
 8004f08:	dd800615 	stw	r22,24(sp)
 8004f0c:	dd000415 	stw	r20,16(sp)
 8004f10:	dfc00715 	stw	ra,28(sp)
 8004f14:	dcc00315 	stw	r19,12(sp)
 8004f18:	dc800215 	stw	r18,8(sp)
 8004f1c:	dc400115 	stw	r17,4(sp)
 8004f20:	dc000015 	stw	r16,0(sp)
 8004f24:	2829883a 	mov	r20,r5
 8004f28:	002d883a 	mov	r22,zero
 8004f2c:	80046040 	call	8004604 <__sfp_lock_acquire>
 8004f30:	a8001426 	beq	r21,zero,8004f84 <_fwalk+0x88>
 8004f34:	04ffffc4 	movi	r19,-1
 8004f38:	ac400117 	ldw	r17,4(r21)
 8004f3c:	ac800217 	ldw	r18,8(r21)
 8004f40:	8c7fffc4 	addi	r17,r17,-1
 8004f44:	88000d16 	blt	r17,zero,8004f7c <_fwalk+0x80>
 8004f48:	94000304 	addi	r16,r18,12
 8004f4c:	94800384 	addi	r18,r18,14
 8004f50:	80c0000f 	ldh	r3,0(r16)
 8004f54:	8c7fffc4 	addi	r17,r17,-1
 8004f58:	813ffd04 	addi	r4,r16,-12
 8004f5c:	18000426 	beq	r3,zero,8004f70 <_fwalk+0x74>
 8004f60:	90c0000f 	ldh	r3,0(r18)
 8004f64:	1cc00226 	beq	r3,r19,8004f70 <_fwalk+0x74>
 8004f68:	a03ee83a 	callr	r20
 8004f6c:	b0acb03a 	or	r22,r22,r2
 8004f70:	84001a04 	addi	r16,r16,104
 8004f74:	94801a04 	addi	r18,r18,104
 8004f78:	8cfff51e 	bne	r17,r19,8004f50 <__alt_data_end+0xfc004f50>
 8004f7c:	ad400017 	ldw	r21,0(r21)
 8004f80:	a83fed1e 	bne	r21,zero,8004f38 <__alt_data_end+0xfc004f38>
 8004f84:	80046080 	call	8004608 <__sfp_lock_release>
 8004f88:	b005883a 	mov	r2,r22
 8004f8c:	dfc00717 	ldw	ra,28(sp)
 8004f90:	dd800617 	ldw	r22,24(sp)
 8004f94:	dd400517 	ldw	r21,20(sp)
 8004f98:	dd000417 	ldw	r20,16(sp)
 8004f9c:	dcc00317 	ldw	r19,12(sp)
 8004fa0:	dc800217 	ldw	r18,8(sp)
 8004fa4:	dc400117 	ldw	r17,4(sp)
 8004fa8:	dc000017 	ldw	r16,0(sp)
 8004fac:	dec00804 	addi	sp,sp,32
 8004fb0:	f800283a 	ret

08004fb4 <_fwalk_reent>:
 8004fb4:	defff804 	addi	sp,sp,-32
 8004fb8:	dd400515 	stw	r21,20(sp)
 8004fbc:	2540b804 	addi	r21,r4,736
 8004fc0:	dd800615 	stw	r22,24(sp)
 8004fc4:	dd000415 	stw	r20,16(sp)
 8004fc8:	dcc00315 	stw	r19,12(sp)
 8004fcc:	dfc00715 	stw	ra,28(sp)
 8004fd0:	dc800215 	stw	r18,8(sp)
 8004fd4:	dc400115 	stw	r17,4(sp)
 8004fd8:	dc000015 	stw	r16,0(sp)
 8004fdc:	2027883a 	mov	r19,r4
 8004fe0:	2829883a 	mov	r20,r5
 8004fe4:	002d883a 	mov	r22,zero
 8004fe8:	80046040 	call	8004604 <__sfp_lock_acquire>
 8004fec:	a8001326 	beq	r21,zero,800503c <_fwalk_reent+0x88>
 8004ff0:	04bfffc4 	movi	r18,-1
 8004ff4:	ac400117 	ldw	r17,4(r21)
 8004ff8:	ac000217 	ldw	r16,8(r21)
 8004ffc:	8c7fffc4 	addi	r17,r17,-1
 8005000:	88000c16 	blt	r17,zero,8005034 <_fwalk_reent+0x80>
 8005004:	84000304 	addi	r16,r16,12
 8005008:	80c0000f 	ldh	r3,0(r16)
 800500c:	8c7fffc4 	addi	r17,r17,-1
 8005010:	817ffd04 	addi	r5,r16,-12
 8005014:	18000526 	beq	r3,zero,800502c <_fwalk_reent+0x78>
 8005018:	80c0008f 	ldh	r3,2(r16)
 800501c:	9809883a 	mov	r4,r19
 8005020:	1c800226 	beq	r3,r18,800502c <_fwalk_reent+0x78>
 8005024:	a03ee83a 	callr	r20
 8005028:	b0acb03a 	or	r22,r22,r2
 800502c:	84001a04 	addi	r16,r16,104
 8005030:	8cbff51e 	bne	r17,r18,8005008 <__alt_data_end+0xfc005008>
 8005034:	ad400017 	ldw	r21,0(r21)
 8005038:	a83fee1e 	bne	r21,zero,8004ff4 <__alt_data_end+0xfc004ff4>
 800503c:	80046080 	call	8004608 <__sfp_lock_release>
 8005040:	b005883a 	mov	r2,r22
 8005044:	dfc00717 	ldw	ra,28(sp)
 8005048:	dd800617 	ldw	r22,24(sp)
 800504c:	dd400517 	ldw	r21,20(sp)
 8005050:	dd000417 	ldw	r20,16(sp)
 8005054:	dcc00317 	ldw	r19,12(sp)
 8005058:	dc800217 	ldw	r18,8(sp)
 800505c:	dc400117 	ldw	r17,4(sp)
 8005060:	dc000017 	ldw	r16,0(sp)
 8005064:	dec00804 	addi	sp,sp,32
 8005068:	f800283a 	ret

0800506c <_setlocale_r>:
 800506c:	30001b26 	beq	r6,zero,80050dc <_setlocale_r+0x70>
 8005070:	01420074 	movhi	r5,2049
 8005074:	defffe04 	addi	sp,sp,-8
 8005078:	297d4104 	addi	r5,r5,-2812
 800507c:	3009883a 	mov	r4,r6
 8005080:	dc000015 	stw	r16,0(sp)
 8005084:	dfc00115 	stw	ra,4(sp)
 8005088:	3021883a 	mov	r16,r6
 800508c:	800767c0 	call	800767c <strcmp>
 8005090:	1000061e 	bne	r2,zero,80050ac <_setlocale_r+0x40>
 8005094:	00820074 	movhi	r2,2049
 8005098:	10bd4004 	addi	r2,r2,-2816
 800509c:	dfc00117 	ldw	ra,4(sp)
 80050a0:	dc000017 	ldw	r16,0(sp)
 80050a4:	dec00204 	addi	sp,sp,8
 80050a8:	f800283a 	ret
 80050ac:	01420074 	movhi	r5,2049
 80050b0:	297d4004 	addi	r5,r5,-2816
 80050b4:	8009883a 	mov	r4,r16
 80050b8:	800767c0 	call	800767c <strcmp>
 80050bc:	103ff526 	beq	r2,zero,8005094 <__alt_data_end+0xfc005094>
 80050c0:	01420074 	movhi	r5,2049
 80050c4:	297d2b04 	addi	r5,r5,-2900
 80050c8:	8009883a 	mov	r4,r16
 80050cc:	800767c0 	call	800767c <strcmp>
 80050d0:	103ff026 	beq	r2,zero,8005094 <__alt_data_end+0xfc005094>
 80050d4:	0005883a 	mov	r2,zero
 80050d8:	003ff006 	br	800509c <__alt_data_end+0xfc00509c>
 80050dc:	00820074 	movhi	r2,2049
 80050e0:	10bd4004 	addi	r2,r2,-2816
 80050e4:	f800283a 	ret

080050e8 <__locale_charset>:
 80050e8:	00820074 	movhi	r2,2049
 80050ec:	10bef904 	addi	r2,r2,-1052
 80050f0:	f800283a 	ret

080050f4 <__locale_mb_cur_max>:
 80050f4:	00820074 	movhi	r2,2049
 80050f8:	1084a004 	addi	r2,r2,4736
 80050fc:	10800017 	ldw	r2,0(r2)
 8005100:	f800283a 	ret

08005104 <__locale_msgcharset>:
 8005104:	00820074 	movhi	r2,2049
 8005108:	10bef104 	addi	r2,r2,-1084
 800510c:	f800283a 	ret

08005110 <__locale_cjk_lang>:
 8005110:	0005883a 	mov	r2,zero
 8005114:	f800283a 	ret

08005118 <_localeconv_r>:
 8005118:	00820074 	movhi	r2,2049
 800511c:	10bf0104 	addi	r2,r2,-1020
 8005120:	f800283a 	ret

08005124 <setlocale>:
 8005124:	00c20074 	movhi	r3,2049
 8005128:	18c49f04 	addi	r3,r3,4732
 800512c:	2005883a 	mov	r2,r4
 8005130:	19000017 	ldw	r4,0(r3)
 8005134:	280d883a 	mov	r6,r5
 8005138:	100b883a 	mov	r5,r2
 800513c:	800506c1 	jmpi	800506c <_setlocale_r>

08005140 <localeconv>:
 8005140:	00820074 	movhi	r2,2049
 8005144:	10bf0104 	addi	r2,r2,-1020
 8005148:	f800283a 	ret

0800514c <__smakebuf_r>:
 800514c:	2880030b 	ldhu	r2,12(r5)
 8005150:	10c0008c 	andi	r3,r2,2
 8005154:	1800401e 	bne	r3,zero,8005258 <__smakebuf_r+0x10c>
 8005158:	deffec04 	addi	sp,sp,-80
 800515c:	dc000f15 	stw	r16,60(sp)
 8005160:	2821883a 	mov	r16,r5
 8005164:	2940038f 	ldh	r5,14(r5)
 8005168:	dc401015 	stw	r17,64(sp)
 800516c:	dfc01315 	stw	ra,76(sp)
 8005170:	dcc01215 	stw	r19,72(sp)
 8005174:	dc801115 	stw	r18,68(sp)
 8005178:	2023883a 	mov	r17,r4
 800517c:	28001b16 	blt	r5,zero,80051ec <__smakebuf_r+0xa0>
 8005180:	d80d883a 	mov	r6,sp
 8005184:	80090180 	call	8009018 <_fstat_r>
 8005188:	10001716 	blt	r2,zero,80051e8 <__smakebuf_r+0x9c>
 800518c:	d8800117 	ldw	r2,4(sp)
 8005190:	00e00014 	movui	r3,32768
 8005194:	10bc000c 	andi	r2,r2,61440
 8005198:	10c03726 	beq	r2,r3,8005278 <__smakebuf_r+0x12c>
 800519c:	80c0030b 	ldhu	r3,12(r16)
 80051a0:	18c20014 	ori	r3,r3,2048
 80051a4:	80c0030d 	sth	r3,12(r16)
 80051a8:	00c80004 	movi	r3,8192
 80051ac:	10c03c1e 	bne	r2,r3,80052a0 <__smakebuf_r+0x154>
 80051b0:	8140038f 	ldh	r5,14(r16)
 80051b4:	8809883a 	mov	r4,r17
 80051b8:	80090700 	call	8009070 <_isatty_r>
 80051bc:	10004e26 	beq	r2,zero,80052f8 <__smakebuf_r+0x1ac>
 80051c0:	8080030b 	ldhu	r2,12(r16)
 80051c4:	04c00044 	movi	r19,1
 80051c8:	80c010c4 	addi	r3,r16,67
 80051cc:	14c4b03a 	or	r2,r2,r19
 80051d0:	8080030d 	sth	r2,12(r16)
 80051d4:	80c00015 	stw	r3,0(r16)
 80051d8:	80c00415 	stw	r3,16(r16)
 80051dc:	84c00515 	stw	r19,20(r16)
 80051e0:	04810004 	movi	r18,1024
 80051e4:	00000706 	br	8005204 <__smakebuf_r+0xb8>
 80051e8:	8080030b 	ldhu	r2,12(r16)
 80051ec:	10c0200c 	andi	r3,r2,128
 80051f0:	18001f1e 	bne	r3,zero,8005270 <__smakebuf_r+0x124>
 80051f4:	04810004 	movi	r18,1024
 80051f8:	10820014 	ori	r2,r2,2048
 80051fc:	8080030d 	sth	r2,12(r16)
 8005200:	0027883a 	mov	r19,zero
 8005204:	8809883a 	mov	r4,r17
 8005208:	900b883a 	mov	r5,r18
 800520c:	80053040 	call	8005304 <_malloc_r>
 8005210:	10002e26 	beq	r2,zero,80052cc <__smakebuf_r+0x180>
 8005214:	80c0030b 	ldhu	r3,12(r16)
 8005218:	01020034 	movhi	r4,2048
 800521c:	2110ad04 	addi	r4,r4,17076
 8005220:	89000f15 	stw	r4,60(r17)
 8005224:	18c02014 	ori	r3,r3,128
 8005228:	80c0030d 	sth	r3,12(r16)
 800522c:	80800015 	stw	r2,0(r16)
 8005230:	80800415 	stw	r2,16(r16)
 8005234:	84800515 	stw	r18,20(r16)
 8005238:	98001c1e 	bne	r19,zero,80052ac <__smakebuf_r+0x160>
 800523c:	dfc01317 	ldw	ra,76(sp)
 8005240:	dcc01217 	ldw	r19,72(sp)
 8005244:	dc801117 	ldw	r18,68(sp)
 8005248:	dc401017 	ldw	r17,64(sp)
 800524c:	dc000f17 	ldw	r16,60(sp)
 8005250:	dec01404 	addi	sp,sp,80
 8005254:	f800283a 	ret
 8005258:	288010c4 	addi	r2,r5,67
 800525c:	28800015 	stw	r2,0(r5)
 8005260:	28800415 	stw	r2,16(r5)
 8005264:	00800044 	movi	r2,1
 8005268:	28800515 	stw	r2,20(r5)
 800526c:	f800283a 	ret
 8005270:	04801004 	movi	r18,64
 8005274:	003fe006 	br	80051f8 <__alt_data_end+0xfc0051f8>
 8005278:	81000a17 	ldw	r4,40(r16)
 800527c:	00c20034 	movhi	r3,2048
 8005280:	18dd8604 	addi	r3,r3,30232
 8005284:	20ffc51e 	bne	r4,r3,800519c <__alt_data_end+0xfc00519c>
 8005288:	80c0030b 	ldhu	r3,12(r16)
 800528c:	01010004 	movi	r4,1024
 8005290:	81001315 	stw	r4,76(r16)
 8005294:	1906b03a 	or	r3,r3,r4
 8005298:	80c0030d 	sth	r3,12(r16)
 800529c:	003fc206 	br	80051a8 <__alt_data_end+0xfc0051a8>
 80052a0:	0027883a 	mov	r19,zero
 80052a4:	04810004 	movi	r18,1024
 80052a8:	003fd606 	br	8005204 <__alt_data_end+0xfc005204>
 80052ac:	8140038f 	ldh	r5,14(r16)
 80052b0:	8809883a 	mov	r4,r17
 80052b4:	80090700 	call	8009070 <_isatty_r>
 80052b8:	103fe026 	beq	r2,zero,800523c <__alt_data_end+0xfc00523c>
 80052bc:	8080030b 	ldhu	r2,12(r16)
 80052c0:	10800054 	ori	r2,r2,1
 80052c4:	8080030d 	sth	r2,12(r16)
 80052c8:	003fdc06 	br	800523c <__alt_data_end+0xfc00523c>
 80052cc:	8080030b 	ldhu	r2,12(r16)
 80052d0:	10c0800c 	andi	r3,r2,512
 80052d4:	183fd91e 	bne	r3,zero,800523c <__alt_data_end+0xfc00523c>
 80052d8:	10800094 	ori	r2,r2,2
 80052dc:	80c010c4 	addi	r3,r16,67
 80052e0:	8080030d 	sth	r2,12(r16)
 80052e4:	00800044 	movi	r2,1
 80052e8:	80c00015 	stw	r3,0(r16)
 80052ec:	80c00415 	stw	r3,16(r16)
 80052f0:	80800515 	stw	r2,20(r16)
 80052f4:	003fd106 	br	800523c <__alt_data_end+0xfc00523c>
 80052f8:	04c00044 	movi	r19,1
 80052fc:	04810004 	movi	r18,1024
 8005300:	003fc006 	br	8005204 <__alt_data_end+0xfc005204>

08005304 <_malloc_r>:
 8005304:	defff504 	addi	sp,sp,-44
 8005308:	dc800315 	stw	r18,12(sp)
 800530c:	dfc00a15 	stw	ra,40(sp)
 8005310:	df000915 	stw	fp,36(sp)
 8005314:	ddc00815 	stw	r23,32(sp)
 8005318:	dd800715 	stw	r22,28(sp)
 800531c:	dd400615 	stw	r21,24(sp)
 8005320:	dd000515 	stw	r20,20(sp)
 8005324:	dcc00415 	stw	r19,16(sp)
 8005328:	dc400215 	stw	r17,8(sp)
 800532c:	dc000115 	stw	r16,4(sp)
 8005330:	288002c4 	addi	r2,r5,11
 8005334:	00c00584 	movi	r3,22
 8005338:	2025883a 	mov	r18,r4
 800533c:	18802a2e 	bgeu	r3,r2,80053e8 <_malloc_r+0xe4>
 8005340:	047ffe04 	movi	r17,-8
 8005344:	1462703a 	and	r17,r2,r17
 8005348:	88009e16 	blt	r17,zero,80055c4 <_malloc_r+0x2c0>
 800534c:	89409d36 	bltu	r17,r5,80055c4 <_malloc_r+0x2c0>
 8005350:	800cd280 	call	800cd28 <__malloc_lock>
 8005354:	00807dc4 	movi	r2,503
 8005358:	14402736 	bltu	r2,r17,80053f8 <_malloc_r+0xf4>
 800535c:	8806d0fa 	srli	r3,r17,3
 8005360:	04c20074 	movhi	r19,2049
 8005364:	9cff0f04 	addi	r19,r19,-964
 8005368:	18c5883a 	add	r2,r3,r3
 800536c:	1085883a 	add	r2,r2,r2
 8005370:	1085883a 	add	r2,r2,r2
 8005374:	9885883a 	add	r2,r19,r2
 8005378:	14000317 	ldw	r16,12(r2)
 800537c:	80814a26 	beq	r16,r2,80058a8 <_malloc_r+0x5a4>
 8005380:	80c00117 	ldw	r3,4(r16)
 8005384:	81000317 	ldw	r4,12(r16)
 8005388:	00bfff04 	movi	r2,-4
 800538c:	1884703a 	and	r2,r3,r2
 8005390:	81400217 	ldw	r5,8(r16)
 8005394:	8085883a 	add	r2,r16,r2
 8005398:	10c00117 	ldw	r3,4(r2)
 800539c:	29000315 	stw	r4,12(r5)
 80053a0:	21400215 	stw	r5,8(r4)
 80053a4:	18c00054 	ori	r3,r3,1
 80053a8:	10c00115 	stw	r3,4(r2)
 80053ac:	9009883a 	mov	r4,r18
 80053b0:	800cd480 	call	800cd48 <__malloc_unlock>
 80053b4:	80800204 	addi	r2,r16,8
 80053b8:	dfc00a17 	ldw	ra,40(sp)
 80053bc:	df000917 	ldw	fp,36(sp)
 80053c0:	ddc00817 	ldw	r23,32(sp)
 80053c4:	dd800717 	ldw	r22,28(sp)
 80053c8:	dd400617 	ldw	r21,24(sp)
 80053cc:	dd000517 	ldw	r20,20(sp)
 80053d0:	dcc00417 	ldw	r19,16(sp)
 80053d4:	dc800317 	ldw	r18,12(sp)
 80053d8:	dc400217 	ldw	r17,8(sp)
 80053dc:	dc000117 	ldw	r16,4(sp)
 80053e0:	dec00b04 	addi	sp,sp,44
 80053e4:	f800283a 	ret
 80053e8:	04400404 	movi	r17,16
 80053ec:	89407536 	bltu	r17,r5,80055c4 <_malloc_r+0x2c0>
 80053f0:	800cd280 	call	800cd28 <__malloc_lock>
 80053f4:	003fd906 	br	800535c <__alt_data_end+0xfc00535c>
 80053f8:	8806d27a 	srli	r3,r17,9
 80053fc:	18007526 	beq	r3,zero,80055d4 <_malloc_r+0x2d0>
 8005400:	00800104 	movi	r2,4
 8005404:	10c0ef36 	bltu	r2,r3,80057c4 <_malloc_r+0x4c0>
 8005408:	8806d1ba 	srli	r3,r17,6
 800540c:	19c00e04 	addi	r7,r3,56
 8005410:	39cb883a 	add	r5,r7,r7
 8005414:	04c20074 	movhi	r19,2049
 8005418:	294b883a 	add	r5,r5,r5
 800541c:	9cff0f04 	addi	r19,r19,-964
 8005420:	294b883a 	add	r5,r5,r5
 8005424:	994b883a 	add	r5,r19,r5
 8005428:	2c000317 	ldw	r16,12(r5)
 800542c:	2c000e26 	beq	r5,r16,8005468 <_malloc_r+0x164>
 8005430:	80800117 	ldw	r2,4(r16)
 8005434:	01bfff04 	movi	r6,-4
 8005438:	010003c4 	movi	r4,15
 800543c:	1184703a 	and	r2,r2,r6
 8005440:	1447c83a 	sub	r3,r2,r17
 8005444:	20c00716 	blt	r4,r3,8005464 <_malloc_r+0x160>
 8005448:	1800650e 	bge	r3,zero,80055e0 <_malloc_r+0x2dc>
 800544c:	84000317 	ldw	r16,12(r16)
 8005450:	2c000526 	beq	r5,r16,8005468 <_malloc_r+0x164>
 8005454:	80800117 	ldw	r2,4(r16)
 8005458:	1184703a 	and	r2,r2,r6
 800545c:	1447c83a 	sub	r3,r2,r17
 8005460:	20fff90e 	bge	r4,r3,8005448 <__alt_data_end+0xfc005448>
 8005464:	39ffffc4 	addi	r7,r7,-1
 8005468:	38c00044 	addi	r3,r7,1
 800546c:	01820074 	movhi	r6,2049
 8005470:	9c000417 	ldw	r16,16(r19)
 8005474:	31bf0f04 	addi	r6,r6,-964
 8005478:	32400204 	addi	r9,r6,8
 800547c:	82410326 	beq	r16,r9,800588c <_malloc_r+0x588>
 8005480:	81000117 	ldw	r4,4(r16)
 8005484:	00bfff04 	movi	r2,-4
 8005488:	208e703a 	and	r7,r4,r2
 800548c:	3c45c83a 	sub	r2,r7,r17
 8005490:	010003c4 	movi	r4,15
 8005494:	2080ee16 	blt	r4,r2,8005850 <_malloc_r+0x54c>
 8005498:	32400515 	stw	r9,20(r6)
 800549c:	32400415 	stw	r9,16(r6)
 80054a0:	1000510e 	bge	r2,zero,80055e8 <_malloc_r+0x2e4>
 80054a4:	00807fc4 	movi	r2,511
 80054a8:	11c0ce36 	bltu	r2,r7,80057e4 <_malloc_r+0x4e0>
 80054ac:	3808d0fa 	srli	r4,r7,3
 80054b0:	01c00044 	movi	r7,1
 80054b4:	30800117 	ldw	r2,4(r6)
 80054b8:	210b883a 	add	r5,r4,r4
 80054bc:	294b883a 	add	r5,r5,r5
 80054c0:	2009d0ba 	srai	r4,r4,2
 80054c4:	294b883a 	add	r5,r5,r5
 80054c8:	298b883a 	add	r5,r5,r6
 80054cc:	2a000217 	ldw	r8,8(r5)
 80054d0:	3908983a 	sll	r4,r7,r4
 80054d4:	81400315 	stw	r5,12(r16)
 80054d8:	82000215 	stw	r8,8(r16)
 80054dc:	2088b03a 	or	r4,r4,r2
 80054e0:	2c000215 	stw	r16,8(r5)
 80054e4:	31000115 	stw	r4,4(r6)
 80054e8:	44000315 	stw	r16,12(r8)
 80054ec:	1805d0ba 	srai	r2,r3,2
 80054f0:	01400044 	movi	r5,1
 80054f4:	288a983a 	sll	r5,r5,r2
 80054f8:	21404336 	bltu	r4,r5,8005608 <_malloc_r+0x304>
 80054fc:	2144703a 	and	r2,r4,r5
 8005500:	10000a1e 	bne	r2,zero,800552c <_malloc_r+0x228>
 8005504:	00bfff04 	movi	r2,-4
 8005508:	294b883a 	add	r5,r5,r5
 800550c:	1886703a 	and	r3,r3,r2
 8005510:	2144703a 	and	r2,r4,r5
 8005514:	18c00104 	addi	r3,r3,4
 8005518:	1000041e 	bne	r2,zero,800552c <_malloc_r+0x228>
 800551c:	294b883a 	add	r5,r5,r5
 8005520:	2144703a 	and	r2,r4,r5
 8005524:	18c00104 	addi	r3,r3,4
 8005528:	103ffc26 	beq	r2,zero,800551c <__alt_data_end+0xfc00551c>
 800552c:	023fff04 	movi	r8,-4
 8005530:	01c003c4 	movi	r7,15
 8005534:	18c5883a 	add	r2,r3,r3
 8005538:	1085883a 	add	r2,r2,r2
 800553c:	1085883a 	add	r2,r2,r2
 8005540:	9895883a 	add	r10,r19,r2
 8005544:	52c00304 	addi	r11,r10,12
 8005548:	1819883a 	mov	r12,r3
 800554c:	5c000017 	ldw	r16,0(r11)
 8005550:	59bffd04 	addi	r6,r11,-12
 8005554:	8180041e 	bne	r16,r6,8005568 <_malloc_r+0x264>
 8005558:	0000ce06 	br	8005894 <_malloc_r+0x590>
 800555c:	2000d70e 	bge	r4,zero,80058bc <_malloc_r+0x5b8>
 8005560:	84000317 	ldw	r16,12(r16)
 8005564:	8180cb26 	beq	r16,r6,8005894 <_malloc_r+0x590>
 8005568:	80800117 	ldw	r2,4(r16)
 800556c:	1204703a 	and	r2,r2,r8
 8005570:	1449c83a 	sub	r4,r2,r17
 8005574:	393ff90e 	bge	r7,r4,800555c <__alt_data_end+0xfc00555c>
 8005578:	80800317 	ldw	r2,12(r16)
 800557c:	80c00217 	ldw	r3,8(r16)
 8005580:	89400054 	ori	r5,r17,1
 8005584:	81400115 	stw	r5,4(r16)
 8005588:	18800315 	stw	r2,12(r3)
 800558c:	10c00215 	stw	r3,8(r2)
 8005590:	8463883a 	add	r17,r16,r17
 8005594:	9c400515 	stw	r17,20(r19)
 8005598:	9c400415 	stw	r17,16(r19)
 800559c:	20800054 	ori	r2,r4,1
 80055a0:	88800115 	stw	r2,4(r17)
 80055a4:	8a400315 	stw	r9,12(r17)
 80055a8:	8a400215 	stw	r9,8(r17)
 80055ac:	8923883a 	add	r17,r17,r4
 80055b0:	89000015 	stw	r4,0(r17)
 80055b4:	9009883a 	mov	r4,r18
 80055b8:	800cd480 	call	800cd48 <__malloc_unlock>
 80055bc:	80800204 	addi	r2,r16,8
 80055c0:	003f7d06 	br	80053b8 <__alt_data_end+0xfc0053b8>
 80055c4:	00800304 	movi	r2,12
 80055c8:	90800015 	stw	r2,0(r18)
 80055cc:	0005883a 	mov	r2,zero
 80055d0:	003f7906 	br	80053b8 <__alt_data_end+0xfc0053b8>
 80055d4:	01401f84 	movi	r5,126
 80055d8:	01c00fc4 	movi	r7,63
 80055dc:	003f8d06 	br	8005414 <__alt_data_end+0xfc005414>
 80055e0:	81000317 	ldw	r4,12(r16)
 80055e4:	003f6a06 	br	8005390 <__alt_data_end+0xfc005390>
 80055e8:	81c5883a 	add	r2,r16,r7
 80055ec:	10c00117 	ldw	r3,4(r2)
 80055f0:	9009883a 	mov	r4,r18
 80055f4:	18c00054 	ori	r3,r3,1
 80055f8:	10c00115 	stw	r3,4(r2)
 80055fc:	800cd480 	call	800cd48 <__malloc_unlock>
 8005600:	80800204 	addi	r2,r16,8
 8005604:	003f6c06 	br	80053b8 <__alt_data_end+0xfc0053b8>
 8005608:	9c000217 	ldw	r16,8(r19)
 800560c:	00bfff04 	movi	r2,-4
 8005610:	85800117 	ldw	r22,4(r16)
 8005614:	b0ac703a 	and	r22,r22,r2
 8005618:	b4400336 	bltu	r22,r17,8005628 <_malloc_r+0x324>
 800561c:	b445c83a 	sub	r2,r22,r17
 8005620:	00c003c4 	movi	r3,15
 8005624:	18805d16 	blt	r3,r2,800579c <_malloc_r+0x498>
 8005628:	05c20074 	movhi	r23,2049
 800562c:	00820074 	movhi	r2,2049
 8005630:	bdc4a104 	addi	r23,r23,4740
 8005634:	108b7904 	addi	r2,r2,11748
 8005638:	15400017 	ldw	r21,0(r2)
 800563c:	b9000017 	ldw	r4,0(r23)
 8005640:	00ffffc4 	movi	r3,-1
 8005644:	858d883a 	add	r6,r16,r22
 8005648:	8d6b883a 	add	r21,r17,r21
 800564c:	20c0e426 	beq	r4,r3,80059e0 <_malloc_r+0x6dc>
 8005650:	ad4403c4 	addi	r21,r21,4111
 8005654:	00fc0004 	movi	r3,-4096
 8005658:	a8ea703a 	and	r21,r21,r3
 800565c:	9009883a 	mov	r4,r18
 8005660:	a80b883a 	mov	r5,r21
 8005664:	d9800015 	stw	r6,0(sp)
 8005668:	80074ec0 	call	80074ec <_sbrk_r>
 800566c:	00ffffc4 	movi	r3,-1
 8005670:	1029883a 	mov	r20,r2
 8005674:	d9800017 	ldw	r6,0(sp)
 8005678:	10c0a426 	beq	r2,r3,800590c <_malloc_r+0x608>
 800567c:	1180a236 	bltu	r2,r6,8005908 <_malloc_r+0x604>
 8005680:	07020074 	movhi	fp,2049
 8005684:	e70b8104 	addi	fp,fp,11780
 8005688:	e0c00017 	ldw	r3,0(fp)
 800568c:	a8c7883a 	add	r3,r21,r3
 8005690:	e0c00015 	stw	r3,0(fp)
 8005694:	3500da26 	beq	r6,r20,8005a00 <_malloc_r+0x6fc>
 8005698:	b9000017 	ldw	r4,0(r23)
 800569c:	00bfffc4 	movi	r2,-1
 80056a0:	2080e426 	beq	r4,r2,8005a34 <_malloc_r+0x730>
 80056a4:	a185c83a 	sub	r2,r20,r6
 80056a8:	1885883a 	add	r2,r3,r2
 80056ac:	e0800015 	stw	r2,0(fp)
 80056b0:	a0c001cc 	andi	r3,r20,7
 80056b4:	1800b526 	beq	r3,zero,800598c <_malloc_r+0x688>
 80056b8:	a0e9c83a 	sub	r20,r20,r3
 80056bc:	00840204 	movi	r2,4104
 80056c0:	a5000204 	addi	r20,r20,8
 80056c4:	10c7c83a 	sub	r3,r2,r3
 80056c8:	a545883a 	add	r2,r20,r21
 80056cc:	1083ffcc 	andi	r2,r2,4095
 80056d0:	18abc83a 	sub	r21,r3,r2
 80056d4:	9009883a 	mov	r4,r18
 80056d8:	a80b883a 	mov	r5,r21
 80056dc:	80074ec0 	call	80074ec <_sbrk_r>
 80056e0:	00ffffc4 	movi	r3,-1
 80056e4:	10c0d026 	beq	r2,r3,8005a28 <_malloc_r+0x724>
 80056e8:	1507c83a 	sub	r3,r2,r20
 80056ec:	a8c7883a 	add	r3,r21,r3
 80056f0:	18c00054 	ori	r3,r3,1
 80056f4:	e0800017 	ldw	r2,0(fp)
 80056f8:	9d000215 	stw	r20,8(r19)
 80056fc:	a0c00115 	stw	r3,4(r20)
 8005700:	a887883a 	add	r3,r21,r2
 8005704:	e0c00015 	stw	r3,0(fp)
 8005708:	84c00e26 	beq	r16,r19,8005744 <_malloc_r+0x440>
 800570c:	018003c4 	movi	r6,15
 8005710:	3580a02e 	bgeu	r6,r22,8005994 <_malloc_r+0x690>
 8005714:	81400117 	ldw	r5,4(r16)
 8005718:	013ffe04 	movi	r4,-8
 800571c:	b0bffd04 	addi	r2,r22,-12
 8005720:	1104703a 	and	r2,r2,r4
 8005724:	2900004c 	andi	r4,r5,1
 8005728:	1108b03a 	or	r4,r2,r4
 800572c:	81000115 	stw	r4,4(r16)
 8005730:	01400144 	movi	r5,5
 8005734:	8089883a 	add	r4,r16,r2
 8005738:	21400115 	stw	r5,4(r4)
 800573c:	21400215 	stw	r5,8(r4)
 8005740:	3080c036 	bltu	r6,r2,8005a44 <_malloc_r+0x740>
 8005744:	00820074 	movhi	r2,2049
 8005748:	108b7804 	addi	r2,r2,11744
 800574c:	11000017 	ldw	r4,0(r2)
 8005750:	20c0012e 	bgeu	r4,r3,8005758 <_malloc_r+0x454>
 8005754:	10c00015 	stw	r3,0(r2)
 8005758:	00820074 	movhi	r2,2049
 800575c:	108b7704 	addi	r2,r2,11740
 8005760:	11000017 	ldw	r4,0(r2)
 8005764:	9c000217 	ldw	r16,8(r19)
 8005768:	20c0012e 	bgeu	r4,r3,8005770 <_malloc_r+0x46c>
 800576c:	10c00015 	stw	r3,0(r2)
 8005770:	80c00117 	ldw	r3,4(r16)
 8005774:	00bfff04 	movi	r2,-4
 8005778:	1886703a 	and	r3,r3,r2
 800577c:	1c45c83a 	sub	r2,r3,r17
 8005780:	1c400236 	bltu	r3,r17,800578c <_malloc_r+0x488>
 8005784:	00c003c4 	movi	r3,15
 8005788:	18800416 	blt	r3,r2,800579c <_malloc_r+0x498>
 800578c:	9009883a 	mov	r4,r18
 8005790:	800cd480 	call	800cd48 <__malloc_unlock>
 8005794:	0005883a 	mov	r2,zero
 8005798:	003f0706 	br	80053b8 <__alt_data_end+0xfc0053b8>
 800579c:	88c00054 	ori	r3,r17,1
 80057a0:	80c00115 	stw	r3,4(r16)
 80057a4:	8463883a 	add	r17,r16,r17
 80057a8:	10800054 	ori	r2,r2,1
 80057ac:	9c400215 	stw	r17,8(r19)
 80057b0:	88800115 	stw	r2,4(r17)
 80057b4:	9009883a 	mov	r4,r18
 80057b8:	800cd480 	call	800cd48 <__malloc_unlock>
 80057bc:	80800204 	addi	r2,r16,8
 80057c0:	003efd06 	br	80053b8 <__alt_data_end+0xfc0053b8>
 80057c4:	00800504 	movi	r2,20
 80057c8:	10c0482e 	bgeu	r2,r3,80058ec <_malloc_r+0x5e8>
 80057cc:	00801504 	movi	r2,84
 80057d0:	10c06836 	bltu	r2,r3,8005974 <_malloc_r+0x670>
 80057d4:	8806d33a 	srli	r3,r17,12
 80057d8:	19c01b84 	addi	r7,r3,110
 80057dc:	39cb883a 	add	r5,r7,r7
 80057e0:	003f0c06 	br	8005414 <__alt_data_end+0xfc005414>
 80057e4:	3804d27a 	srli	r2,r7,9
 80057e8:	01000104 	movi	r4,4
 80057ec:	2080422e 	bgeu	r4,r2,80058f8 <_malloc_r+0x5f4>
 80057f0:	01000504 	movi	r4,20
 80057f4:	20807c36 	bltu	r4,r2,80059e8 <_malloc_r+0x6e4>
 80057f8:	110016c4 	addi	r4,r2,91
 80057fc:	210b883a 	add	r5,r4,r4
 8005800:	294b883a 	add	r5,r5,r5
 8005804:	294b883a 	add	r5,r5,r5
 8005808:	994b883a 	add	r5,r19,r5
 800580c:	28800217 	ldw	r2,8(r5)
 8005810:	02020074 	movhi	r8,2049
 8005814:	423f0f04 	addi	r8,r8,-964
 8005818:	11406326 	beq	r2,r5,80059a8 <_malloc_r+0x6a4>
 800581c:	01bfff04 	movi	r6,-4
 8005820:	11000117 	ldw	r4,4(r2)
 8005824:	2188703a 	and	r4,r4,r6
 8005828:	3900022e 	bgeu	r7,r4,8005834 <_malloc_r+0x530>
 800582c:	10800217 	ldw	r2,8(r2)
 8005830:	28bffb1e 	bne	r5,r2,8005820 <__alt_data_end+0xfc005820>
 8005834:	11800317 	ldw	r6,12(r2)
 8005838:	99000117 	ldw	r4,4(r19)
 800583c:	81800315 	stw	r6,12(r16)
 8005840:	80800215 	stw	r2,8(r16)
 8005844:	34000215 	stw	r16,8(r6)
 8005848:	14000315 	stw	r16,12(r2)
 800584c:	003f2706 	br	80054ec <__alt_data_end+0xfc0054ec>
 8005850:	88c00054 	ori	r3,r17,1
 8005854:	80c00115 	stw	r3,4(r16)
 8005858:	8463883a 	add	r17,r16,r17
 800585c:	34400515 	stw	r17,20(r6)
 8005860:	34400415 	stw	r17,16(r6)
 8005864:	10c00054 	ori	r3,r2,1
 8005868:	8a400315 	stw	r9,12(r17)
 800586c:	8a400215 	stw	r9,8(r17)
 8005870:	88c00115 	stw	r3,4(r17)
 8005874:	88a3883a 	add	r17,r17,r2
 8005878:	88800015 	stw	r2,0(r17)
 800587c:	9009883a 	mov	r4,r18
 8005880:	800cd480 	call	800cd48 <__malloc_unlock>
 8005884:	80800204 	addi	r2,r16,8
 8005888:	003ecb06 	br	80053b8 <__alt_data_end+0xfc0053b8>
 800588c:	31000117 	ldw	r4,4(r6)
 8005890:	003f1606 	br	80054ec <__alt_data_end+0xfc0054ec>
 8005894:	63000044 	addi	r12,r12,1
 8005898:	608000cc 	andi	r2,r12,3
 800589c:	5ac00204 	addi	r11,r11,8
 80058a0:	103f2a1e 	bne	r2,zero,800554c <__alt_data_end+0xfc00554c>
 80058a4:	00002106 	br	800592c <_malloc_r+0x628>
 80058a8:	80800204 	addi	r2,r16,8
 80058ac:	84000517 	ldw	r16,20(r16)
 80058b0:	143eb31e 	bne	r2,r16,8005380 <__alt_data_end+0xfc005380>
 80058b4:	18c00084 	addi	r3,r3,2
 80058b8:	003eec06 	br	800546c <__alt_data_end+0xfc00546c>
 80058bc:	8085883a 	add	r2,r16,r2
 80058c0:	10c00117 	ldw	r3,4(r2)
 80058c4:	81000317 	ldw	r4,12(r16)
 80058c8:	81400217 	ldw	r5,8(r16)
 80058cc:	18c00054 	ori	r3,r3,1
 80058d0:	10c00115 	stw	r3,4(r2)
 80058d4:	29000315 	stw	r4,12(r5)
 80058d8:	21400215 	stw	r5,8(r4)
 80058dc:	9009883a 	mov	r4,r18
 80058e0:	800cd480 	call	800cd48 <__malloc_unlock>
 80058e4:	80800204 	addi	r2,r16,8
 80058e8:	003eb306 	br	80053b8 <__alt_data_end+0xfc0053b8>
 80058ec:	19c016c4 	addi	r7,r3,91
 80058f0:	39cb883a 	add	r5,r7,r7
 80058f4:	003ec706 	br	8005414 <__alt_data_end+0xfc005414>
 80058f8:	3804d1ba 	srli	r2,r7,6
 80058fc:	11000e04 	addi	r4,r2,56
 8005900:	210b883a 	add	r5,r4,r4
 8005904:	003fbe06 	br	8005800 <__alt_data_end+0xfc005800>
 8005908:	84ff5d26 	beq	r16,r19,8005680 <__alt_data_end+0xfc005680>
 800590c:	9c000217 	ldw	r16,8(r19)
 8005910:	00bfff04 	movi	r2,-4
 8005914:	80c00117 	ldw	r3,4(r16)
 8005918:	1886703a 	and	r3,r3,r2
 800591c:	003f9706 	br	800577c <__alt_data_end+0xfc00577c>
 8005920:	52800017 	ldw	r10,0(r10)
 8005924:	18ffffc4 	addi	r3,r3,-1
 8005928:	50805c1e 	bne	r10,r2,8005a9c <_malloc_r+0x798>
 800592c:	190000cc 	andi	r4,r3,3
 8005930:	50bffe04 	addi	r2,r10,-8
 8005934:	203ffa1e 	bne	r4,zero,8005920 <__alt_data_end+0xfc005920>
 8005938:	98800117 	ldw	r2,4(r19)
 800593c:	0146303a 	nor	r3,zero,r5
 8005940:	1884703a 	and	r2,r3,r2
 8005944:	98800115 	stw	r2,4(r19)
 8005948:	294b883a 	add	r5,r5,r5
 800594c:	117f2e36 	bltu	r2,r5,8005608 <__alt_data_end+0xfc005608>
 8005950:	283f2d26 	beq	r5,zero,8005608 <__alt_data_end+0xfc005608>
 8005954:	1146703a 	and	r3,r2,r5
 8005958:	1800521e 	bne	r3,zero,8005aa4 <_malloc_r+0x7a0>
 800595c:	6007883a 	mov	r3,r12
 8005960:	294b883a 	add	r5,r5,r5
 8005964:	1148703a 	and	r4,r2,r5
 8005968:	18c00104 	addi	r3,r3,4
 800596c:	203ffc26 	beq	r4,zero,8005960 <__alt_data_end+0xfc005960>
 8005970:	003ef006 	br	8005534 <__alt_data_end+0xfc005534>
 8005974:	00805504 	movi	r2,340
 8005978:	10c01336 	bltu	r2,r3,80059c8 <_malloc_r+0x6c4>
 800597c:	8806d3fa 	srli	r3,r17,15
 8005980:	19c01dc4 	addi	r7,r3,119
 8005984:	39cb883a 	add	r5,r7,r7
 8005988:	003ea206 	br	8005414 <__alt_data_end+0xfc005414>
 800598c:	00c40004 	movi	r3,4096
 8005990:	003f4d06 	br	80056c8 <__alt_data_end+0xfc0056c8>
 8005994:	00800044 	movi	r2,1
 8005998:	a0800115 	stw	r2,4(r20)
 800599c:	a021883a 	mov	r16,r20
 80059a0:	0007883a 	mov	r3,zero
 80059a4:	003f7506 	br	800577c <__alt_data_end+0xfc00577c>
 80059a8:	200bd0ba 	srai	r5,r4,2
 80059ac:	01800044 	movi	r6,1
 80059b0:	41000117 	ldw	r4,4(r8)
 80059b4:	314a983a 	sll	r5,r6,r5
 80059b8:	100d883a 	mov	r6,r2
 80059bc:	2908b03a 	or	r4,r5,r4
 80059c0:	41000115 	stw	r4,4(r8)
 80059c4:	003f9d06 	br	800583c <__alt_data_end+0xfc00583c>
 80059c8:	00815504 	movi	r2,1364
 80059cc:	10c01336 	bltu	r2,r3,8005a1c <_malloc_r+0x718>
 80059d0:	8806d4ba 	srli	r3,r17,18
 80059d4:	19c01f04 	addi	r7,r3,124
 80059d8:	39cb883a 	add	r5,r7,r7
 80059dc:	003e8d06 	br	8005414 <__alt_data_end+0xfc005414>
 80059e0:	ad400404 	addi	r21,r21,16
 80059e4:	003f1d06 	br	800565c <__alt_data_end+0xfc00565c>
 80059e8:	01001504 	movi	r4,84
 80059ec:	20801c36 	bltu	r4,r2,8005a60 <_malloc_r+0x75c>
 80059f0:	3804d33a 	srli	r2,r7,12
 80059f4:	11001b84 	addi	r4,r2,110
 80059f8:	210b883a 	add	r5,r4,r4
 80059fc:	003f8006 	br	8005800 <__alt_data_end+0xfc005800>
 8005a00:	3083ffcc 	andi	r2,r6,4095
 8005a04:	103f241e 	bne	r2,zero,8005698 <__alt_data_end+0xfc005698>
 8005a08:	99000217 	ldw	r4,8(r19)
 8005a0c:	ad85883a 	add	r2,r21,r22
 8005a10:	10800054 	ori	r2,r2,1
 8005a14:	20800115 	stw	r2,4(r4)
 8005a18:	003f4a06 	br	8005744 <__alt_data_end+0xfc005744>
 8005a1c:	01403f04 	movi	r5,252
 8005a20:	01c01f84 	movi	r7,126
 8005a24:	003e7b06 	br	8005414 <__alt_data_end+0xfc005414>
 8005a28:	00c00044 	movi	r3,1
 8005a2c:	002b883a 	mov	r21,zero
 8005a30:	003f3006 	br	80056f4 <__alt_data_end+0xfc0056f4>
 8005a34:	00820074 	movhi	r2,2049
 8005a38:	1084a104 	addi	r2,r2,4740
 8005a3c:	15000015 	stw	r20,0(r2)
 8005a40:	003f1b06 	br	80056b0 <__alt_data_end+0xfc0056b0>
 8005a44:	9009883a 	mov	r4,r18
 8005a48:	81400204 	addi	r5,r16,8
 8005a4c:	80047680 	call	8004768 <_free_r>
 8005a50:	00820074 	movhi	r2,2049
 8005a54:	108b8104 	addi	r2,r2,11780
 8005a58:	10c00017 	ldw	r3,0(r2)
 8005a5c:	003f3906 	br	8005744 <__alt_data_end+0xfc005744>
 8005a60:	01005504 	movi	r4,340
 8005a64:	20800436 	bltu	r4,r2,8005a78 <_malloc_r+0x774>
 8005a68:	3804d3fa 	srli	r2,r7,15
 8005a6c:	11001dc4 	addi	r4,r2,119
 8005a70:	210b883a 	add	r5,r4,r4
 8005a74:	003f6206 	br	8005800 <__alt_data_end+0xfc005800>
 8005a78:	01015504 	movi	r4,1364
 8005a7c:	20800436 	bltu	r4,r2,8005a90 <_malloc_r+0x78c>
 8005a80:	3804d4ba 	srli	r2,r7,18
 8005a84:	11001f04 	addi	r4,r2,124
 8005a88:	210b883a 	add	r5,r4,r4
 8005a8c:	003f5c06 	br	8005800 <__alt_data_end+0xfc005800>
 8005a90:	01403f04 	movi	r5,252
 8005a94:	01001f84 	movi	r4,126
 8005a98:	003f5906 	br	8005800 <__alt_data_end+0xfc005800>
 8005a9c:	98800117 	ldw	r2,4(r19)
 8005aa0:	003fa906 	br	8005948 <__alt_data_end+0xfc005948>
 8005aa4:	6007883a 	mov	r3,r12
 8005aa8:	003ea206 	br	8005534 <__alt_data_end+0xfc005534>

08005aac <memchr>:
 8005aac:	208000cc 	andi	r2,r4,3
 8005ab0:	280f883a 	mov	r7,r5
 8005ab4:	10003526 	beq	r2,zero,8005b8c <memchr+0xe0>
 8005ab8:	30bfffc4 	addi	r2,r6,-1
 8005abc:	30001b26 	beq	r6,zero,8005b2c <memchr+0x80>
 8005ac0:	21800003 	ldbu	r6,0(r4)
 8005ac4:	28c03fcc 	andi	r3,r5,255
 8005ac8:	30c01a26 	beq	r6,r3,8005b34 <memchr+0x88>
 8005acc:	180d883a 	mov	r6,r3
 8005ad0:	00000406 	br	8005ae4 <memchr+0x38>
 8005ad4:	10001526 	beq	r2,zero,8005b2c <memchr+0x80>
 8005ad8:	20c00003 	ldbu	r3,0(r4)
 8005adc:	10bfffc4 	addi	r2,r2,-1
 8005ae0:	19801426 	beq	r3,r6,8005b34 <memchr+0x88>
 8005ae4:	21000044 	addi	r4,r4,1
 8005ae8:	20c000cc 	andi	r3,r4,3
 8005aec:	183ff91e 	bne	r3,zero,8005ad4 <__alt_data_end+0xfc005ad4>
 8005af0:	024000c4 	movi	r9,3
 8005af4:	48801136 	bltu	r9,r2,8005b3c <memchr+0x90>
 8005af8:	10000c26 	beq	r2,zero,8005b2c <memchr+0x80>
 8005afc:	20c00003 	ldbu	r3,0(r4)
 8005b00:	29403fcc 	andi	r5,r5,255
 8005b04:	19400b26 	beq	r3,r5,8005b34 <memchr+0x88>
 8005b08:	20c00044 	addi	r3,r4,1
 8005b0c:	2085883a 	add	r2,r4,r2
 8005b10:	39803fcc 	andi	r6,r7,255
 8005b14:	00000306 	br	8005b24 <memchr+0x78>
 8005b18:	18c00044 	addi	r3,r3,1
 8005b1c:	197fffc3 	ldbu	r5,-1(r3)
 8005b20:	29800426 	beq	r5,r6,8005b34 <memchr+0x88>
 8005b24:	1809883a 	mov	r4,r3
 8005b28:	18bffb1e 	bne	r3,r2,8005b18 <__alt_data_end+0xfc005b18>
 8005b2c:	0005883a 	mov	r2,zero
 8005b30:	f800283a 	ret
 8005b34:	2005883a 	mov	r2,r4
 8005b38:	f800283a 	ret
 8005b3c:	28c03fcc 	andi	r3,r5,255
 8005b40:	1810923a 	slli	r8,r3,8
 8005b44:	02ffbff4 	movhi	r11,65279
 8005b48:	02a02074 	movhi	r10,32897
 8005b4c:	40c6b03a 	or	r3,r8,r3
 8005b50:	1810943a 	slli	r8,r3,16
 8005b54:	5affbfc4 	addi	r11,r11,-257
 8005b58:	52a02004 	addi	r10,r10,-32640
 8005b5c:	40d0b03a 	or	r8,r8,r3
 8005b60:	20c00017 	ldw	r3,0(r4)
 8005b64:	40c6f03a 	xor	r3,r8,r3
 8005b68:	1acd883a 	add	r6,r3,r11
 8005b6c:	00c6303a 	nor	r3,zero,r3
 8005b70:	30c6703a 	and	r3,r6,r3
 8005b74:	1a86703a 	and	r3,r3,r10
 8005b78:	183fdf1e 	bne	r3,zero,8005af8 <__alt_data_end+0xfc005af8>
 8005b7c:	10bfff04 	addi	r2,r2,-4
 8005b80:	21000104 	addi	r4,r4,4
 8005b84:	48bff636 	bltu	r9,r2,8005b60 <__alt_data_end+0xfc005b60>
 8005b88:	003fdb06 	br	8005af8 <__alt_data_end+0xfc005af8>
 8005b8c:	3005883a 	mov	r2,r6
 8005b90:	003fd706 	br	8005af0 <__alt_data_end+0xfc005af0>

08005b94 <memcpy>:
 8005b94:	deffff04 	addi	sp,sp,-4
 8005b98:	dc000015 	stw	r16,0(sp)
 8005b9c:	00c003c4 	movi	r3,15
 8005ba0:	2005883a 	mov	r2,r4
 8005ba4:	1980432e 	bgeu	r3,r6,8005cb4 <memcpy+0x120>
 8005ba8:	2146b03a 	or	r3,r4,r5
 8005bac:	18c000cc 	andi	r3,r3,3
 8005bb0:	1800421e 	bne	r3,zero,8005cbc <memcpy+0x128>
 8005bb4:	343ffc04 	addi	r16,r6,-16
 8005bb8:	8020d13a 	srli	r16,r16,4
 8005bbc:	28c00104 	addi	r3,r5,4
 8005bc0:	23400104 	addi	r13,r4,4
 8005bc4:	801e913a 	slli	r15,r16,4
 8005bc8:	2b000204 	addi	r12,r5,8
 8005bcc:	22c00204 	addi	r11,r4,8
 8005bd0:	7bc00504 	addi	r15,r15,20
 8005bd4:	2a800304 	addi	r10,r5,12
 8005bd8:	22400304 	addi	r9,r4,12
 8005bdc:	2bdf883a 	add	r15,r5,r15
 8005be0:	2811883a 	mov	r8,r5
 8005be4:	200f883a 	mov	r7,r4
 8005be8:	41000017 	ldw	r4,0(r8)
 8005bec:	39c00404 	addi	r7,r7,16
 8005bf0:	18c00404 	addi	r3,r3,16
 8005bf4:	393ffc15 	stw	r4,-16(r7)
 8005bf8:	1bbffc17 	ldw	r14,-16(r3)
 8005bfc:	6b400404 	addi	r13,r13,16
 8005c00:	5ac00404 	addi	r11,r11,16
 8005c04:	6bbffc15 	stw	r14,-16(r13)
 8005c08:	63800017 	ldw	r14,0(r12)
 8005c0c:	4a400404 	addi	r9,r9,16
 8005c10:	42000404 	addi	r8,r8,16
 8005c14:	5bbffc15 	stw	r14,-16(r11)
 8005c18:	53800017 	ldw	r14,0(r10)
 8005c1c:	63000404 	addi	r12,r12,16
 8005c20:	52800404 	addi	r10,r10,16
 8005c24:	4bbffc15 	stw	r14,-16(r9)
 8005c28:	1bffef1e 	bne	r3,r15,8005be8 <__alt_data_end+0xfc005be8>
 8005c2c:	81c00044 	addi	r7,r16,1
 8005c30:	380e913a 	slli	r7,r7,4
 8005c34:	310003cc 	andi	r4,r6,15
 8005c38:	02c000c4 	movi	r11,3
 8005c3c:	11c7883a 	add	r3,r2,r7
 8005c40:	29cb883a 	add	r5,r5,r7
 8005c44:	59001f2e 	bgeu	r11,r4,8005cc4 <memcpy+0x130>
 8005c48:	1813883a 	mov	r9,r3
 8005c4c:	2811883a 	mov	r8,r5
 8005c50:	200f883a 	mov	r7,r4
 8005c54:	42800017 	ldw	r10,0(r8)
 8005c58:	4a400104 	addi	r9,r9,4
 8005c5c:	39ffff04 	addi	r7,r7,-4
 8005c60:	4abfff15 	stw	r10,-4(r9)
 8005c64:	42000104 	addi	r8,r8,4
 8005c68:	59fffa36 	bltu	r11,r7,8005c54 <__alt_data_end+0xfc005c54>
 8005c6c:	213fff04 	addi	r4,r4,-4
 8005c70:	2008d0ba 	srli	r4,r4,2
 8005c74:	318000cc 	andi	r6,r6,3
 8005c78:	21000044 	addi	r4,r4,1
 8005c7c:	2109883a 	add	r4,r4,r4
 8005c80:	2109883a 	add	r4,r4,r4
 8005c84:	1907883a 	add	r3,r3,r4
 8005c88:	290b883a 	add	r5,r5,r4
 8005c8c:	30000626 	beq	r6,zero,8005ca8 <memcpy+0x114>
 8005c90:	198d883a 	add	r6,r3,r6
 8005c94:	29c00003 	ldbu	r7,0(r5)
 8005c98:	18c00044 	addi	r3,r3,1
 8005c9c:	29400044 	addi	r5,r5,1
 8005ca0:	19ffffc5 	stb	r7,-1(r3)
 8005ca4:	19bffb1e 	bne	r3,r6,8005c94 <__alt_data_end+0xfc005c94>
 8005ca8:	dc000017 	ldw	r16,0(sp)
 8005cac:	dec00104 	addi	sp,sp,4
 8005cb0:	f800283a 	ret
 8005cb4:	2007883a 	mov	r3,r4
 8005cb8:	003ff406 	br	8005c8c <__alt_data_end+0xfc005c8c>
 8005cbc:	2007883a 	mov	r3,r4
 8005cc0:	003ff306 	br	8005c90 <__alt_data_end+0xfc005c90>
 8005cc4:	200d883a 	mov	r6,r4
 8005cc8:	003ff006 	br	8005c8c <__alt_data_end+0xfc005c8c>

08005ccc <memmove>:
 8005ccc:	2005883a 	mov	r2,r4
 8005cd0:	29000b2e 	bgeu	r5,r4,8005d00 <memmove+0x34>
 8005cd4:	298f883a 	add	r7,r5,r6
 8005cd8:	21c0092e 	bgeu	r4,r7,8005d00 <memmove+0x34>
 8005cdc:	2187883a 	add	r3,r4,r6
 8005ce0:	198bc83a 	sub	r5,r3,r6
 8005ce4:	30004b26 	beq	r6,zero,8005e14 <memmove+0x148>
 8005ce8:	39ffffc4 	addi	r7,r7,-1
 8005cec:	39000003 	ldbu	r4,0(r7)
 8005cf0:	18ffffc4 	addi	r3,r3,-1
 8005cf4:	19000005 	stb	r4,0(r3)
 8005cf8:	197ffb1e 	bne	r3,r5,8005ce8 <__alt_data_end+0xfc005ce8>
 8005cfc:	f800283a 	ret
 8005d00:	00c003c4 	movi	r3,15
 8005d04:	1980412e 	bgeu	r3,r6,8005e0c <memmove+0x140>
 8005d08:	1146b03a 	or	r3,r2,r5
 8005d0c:	18c000cc 	andi	r3,r3,3
 8005d10:	1800411e 	bne	r3,zero,8005e18 <memmove+0x14c>
 8005d14:	33fffc04 	addi	r15,r6,-16
 8005d18:	781ed13a 	srli	r15,r15,4
 8005d1c:	28c00104 	addi	r3,r5,4
 8005d20:	13400104 	addi	r13,r2,4
 8005d24:	781c913a 	slli	r14,r15,4
 8005d28:	2b000204 	addi	r12,r5,8
 8005d2c:	12c00204 	addi	r11,r2,8
 8005d30:	73800504 	addi	r14,r14,20
 8005d34:	2a800304 	addi	r10,r5,12
 8005d38:	12400304 	addi	r9,r2,12
 8005d3c:	2b9d883a 	add	r14,r5,r14
 8005d40:	2811883a 	mov	r8,r5
 8005d44:	100f883a 	mov	r7,r2
 8005d48:	41000017 	ldw	r4,0(r8)
 8005d4c:	39c00404 	addi	r7,r7,16
 8005d50:	18c00404 	addi	r3,r3,16
 8005d54:	393ffc15 	stw	r4,-16(r7)
 8005d58:	193ffc17 	ldw	r4,-16(r3)
 8005d5c:	6b400404 	addi	r13,r13,16
 8005d60:	5ac00404 	addi	r11,r11,16
 8005d64:	693ffc15 	stw	r4,-16(r13)
 8005d68:	61000017 	ldw	r4,0(r12)
 8005d6c:	4a400404 	addi	r9,r9,16
 8005d70:	42000404 	addi	r8,r8,16
 8005d74:	593ffc15 	stw	r4,-16(r11)
 8005d78:	51000017 	ldw	r4,0(r10)
 8005d7c:	63000404 	addi	r12,r12,16
 8005d80:	52800404 	addi	r10,r10,16
 8005d84:	493ffc15 	stw	r4,-16(r9)
 8005d88:	1bbfef1e 	bne	r3,r14,8005d48 <__alt_data_end+0xfc005d48>
 8005d8c:	79000044 	addi	r4,r15,1
 8005d90:	2008913a 	slli	r4,r4,4
 8005d94:	328003cc 	andi	r10,r6,15
 8005d98:	02c000c4 	movi	r11,3
 8005d9c:	1107883a 	add	r3,r2,r4
 8005da0:	290b883a 	add	r5,r5,r4
 8005da4:	5a801e2e 	bgeu	r11,r10,8005e20 <memmove+0x154>
 8005da8:	1813883a 	mov	r9,r3
 8005dac:	2811883a 	mov	r8,r5
 8005db0:	500f883a 	mov	r7,r10
 8005db4:	41000017 	ldw	r4,0(r8)
 8005db8:	4a400104 	addi	r9,r9,4
 8005dbc:	39ffff04 	addi	r7,r7,-4
 8005dc0:	493fff15 	stw	r4,-4(r9)
 8005dc4:	42000104 	addi	r8,r8,4
 8005dc8:	59fffa36 	bltu	r11,r7,8005db4 <__alt_data_end+0xfc005db4>
 8005dcc:	513fff04 	addi	r4,r10,-4
 8005dd0:	2008d0ba 	srli	r4,r4,2
 8005dd4:	318000cc 	andi	r6,r6,3
 8005dd8:	21000044 	addi	r4,r4,1
 8005ddc:	2109883a 	add	r4,r4,r4
 8005de0:	2109883a 	add	r4,r4,r4
 8005de4:	1907883a 	add	r3,r3,r4
 8005de8:	290b883a 	add	r5,r5,r4
 8005dec:	30000926 	beq	r6,zero,8005e14 <memmove+0x148>
 8005df0:	198d883a 	add	r6,r3,r6
 8005df4:	29c00003 	ldbu	r7,0(r5)
 8005df8:	18c00044 	addi	r3,r3,1
 8005dfc:	29400044 	addi	r5,r5,1
 8005e00:	19ffffc5 	stb	r7,-1(r3)
 8005e04:	19bffb1e 	bne	r3,r6,8005df4 <__alt_data_end+0xfc005df4>
 8005e08:	f800283a 	ret
 8005e0c:	1007883a 	mov	r3,r2
 8005e10:	003ff606 	br	8005dec <__alt_data_end+0xfc005dec>
 8005e14:	f800283a 	ret
 8005e18:	1007883a 	mov	r3,r2
 8005e1c:	003ff406 	br	8005df0 <__alt_data_end+0xfc005df0>
 8005e20:	500d883a 	mov	r6,r10
 8005e24:	003ff106 	br	8005dec <__alt_data_end+0xfc005dec>

08005e28 <memset>:
 8005e28:	20c000cc 	andi	r3,r4,3
 8005e2c:	2005883a 	mov	r2,r4
 8005e30:	18004326 	beq	r3,zero,8005f40 <memset+0x118>
 8005e34:	31ffffc4 	addi	r7,r6,-1
 8005e38:	30004026 	beq	r6,zero,8005f3c <memset+0x114>
 8005e3c:	2813883a 	mov	r9,r5
 8005e40:	200d883a 	mov	r6,r4
 8005e44:	2007883a 	mov	r3,r4
 8005e48:	00000406 	br	8005e5c <memset+0x34>
 8005e4c:	3a3fffc4 	addi	r8,r7,-1
 8005e50:	31800044 	addi	r6,r6,1
 8005e54:	38003926 	beq	r7,zero,8005f3c <memset+0x114>
 8005e58:	400f883a 	mov	r7,r8
 8005e5c:	18c00044 	addi	r3,r3,1
 8005e60:	32400005 	stb	r9,0(r6)
 8005e64:	1a0000cc 	andi	r8,r3,3
 8005e68:	403ff81e 	bne	r8,zero,8005e4c <__alt_data_end+0xfc005e4c>
 8005e6c:	010000c4 	movi	r4,3
 8005e70:	21c02d2e 	bgeu	r4,r7,8005f28 <memset+0x100>
 8005e74:	29803fcc 	andi	r6,r5,255
 8005e78:	3008923a 	slli	r4,r6,8
 8005e7c:	218cb03a 	or	r6,r4,r6
 8005e80:	3008943a 	slli	r4,r6,16
 8005e84:	218cb03a 	or	r6,r4,r6
 8005e88:	010003c4 	movi	r4,15
 8005e8c:	21c0182e 	bgeu	r4,r7,8005ef0 <memset+0xc8>
 8005e90:	3b3ffc04 	addi	r12,r7,-16
 8005e94:	6018d13a 	srli	r12,r12,4
 8005e98:	1a000104 	addi	r8,r3,4
 8005e9c:	1ac00204 	addi	r11,r3,8
 8005ea0:	6008913a 	slli	r4,r12,4
 8005ea4:	1a800304 	addi	r10,r3,12
 8005ea8:	1813883a 	mov	r9,r3
 8005eac:	21000504 	addi	r4,r4,20
 8005eb0:	1909883a 	add	r4,r3,r4
 8005eb4:	49800015 	stw	r6,0(r9)
 8005eb8:	41800015 	stw	r6,0(r8)
 8005ebc:	59800015 	stw	r6,0(r11)
 8005ec0:	51800015 	stw	r6,0(r10)
 8005ec4:	42000404 	addi	r8,r8,16
 8005ec8:	4a400404 	addi	r9,r9,16
 8005ecc:	5ac00404 	addi	r11,r11,16
 8005ed0:	52800404 	addi	r10,r10,16
 8005ed4:	413ff71e 	bne	r8,r4,8005eb4 <__alt_data_end+0xfc005eb4>
 8005ed8:	63000044 	addi	r12,r12,1
 8005edc:	6018913a 	slli	r12,r12,4
 8005ee0:	39c003cc 	andi	r7,r7,15
 8005ee4:	010000c4 	movi	r4,3
 8005ee8:	1b07883a 	add	r3,r3,r12
 8005eec:	21c00e2e 	bgeu	r4,r7,8005f28 <memset+0x100>
 8005ef0:	1813883a 	mov	r9,r3
 8005ef4:	3811883a 	mov	r8,r7
 8005ef8:	010000c4 	movi	r4,3
 8005efc:	49800015 	stw	r6,0(r9)
 8005f00:	423fff04 	addi	r8,r8,-4
 8005f04:	4a400104 	addi	r9,r9,4
 8005f08:	223ffc36 	bltu	r4,r8,8005efc <__alt_data_end+0xfc005efc>
 8005f0c:	393fff04 	addi	r4,r7,-4
 8005f10:	2008d0ba 	srli	r4,r4,2
 8005f14:	39c000cc 	andi	r7,r7,3
 8005f18:	21000044 	addi	r4,r4,1
 8005f1c:	2109883a 	add	r4,r4,r4
 8005f20:	2109883a 	add	r4,r4,r4
 8005f24:	1907883a 	add	r3,r3,r4
 8005f28:	38000426 	beq	r7,zero,8005f3c <memset+0x114>
 8005f2c:	19cf883a 	add	r7,r3,r7
 8005f30:	19400005 	stb	r5,0(r3)
 8005f34:	18c00044 	addi	r3,r3,1
 8005f38:	19fffd1e 	bne	r3,r7,8005f30 <__alt_data_end+0xfc005f30>
 8005f3c:	f800283a 	ret
 8005f40:	2007883a 	mov	r3,r4
 8005f44:	300f883a 	mov	r7,r6
 8005f48:	003fc806 	br	8005e6c <__alt_data_end+0xfc005e6c>

08005f4c <_Balloc>:
 8005f4c:	20801317 	ldw	r2,76(r4)
 8005f50:	defffc04 	addi	sp,sp,-16
 8005f54:	dc400115 	stw	r17,4(sp)
 8005f58:	dc000015 	stw	r16,0(sp)
 8005f5c:	dfc00315 	stw	ra,12(sp)
 8005f60:	dc800215 	stw	r18,8(sp)
 8005f64:	2023883a 	mov	r17,r4
 8005f68:	2821883a 	mov	r16,r5
 8005f6c:	10000f26 	beq	r2,zero,8005fac <_Balloc+0x60>
 8005f70:	8407883a 	add	r3,r16,r16
 8005f74:	18c7883a 	add	r3,r3,r3
 8005f78:	10c7883a 	add	r3,r2,r3
 8005f7c:	18800017 	ldw	r2,0(r3)
 8005f80:	10001126 	beq	r2,zero,8005fc8 <_Balloc+0x7c>
 8005f84:	11000017 	ldw	r4,0(r2)
 8005f88:	19000015 	stw	r4,0(r3)
 8005f8c:	10000415 	stw	zero,16(r2)
 8005f90:	10000315 	stw	zero,12(r2)
 8005f94:	dfc00317 	ldw	ra,12(sp)
 8005f98:	dc800217 	ldw	r18,8(sp)
 8005f9c:	dc400117 	ldw	r17,4(sp)
 8005fa0:	dc000017 	ldw	r16,0(sp)
 8005fa4:	dec00404 	addi	sp,sp,16
 8005fa8:	f800283a 	ret
 8005fac:	01400104 	movi	r5,4
 8005fb0:	01800844 	movi	r6,33
 8005fb4:	8008c640 	call	8008c64 <_calloc_r>
 8005fb8:	88801315 	stw	r2,76(r17)
 8005fbc:	103fec1e 	bne	r2,zero,8005f70 <__alt_data_end+0xfc005f70>
 8005fc0:	0005883a 	mov	r2,zero
 8005fc4:	003ff306 	br	8005f94 <__alt_data_end+0xfc005f94>
 8005fc8:	01400044 	movi	r5,1
 8005fcc:	2c24983a 	sll	r18,r5,r16
 8005fd0:	8809883a 	mov	r4,r17
 8005fd4:	91800144 	addi	r6,r18,5
 8005fd8:	318d883a 	add	r6,r6,r6
 8005fdc:	318d883a 	add	r6,r6,r6
 8005fe0:	8008c640 	call	8008c64 <_calloc_r>
 8005fe4:	103ff626 	beq	r2,zero,8005fc0 <__alt_data_end+0xfc005fc0>
 8005fe8:	14000115 	stw	r16,4(r2)
 8005fec:	14800215 	stw	r18,8(r2)
 8005ff0:	003fe606 	br	8005f8c <__alt_data_end+0xfc005f8c>

08005ff4 <_Bfree>:
 8005ff4:	28000826 	beq	r5,zero,8006018 <_Bfree+0x24>
 8005ff8:	28c00117 	ldw	r3,4(r5)
 8005ffc:	20801317 	ldw	r2,76(r4)
 8006000:	18c7883a 	add	r3,r3,r3
 8006004:	18c7883a 	add	r3,r3,r3
 8006008:	10c5883a 	add	r2,r2,r3
 800600c:	10c00017 	ldw	r3,0(r2)
 8006010:	28c00015 	stw	r3,0(r5)
 8006014:	11400015 	stw	r5,0(r2)
 8006018:	f800283a 	ret

0800601c <__multadd>:
 800601c:	defffa04 	addi	sp,sp,-24
 8006020:	dc000115 	stw	r16,4(sp)
 8006024:	2c000417 	ldw	r16,16(r5)
 8006028:	dc800315 	stw	r18,12(sp)
 800602c:	dc400215 	stw	r17,8(sp)
 8006030:	dfc00515 	stw	ra,20(sp)
 8006034:	dcc00415 	stw	r19,16(sp)
 8006038:	2823883a 	mov	r17,r5
 800603c:	2025883a 	mov	r18,r4
 8006040:	2a400504 	addi	r9,r5,20
 8006044:	0015883a 	mov	r10,zero
 8006048:	4a000017 	ldw	r8,0(r9)
 800604c:	4a400104 	addi	r9,r9,4
 8006050:	52800044 	addi	r10,r10,1
 8006054:	40ffffcc 	andi	r3,r8,65535
 8006058:	1987383a 	mul	r3,r3,r6
 800605c:	4010d43a 	srli	r8,r8,16
 8006060:	19cf883a 	add	r7,r3,r7
 8006064:	4191383a 	mul	r8,r8,r6
 8006068:	3816d43a 	srli	r11,r7,16
 800606c:	38ffffcc 	andi	r3,r7,65535
 8006070:	5a0f883a 	add	r7,r11,r8
 8006074:	3810943a 	slli	r8,r7,16
 8006078:	380ed43a 	srli	r7,r7,16
 800607c:	40c7883a 	add	r3,r8,r3
 8006080:	48ffff15 	stw	r3,-4(r9)
 8006084:	543ff016 	blt	r10,r16,8006048 <__alt_data_end+0xfc006048>
 8006088:	38000926 	beq	r7,zero,80060b0 <__multadd+0x94>
 800608c:	88800217 	ldw	r2,8(r17)
 8006090:	80800f0e 	bge	r16,r2,80060d0 <__multadd+0xb4>
 8006094:	80800144 	addi	r2,r16,5
 8006098:	1085883a 	add	r2,r2,r2
 800609c:	1085883a 	add	r2,r2,r2
 80060a0:	8885883a 	add	r2,r17,r2
 80060a4:	11c00015 	stw	r7,0(r2)
 80060a8:	84000044 	addi	r16,r16,1
 80060ac:	8c000415 	stw	r16,16(r17)
 80060b0:	8805883a 	mov	r2,r17
 80060b4:	dfc00517 	ldw	ra,20(sp)
 80060b8:	dcc00417 	ldw	r19,16(sp)
 80060bc:	dc800317 	ldw	r18,12(sp)
 80060c0:	dc400217 	ldw	r17,8(sp)
 80060c4:	dc000117 	ldw	r16,4(sp)
 80060c8:	dec00604 	addi	sp,sp,24
 80060cc:	f800283a 	ret
 80060d0:	89400117 	ldw	r5,4(r17)
 80060d4:	9009883a 	mov	r4,r18
 80060d8:	d9c00015 	stw	r7,0(sp)
 80060dc:	29400044 	addi	r5,r5,1
 80060e0:	8005f4c0 	call	8005f4c <_Balloc>
 80060e4:	89800417 	ldw	r6,16(r17)
 80060e8:	89400304 	addi	r5,r17,12
 80060ec:	11000304 	addi	r4,r2,12
 80060f0:	31800084 	addi	r6,r6,2
 80060f4:	318d883a 	add	r6,r6,r6
 80060f8:	318d883a 	add	r6,r6,r6
 80060fc:	1027883a 	mov	r19,r2
 8006100:	8005b940 	call	8005b94 <memcpy>
 8006104:	89000117 	ldw	r4,4(r17)
 8006108:	90c01317 	ldw	r3,76(r18)
 800610c:	d9c00017 	ldw	r7,0(sp)
 8006110:	2109883a 	add	r4,r4,r4
 8006114:	2109883a 	add	r4,r4,r4
 8006118:	1907883a 	add	r3,r3,r4
 800611c:	18800017 	ldw	r2,0(r3)
 8006120:	88800015 	stw	r2,0(r17)
 8006124:	1c400015 	stw	r17,0(r3)
 8006128:	9823883a 	mov	r17,r19
 800612c:	003fd906 	br	8006094 <__alt_data_end+0xfc006094>

08006130 <__s2b>:
 8006130:	defff904 	addi	sp,sp,-28
 8006134:	dc400115 	stw	r17,4(sp)
 8006138:	dc000015 	stw	r16,0(sp)
 800613c:	2023883a 	mov	r17,r4
 8006140:	2821883a 	mov	r16,r5
 8006144:	39000204 	addi	r4,r7,8
 8006148:	01400244 	movi	r5,9
 800614c:	dcc00315 	stw	r19,12(sp)
 8006150:	dc800215 	stw	r18,8(sp)
 8006154:	dfc00615 	stw	ra,24(sp)
 8006158:	dd400515 	stw	r21,20(sp)
 800615c:	dd000415 	stw	r20,16(sp)
 8006160:	3825883a 	mov	r18,r7
 8006164:	3027883a 	mov	r19,r6
 8006168:	800a0a80 	call	800a0a8 <__divsi3>
 800616c:	00c00044 	movi	r3,1
 8006170:	000b883a 	mov	r5,zero
 8006174:	1880030e 	bge	r3,r2,8006184 <__s2b+0x54>
 8006178:	18c7883a 	add	r3,r3,r3
 800617c:	29400044 	addi	r5,r5,1
 8006180:	18bffd16 	blt	r3,r2,8006178 <__alt_data_end+0xfc006178>
 8006184:	8809883a 	mov	r4,r17
 8006188:	8005f4c0 	call	8005f4c <_Balloc>
 800618c:	d8c00717 	ldw	r3,28(sp)
 8006190:	10c00515 	stw	r3,20(r2)
 8006194:	00c00044 	movi	r3,1
 8006198:	10c00415 	stw	r3,16(r2)
 800619c:	00c00244 	movi	r3,9
 80061a0:	1cc0210e 	bge	r3,r19,8006228 <__s2b+0xf8>
 80061a4:	80eb883a 	add	r21,r16,r3
 80061a8:	a829883a 	mov	r20,r21
 80061ac:	84e1883a 	add	r16,r16,r19
 80061b0:	a1c00007 	ldb	r7,0(r20)
 80061b4:	8809883a 	mov	r4,r17
 80061b8:	a5000044 	addi	r20,r20,1
 80061bc:	100b883a 	mov	r5,r2
 80061c0:	01800284 	movi	r6,10
 80061c4:	39fff404 	addi	r7,r7,-48
 80061c8:	800601c0 	call	800601c <__multadd>
 80061cc:	a43ff81e 	bne	r20,r16,80061b0 <__alt_data_end+0xfc0061b0>
 80061d0:	ace1883a 	add	r16,r21,r19
 80061d4:	843ffe04 	addi	r16,r16,-8
 80061d8:	9c800a0e 	bge	r19,r18,8006204 <__s2b+0xd4>
 80061dc:	94e5c83a 	sub	r18,r18,r19
 80061e0:	84a5883a 	add	r18,r16,r18
 80061e4:	81c00007 	ldb	r7,0(r16)
 80061e8:	8809883a 	mov	r4,r17
 80061ec:	84000044 	addi	r16,r16,1
 80061f0:	100b883a 	mov	r5,r2
 80061f4:	01800284 	movi	r6,10
 80061f8:	39fff404 	addi	r7,r7,-48
 80061fc:	800601c0 	call	800601c <__multadd>
 8006200:	84bff81e 	bne	r16,r18,80061e4 <__alt_data_end+0xfc0061e4>
 8006204:	dfc00617 	ldw	ra,24(sp)
 8006208:	dd400517 	ldw	r21,20(sp)
 800620c:	dd000417 	ldw	r20,16(sp)
 8006210:	dcc00317 	ldw	r19,12(sp)
 8006214:	dc800217 	ldw	r18,8(sp)
 8006218:	dc400117 	ldw	r17,4(sp)
 800621c:	dc000017 	ldw	r16,0(sp)
 8006220:	dec00704 	addi	sp,sp,28
 8006224:	f800283a 	ret
 8006228:	84000284 	addi	r16,r16,10
 800622c:	1827883a 	mov	r19,r3
 8006230:	003fe906 	br	80061d8 <__alt_data_end+0xfc0061d8>

08006234 <__hi0bits>:
 8006234:	20bfffec 	andhi	r2,r4,65535
 8006238:	1000141e 	bne	r2,zero,800628c <__hi0bits+0x58>
 800623c:	2008943a 	slli	r4,r4,16
 8006240:	00800404 	movi	r2,16
 8006244:	20ffc02c 	andhi	r3,r4,65280
 8006248:	1800021e 	bne	r3,zero,8006254 <__hi0bits+0x20>
 800624c:	2008923a 	slli	r4,r4,8
 8006250:	10800204 	addi	r2,r2,8
 8006254:	20fc002c 	andhi	r3,r4,61440
 8006258:	1800021e 	bne	r3,zero,8006264 <__hi0bits+0x30>
 800625c:	2008913a 	slli	r4,r4,4
 8006260:	10800104 	addi	r2,r2,4
 8006264:	20f0002c 	andhi	r3,r4,49152
 8006268:	1800031e 	bne	r3,zero,8006278 <__hi0bits+0x44>
 800626c:	2109883a 	add	r4,r4,r4
 8006270:	10800084 	addi	r2,r2,2
 8006274:	2109883a 	add	r4,r4,r4
 8006278:	20000316 	blt	r4,zero,8006288 <__hi0bits+0x54>
 800627c:	2110002c 	andhi	r4,r4,16384
 8006280:	2000041e 	bne	r4,zero,8006294 <__hi0bits+0x60>
 8006284:	00800804 	movi	r2,32
 8006288:	f800283a 	ret
 800628c:	0005883a 	mov	r2,zero
 8006290:	003fec06 	br	8006244 <__alt_data_end+0xfc006244>
 8006294:	10800044 	addi	r2,r2,1
 8006298:	f800283a 	ret

0800629c <__lo0bits>:
 800629c:	20c00017 	ldw	r3,0(r4)
 80062a0:	188001cc 	andi	r2,r3,7
 80062a4:	10000826 	beq	r2,zero,80062c8 <__lo0bits+0x2c>
 80062a8:	1880004c 	andi	r2,r3,1
 80062ac:	1000211e 	bne	r2,zero,8006334 <__lo0bits+0x98>
 80062b0:	1880008c 	andi	r2,r3,2
 80062b4:	1000211e 	bne	r2,zero,800633c <__lo0bits+0xa0>
 80062b8:	1806d0ba 	srli	r3,r3,2
 80062bc:	00800084 	movi	r2,2
 80062c0:	20c00015 	stw	r3,0(r4)
 80062c4:	f800283a 	ret
 80062c8:	18bfffcc 	andi	r2,r3,65535
 80062cc:	10001326 	beq	r2,zero,800631c <__lo0bits+0x80>
 80062d0:	0005883a 	mov	r2,zero
 80062d4:	19403fcc 	andi	r5,r3,255
 80062d8:	2800021e 	bne	r5,zero,80062e4 <__lo0bits+0x48>
 80062dc:	1806d23a 	srli	r3,r3,8
 80062e0:	10800204 	addi	r2,r2,8
 80062e4:	194003cc 	andi	r5,r3,15
 80062e8:	2800021e 	bne	r5,zero,80062f4 <__lo0bits+0x58>
 80062ec:	1806d13a 	srli	r3,r3,4
 80062f0:	10800104 	addi	r2,r2,4
 80062f4:	194000cc 	andi	r5,r3,3
 80062f8:	2800021e 	bne	r5,zero,8006304 <__lo0bits+0x68>
 80062fc:	1806d0ba 	srli	r3,r3,2
 8006300:	10800084 	addi	r2,r2,2
 8006304:	1940004c 	andi	r5,r3,1
 8006308:	2800081e 	bne	r5,zero,800632c <__lo0bits+0x90>
 800630c:	1806d07a 	srli	r3,r3,1
 8006310:	1800051e 	bne	r3,zero,8006328 <__lo0bits+0x8c>
 8006314:	00800804 	movi	r2,32
 8006318:	f800283a 	ret
 800631c:	1806d43a 	srli	r3,r3,16
 8006320:	00800404 	movi	r2,16
 8006324:	003feb06 	br	80062d4 <__alt_data_end+0xfc0062d4>
 8006328:	10800044 	addi	r2,r2,1
 800632c:	20c00015 	stw	r3,0(r4)
 8006330:	f800283a 	ret
 8006334:	0005883a 	mov	r2,zero
 8006338:	f800283a 	ret
 800633c:	1806d07a 	srli	r3,r3,1
 8006340:	00800044 	movi	r2,1
 8006344:	20c00015 	stw	r3,0(r4)
 8006348:	f800283a 	ret

0800634c <__i2b>:
 800634c:	defffd04 	addi	sp,sp,-12
 8006350:	dc000015 	stw	r16,0(sp)
 8006354:	04000044 	movi	r16,1
 8006358:	dc400115 	stw	r17,4(sp)
 800635c:	2823883a 	mov	r17,r5
 8006360:	800b883a 	mov	r5,r16
 8006364:	dfc00215 	stw	ra,8(sp)
 8006368:	8005f4c0 	call	8005f4c <_Balloc>
 800636c:	14400515 	stw	r17,20(r2)
 8006370:	14000415 	stw	r16,16(r2)
 8006374:	dfc00217 	ldw	ra,8(sp)
 8006378:	dc400117 	ldw	r17,4(sp)
 800637c:	dc000017 	ldw	r16,0(sp)
 8006380:	dec00304 	addi	sp,sp,12
 8006384:	f800283a 	ret

08006388 <__multiply>:
 8006388:	defffa04 	addi	sp,sp,-24
 800638c:	dcc00315 	stw	r19,12(sp)
 8006390:	dc800215 	stw	r18,8(sp)
 8006394:	2cc00417 	ldw	r19,16(r5)
 8006398:	34800417 	ldw	r18,16(r6)
 800639c:	dd000415 	stw	r20,16(sp)
 80063a0:	dc400115 	stw	r17,4(sp)
 80063a4:	dfc00515 	stw	ra,20(sp)
 80063a8:	dc000015 	stw	r16,0(sp)
 80063ac:	2829883a 	mov	r20,r5
 80063b0:	3023883a 	mov	r17,r6
 80063b4:	9c807016 	blt	r19,r18,8006578 <__multiply+0x1f0>
 80063b8:	9005883a 	mov	r2,r18
 80063bc:	9825883a 	mov	r18,r19
 80063c0:	1027883a 	mov	r19,r2
 80063c4:	a0800217 	ldw	r2,8(r20)
 80063c8:	94e1883a 	add	r16,r18,r19
 80063cc:	a1400117 	ldw	r5,4(r20)
 80063d0:	1400010e 	bge	r2,r16,80063d8 <__multiply+0x50>
 80063d4:	29400044 	addi	r5,r5,1
 80063d8:	8005f4c0 	call	8005f4c <_Balloc>
 80063dc:	8417883a 	add	r11,r16,r16
 80063e0:	13000504 	addi	r12,r2,20
 80063e4:	5ad7883a 	add	r11,r11,r11
 80063e8:	62d7883a 	add	r11,r12,r11
 80063ec:	6007883a 	mov	r3,r12
 80063f0:	62c0032e 	bgeu	r12,r11,8006400 <__multiply+0x78>
 80063f4:	18000015 	stw	zero,0(r3)
 80063f8:	18c00104 	addi	r3,r3,4
 80063fc:	1afffd36 	bltu	r3,r11,80063f4 <__alt_data_end+0xfc0063f4>
 8006400:	9ce7883a 	add	r19,r19,r19
 8006404:	94a5883a 	add	r18,r18,r18
 8006408:	89800504 	addi	r6,r17,20
 800640c:	9ce7883a 	add	r19,r19,r19
 8006410:	a3800504 	addi	r14,r20,20
 8006414:	94a5883a 	add	r18,r18,r18
 8006418:	34db883a 	add	r13,r6,r19
 800641c:	7495883a 	add	r10,r14,r18
 8006420:	3340422e 	bgeu	r6,r13,800652c <__multiply+0x1a4>
 8006424:	34400017 	ldw	r17,0(r6)
 8006428:	8cbfffcc 	andi	r18,r17,65535
 800642c:	90001b26 	beq	r18,zero,800649c <__multiply+0x114>
 8006430:	6013883a 	mov	r9,r12
 8006434:	7023883a 	mov	r17,r14
 8006438:	0011883a 	mov	r8,zero
 800643c:	88c00017 	ldw	r3,0(r17)
 8006440:	4bc00017 	ldw	r15,0(r9)
 8006444:	8c400104 	addi	r17,r17,4
 8006448:	19ffffcc 	andi	r7,r3,65535
 800644c:	3c8f383a 	mul	r7,r7,r18
 8006450:	1808d43a 	srli	r4,r3,16
 8006454:	797fffcc 	andi	r5,r15,65535
 8006458:	29cb883a 	add	r5,r5,r7
 800645c:	2a0b883a 	add	r5,r5,r8
 8006460:	2489383a 	mul	r4,r4,r18
 8006464:	7806d43a 	srli	r3,r15,16
 8006468:	2810d43a 	srli	r8,r5,16
 800646c:	297fffcc 	andi	r5,r5,65535
 8006470:	1907883a 	add	r3,r3,r4
 8006474:	1a07883a 	add	r3,r3,r8
 8006478:	1808943a 	slli	r4,r3,16
 800647c:	480f883a 	mov	r7,r9
 8006480:	1810d43a 	srli	r8,r3,16
 8006484:	214ab03a 	or	r5,r4,r5
 8006488:	49400015 	stw	r5,0(r9)
 800648c:	4a400104 	addi	r9,r9,4
 8006490:	8abfea36 	bltu	r17,r10,800643c <__alt_data_end+0xfc00643c>
 8006494:	3a000115 	stw	r8,4(r7)
 8006498:	34400017 	ldw	r17,0(r6)
 800649c:	8822d43a 	srli	r17,r17,16
 80064a0:	88001f26 	beq	r17,zero,8006520 <__multiply+0x198>
 80064a4:	60c00017 	ldw	r3,0(r12)
 80064a8:	7013883a 	mov	r9,r14
 80064ac:	601f883a 	mov	r15,r12
 80064b0:	1811883a 	mov	r8,r3
 80064b4:	6027883a 	mov	r19,r12
 80064b8:	000f883a 	mov	r7,zero
 80064bc:	00000106 	br	80064c4 <__multiply+0x13c>
 80064c0:	9027883a 	mov	r19,r18
 80064c4:	4940000b 	ldhu	r5,0(r9)
 80064c8:	4010d43a 	srli	r8,r8,16
 80064cc:	193fffcc 	andi	r4,r3,65535
 80064d0:	2c4b383a 	mul	r5,r5,r17
 80064d4:	7bc00104 	addi	r15,r15,4
 80064d8:	4a400104 	addi	r9,r9,4
 80064dc:	2a0b883a 	add	r5,r5,r8
 80064e0:	29cb883a 	add	r5,r5,r7
 80064e4:	2806943a 	slli	r3,r5,16
 80064e8:	9c800104 	addi	r18,r19,4
 80064ec:	280ad43a 	srli	r5,r5,16
 80064f0:	1908b03a 	or	r4,r3,r4
 80064f4:	793fff15 	stw	r4,-4(r15)
 80064f8:	48ffff17 	ldw	r3,-4(r9)
 80064fc:	92000017 	ldw	r8,0(r18)
 8006500:	1806d43a 	srli	r3,r3,16
 8006504:	413fffcc 	andi	r4,r8,65535
 8006508:	1c47383a 	mul	r3,r3,r17
 800650c:	1907883a 	add	r3,r3,r4
 8006510:	1947883a 	add	r3,r3,r5
 8006514:	180ed43a 	srli	r7,r3,16
 8006518:	4abfe936 	bltu	r9,r10,80064c0 <__alt_data_end+0xfc0064c0>
 800651c:	98c00115 	stw	r3,4(r19)
 8006520:	31800104 	addi	r6,r6,4
 8006524:	63000104 	addi	r12,r12,4
 8006528:	337fbe36 	bltu	r6,r13,8006424 <__alt_data_end+0xfc006424>
 800652c:	0400090e 	bge	zero,r16,8006554 <__multiply+0x1cc>
 8006530:	58ffff17 	ldw	r3,-4(r11)
 8006534:	5affff04 	addi	r11,r11,-4
 8006538:	18000326 	beq	r3,zero,8006548 <__multiply+0x1c0>
 800653c:	00000506 	br	8006554 <__multiply+0x1cc>
 8006540:	58c00017 	ldw	r3,0(r11)
 8006544:	1800031e 	bne	r3,zero,8006554 <__multiply+0x1cc>
 8006548:	843fffc4 	addi	r16,r16,-1
 800654c:	5affff04 	addi	r11,r11,-4
 8006550:	803ffb1e 	bne	r16,zero,8006540 <__alt_data_end+0xfc006540>
 8006554:	14000415 	stw	r16,16(r2)
 8006558:	dfc00517 	ldw	ra,20(sp)
 800655c:	dd000417 	ldw	r20,16(sp)
 8006560:	dcc00317 	ldw	r19,12(sp)
 8006564:	dc800217 	ldw	r18,8(sp)
 8006568:	dc400117 	ldw	r17,4(sp)
 800656c:	dc000017 	ldw	r16,0(sp)
 8006570:	dec00604 	addi	sp,sp,24
 8006574:	f800283a 	ret
 8006578:	3029883a 	mov	r20,r6
 800657c:	2823883a 	mov	r17,r5
 8006580:	003f9006 	br	80063c4 <__alt_data_end+0xfc0063c4>

08006584 <__pow5mult>:
 8006584:	defffa04 	addi	sp,sp,-24
 8006588:	dcc00315 	stw	r19,12(sp)
 800658c:	dc800215 	stw	r18,8(sp)
 8006590:	dc000015 	stw	r16,0(sp)
 8006594:	dfc00515 	stw	ra,20(sp)
 8006598:	dd000415 	stw	r20,16(sp)
 800659c:	dc400115 	stw	r17,4(sp)
 80065a0:	308000cc 	andi	r2,r6,3
 80065a4:	3021883a 	mov	r16,r6
 80065a8:	2027883a 	mov	r19,r4
 80065ac:	2825883a 	mov	r18,r5
 80065b0:	10002e1e 	bne	r2,zero,800666c <__pow5mult+0xe8>
 80065b4:	8021d0ba 	srai	r16,r16,2
 80065b8:	80001a26 	beq	r16,zero,8006624 <__pow5mult+0xa0>
 80065bc:	9c401217 	ldw	r17,72(r19)
 80065c0:	8800061e 	bne	r17,zero,80065dc <__pow5mult+0x58>
 80065c4:	00003406 	br	8006698 <__pow5mult+0x114>
 80065c8:	8021d07a 	srai	r16,r16,1
 80065cc:	80001526 	beq	r16,zero,8006624 <__pow5mult+0xa0>
 80065d0:	88800017 	ldw	r2,0(r17)
 80065d4:	10001c26 	beq	r2,zero,8006648 <__pow5mult+0xc4>
 80065d8:	1023883a 	mov	r17,r2
 80065dc:	80c0004c 	andi	r3,r16,1
 80065e0:	183ff926 	beq	r3,zero,80065c8 <__alt_data_end+0xfc0065c8>
 80065e4:	900b883a 	mov	r5,r18
 80065e8:	880d883a 	mov	r6,r17
 80065ec:	9809883a 	mov	r4,r19
 80065f0:	80063880 	call	8006388 <__multiply>
 80065f4:	90001b26 	beq	r18,zero,8006664 <__pow5mult+0xe0>
 80065f8:	91c00117 	ldw	r7,4(r18)
 80065fc:	98c01317 	ldw	r3,76(r19)
 8006600:	8021d07a 	srai	r16,r16,1
 8006604:	39cf883a 	add	r7,r7,r7
 8006608:	39cf883a 	add	r7,r7,r7
 800660c:	19c7883a 	add	r3,r3,r7
 8006610:	19000017 	ldw	r4,0(r3)
 8006614:	91000015 	stw	r4,0(r18)
 8006618:	1c800015 	stw	r18,0(r3)
 800661c:	1025883a 	mov	r18,r2
 8006620:	803feb1e 	bne	r16,zero,80065d0 <__alt_data_end+0xfc0065d0>
 8006624:	9005883a 	mov	r2,r18
 8006628:	dfc00517 	ldw	ra,20(sp)
 800662c:	dd000417 	ldw	r20,16(sp)
 8006630:	dcc00317 	ldw	r19,12(sp)
 8006634:	dc800217 	ldw	r18,8(sp)
 8006638:	dc400117 	ldw	r17,4(sp)
 800663c:	dc000017 	ldw	r16,0(sp)
 8006640:	dec00604 	addi	sp,sp,24
 8006644:	f800283a 	ret
 8006648:	9809883a 	mov	r4,r19
 800664c:	880b883a 	mov	r5,r17
 8006650:	880d883a 	mov	r6,r17
 8006654:	80063880 	call	8006388 <__multiply>
 8006658:	88800015 	stw	r2,0(r17)
 800665c:	10000015 	stw	zero,0(r2)
 8006660:	003fdd06 	br	80065d8 <__alt_data_end+0xfc0065d8>
 8006664:	1025883a 	mov	r18,r2
 8006668:	003fd706 	br	80065c8 <__alt_data_end+0xfc0065c8>
 800666c:	10bfffc4 	addi	r2,r2,-1
 8006670:	1085883a 	add	r2,r2,r2
 8006674:	00c20074 	movhi	r3,2049
 8006678:	18fd4404 	addi	r3,r3,-2800
 800667c:	1085883a 	add	r2,r2,r2
 8006680:	1885883a 	add	r2,r3,r2
 8006684:	11800017 	ldw	r6,0(r2)
 8006688:	000f883a 	mov	r7,zero
 800668c:	800601c0 	call	800601c <__multadd>
 8006690:	1025883a 	mov	r18,r2
 8006694:	003fc706 	br	80065b4 <__alt_data_end+0xfc0065b4>
 8006698:	05000044 	movi	r20,1
 800669c:	9809883a 	mov	r4,r19
 80066a0:	a00b883a 	mov	r5,r20
 80066a4:	8005f4c0 	call	8005f4c <_Balloc>
 80066a8:	1023883a 	mov	r17,r2
 80066ac:	00809c44 	movi	r2,625
 80066b0:	88800515 	stw	r2,20(r17)
 80066b4:	8d000415 	stw	r20,16(r17)
 80066b8:	9c401215 	stw	r17,72(r19)
 80066bc:	88000015 	stw	zero,0(r17)
 80066c0:	003fc606 	br	80065dc <__alt_data_end+0xfc0065dc>

080066c4 <__lshift>:
 80066c4:	defff904 	addi	sp,sp,-28
 80066c8:	dd000415 	stw	r20,16(sp)
 80066cc:	dcc00315 	stw	r19,12(sp)
 80066d0:	3029d17a 	srai	r20,r6,5
 80066d4:	2cc00417 	ldw	r19,16(r5)
 80066d8:	28800217 	ldw	r2,8(r5)
 80066dc:	dd400515 	stw	r21,20(sp)
 80066e0:	a4e7883a 	add	r19,r20,r19
 80066e4:	dc800215 	stw	r18,8(sp)
 80066e8:	dc400115 	stw	r17,4(sp)
 80066ec:	dc000015 	stw	r16,0(sp)
 80066f0:	dfc00615 	stw	ra,24(sp)
 80066f4:	9c000044 	addi	r16,r19,1
 80066f8:	2823883a 	mov	r17,r5
 80066fc:	302b883a 	mov	r21,r6
 8006700:	2025883a 	mov	r18,r4
 8006704:	29400117 	ldw	r5,4(r5)
 8006708:	1400030e 	bge	r2,r16,8006718 <__lshift+0x54>
 800670c:	1085883a 	add	r2,r2,r2
 8006710:	29400044 	addi	r5,r5,1
 8006714:	143ffd16 	blt	r2,r16,800670c <__alt_data_end+0xfc00670c>
 8006718:	9009883a 	mov	r4,r18
 800671c:	8005f4c0 	call	8005f4c <_Balloc>
 8006720:	11c00504 	addi	r7,r2,20
 8006724:	0500090e 	bge	zero,r20,800674c <__lshift+0x88>
 8006728:	3811883a 	mov	r8,r7
 800672c:	0007883a 	mov	r3,zero
 8006730:	40000015 	stw	zero,0(r8)
 8006734:	18c00044 	addi	r3,r3,1
 8006738:	42000104 	addi	r8,r8,4
 800673c:	1d3ffc1e 	bne	r3,r20,8006730 <__alt_data_end+0xfc006730>
 8006740:	18c7883a 	add	r3,r3,r3
 8006744:	18c7883a 	add	r3,r3,r3
 8006748:	38cf883a 	add	r7,r7,r3
 800674c:	89000417 	ldw	r4,16(r17)
 8006750:	88c00504 	addi	r3,r17,20
 8006754:	a98007cc 	andi	r6,r21,31
 8006758:	2109883a 	add	r4,r4,r4
 800675c:	2109883a 	add	r4,r4,r4
 8006760:	1909883a 	add	r4,r3,r4
 8006764:	30002326 	beq	r6,zero,80067f4 <__lshift+0x130>
 8006768:	01400804 	movi	r5,32
 800676c:	298bc83a 	sub	r5,r5,r6
 8006770:	0013883a 	mov	r9,zero
 8006774:	1a000017 	ldw	r8,0(r3)
 8006778:	3815883a 	mov	r10,r7
 800677c:	39c00104 	addi	r7,r7,4
 8006780:	4190983a 	sll	r8,r8,r6
 8006784:	18c00104 	addi	r3,r3,4
 8006788:	4a10b03a 	or	r8,r9,r8
 800678c:	3a3fff15 	stw	r8,-4(r7)
 8006790:	1a3fff17 	ldw	r8,-4(r3)
 8006794:	4152d83a 	srl	r9,r8,r5
 8006798:	193ff636 	bltu	r3,r4,8006774 <__alt_data_end+0xfc006774>
 800679c:	52400115 	stw	r9,4(r10)
 80067a0:	48000126 	beq	r9,zero,80067a8 <__lshift+0xe4>
 80067a4:	9c000084 	addi	r16,r19,2
 80067a8:	89000117 	ldw	r4,4(r17)
 80067ac:	90c01317 	ldw	r3,76(r18)
 80067b0:	843fffc4 	addi	r16,r16,-1
 80067b4:	2109883a 	add	r4,r4,r4
 80067b8:	2109883a 	add	r4,r4,r4
 80067bc:	1907883a 	add	r3,r3,r4
 80067c0:	19000017 	ldw	r4,0(r3)
 80067c4:	14000415 	stw	r16,16(r2)
 80067c8:	89000015 	stw	r4,0(r17)
 80067cc:	1c400015 	stw	r17,0(r3)
 80067d0:	dfc00617 	ldw	ra,24(sp)
 80067d4:	dd400517 	ldw	r21,20(sp)
 80067d8:	dd000417 	ldw	r20,16(sp)
 80067dc:	dcc00317 	ldw	r19,12(sp)
 80067e0:	dc800217 	ldw	r18,8(sp)
 80067e4:	dc400117 	ldw	r17,4(sp)
 80067e8:	dc000017 	ldw	r16,0(sp)
 80067ec:	dec00704 	addi	sp,sp,28
 80067f0:	f800283a 	ret
 80067f4:	19400017 	ldw	r5,0(r3)
 80067f8:	39c00104 	addi	r7,r7,4
 80067fc:	18c00104 	addi	r3,r3,4
 8006800:	397fff15 	stw	r5,-4(r7)
 8006804:	193ffb36 	bltu	r3,r4,80067f4 <__alt_data_end+0xfc0067f4>
 8006808:	003fe706 	br	80067a8 <__alt_data_end+0xfc0067a8>

0800680c <__mcmp>:
 800680c:	20800417 	ldw	r2,16(r4)
 8006810:	28c00417 	ldw	r3,16(r5)
 8006814:	10c5c83a 	sub	r2,r2,r3
 8006818:	1000111e 	bne	r2,zero,8006860 <__mcmp+0x54>
 800681c:	18c7883a 	add	r3,r3,r3
 8006820:	18c7883a 	add	r3,r3,r3
 8006824:	21000504 	addi	r4,r4,20
 8006828:	29400504 	addi	r5,r5,20
 800682c:	20c5883a 	add	r2,r4,r3
 8006830:	28cb883a 	add	r5,r5,r3
 8006834:	00000106 	br	800683c <__mcmp+0x30>
 8006838:	20800a2e 	bgeu	r4,r2,8006864 <__mcmp+0x58>
 800683c:	10bfff04 	addi	r2,r2,-4
 8006840:	297fff04 	addi	r5,r5,-4
 8006844:	11800017 	ldw	r6,0(r2)
 8006848:	28c00017 	ldw	r3,0(r5)
 800684c:	30fffa26 	beq	r6,r3,8006838 <__alt_data_end+0xfc006838>
 8006850:	30c00236 	bltu	r6,r3,800685c <__mcmp+0x50>
 8006854:	00800044 	movi	r2,1
 8006858:	f800283a 	ret
 800685c:	00bfffc4 	movi	r2,-1
 8006860:	f800283a 	ret
 8006864:	0005883a 	mov	r2,zero
 8006868:	f800283a 	ret

0800686c <__mdiff>:
 800686c:	defffb04 	addi	sp,sp,-20
 8006870:	dc000015 	stw	r16,0(sp)
 8006874:	2821883a 	mov	r16,r5
 8006878:	dcc00315 	stw	r19,12(sp)
 800687c:	300b883a 	mov	r5,r6
 8006880:	2027883a 	mov	r19,r4
 8006884:	8009883a 	mov	r4,r16
 8006888:	dc800215 	stw	r18,8(sp)
 800688c:	dfc00415 	stw	ra,16(sp)
 8006890:	dc400115 	stw	r17,4(sp)
 8006894:	3025883a 	mov	r18,r6
 8006898:	800680c0 	call	800680c <__mcmp>
 800689c:	10005226 	beq	r2,zero,80069e8 <__mdiff+0x17c>
 80068a0:	10004c16 	blt	r2,zero,80069d4 <__mdiff+0x168>
 80068a4:	0023883a 	mov	r17,zero
 80068a8:	81400117 	ldw	r5,4(r16)
 80068ac:	9809883a 	mov	r4,r19
 80068b0:	8005f4c0 	call	8005f4c <_Balloc>
 80068b4:	83400417 	ldw	r13,16(r16)
 80068b8:	93800417 	ldw	r14,16(r18)
 80068bc:	81000504 	addi	r4,r16,20
 80068c0:	6b59883a 	add	r12,r13,r13
 80068c4:	739d883a 	add	r14,r14,r14
 80068c8:	6319883a 	add	r12,r12,r12
 80068cc:	91800504 	addi	r6,r18,20
 80068d0:	739d883a 	add	r14,r14,r14
 80068d4:	14400315 	stw	r17,12(r2)
 80068d8:	2319883a 	add	r12,r4,r12
 80068dc:	339d883a 	add	r14,r6,r14
 80068e0:	12400504 	addi	r9,r2,20
 80068e4:	0007883a 	mov	r3,zero
 80068e8:	22000017 	ldw	r8,0(r4)
 80068ec:	32800017 	ldw	r10,0(r6)
 80068f0:	4ac00104 	addi	r11,r9,4
 80068f4:	41ffffcc 	andi	r7,r8,65535
 80068f8:	38c7883a 	add	r3,r7,r3
 80068fc:	51ffffcc 	andi	r7,r10,65535
 8006900:	19cfc83a 	sub	r7,r3,r7
 8006904:	4010d43a 	srli	r8,r8,16
 8006908:	5014d43a 	srli	r10,r10,16
 800690c:	3807d43a 	srai	r3,r7,16
 8006910:	39ffffcc 	andi	r7,r7,65535
 8006914:	4291c83a 	sub	r8,r8,r10
 8006918:	40c7883a 	add	r3,r8,r3
 800691c:	1810943a 	slli	r8,r3,16
 8006920:	31800104 	addi	r6,r6,4
 8006924:	21000104 	addi	r4,r4,4
 8006928:	41ceb03a 	or	r7,r8,r7
 800692c:	49c00015 	stw	r7,0(r9)
 8006930:	1807d43a 	srai	r3,r3,16
 8006934:	580b883a 	mov	r5,r11
 8006938:	5813883a 	mov	r9,r11
 800693c:	33bfea36 	bltu	r6,r14,80068e8 <__alt_data_end+0xfc0068e8>
 8006940:	2011883a 	mov	r8,r4
 8006944:	2300152e 	bgeu	r4,r12,800699c <__mdiff+0x130>
 8006948:	21400017 	ldw	r5,0(r4)
 800694c:	4a400104 	addi	r9,r9,4
 8006950:	21000104 	addi	r4,r4,4
 8006954:	29ffffcc 	andi	r7,r5,65535
 8006958:	38c7883a 	add	r3,r7,r3
 800695c:	280ad43a 	srli	r5,r5,16
 8006960:	180dd43a 	srai	r6,r3,16
 8006964:	19ffffcc 	andi	r7,r3,65535
 8006968:	3147883a 	add	r3,r6,r5
 800696c:	180a943a 	slli	r5,r3,16
 8006970:	1807d43a 	srai	r3,r3,16
 8006974:	29ceb03a 	or	r7,r5,r7
 8006978:	49ffff15 	stw	r7,-4(r9)
 800697c:	233ff236 	bltu	r4,r12,8006948 <__alt_data_end+0xfc006948>
 8006980:	0206303a 	nor	r3,zero,r8
 8006984:	1b07883a 	add	r3,r3,r12
 8006988:	1806d0ba 	srli	r3,r3,2
 800698c:	18c00044 	addi	r3,r3,1
 8006990:	18c7883a 	add	r3,r3,r3
 8006994:	18c7883a 	add	r3,r3,r3
 8006998:	58cb883a 	add	r5,r11,r3
 800699c:	28ffff04 	addi	r3,r5,-4
 80069a0:	3800041e 	bne	r7,zero,80069b4 <__mdiff+0x148>
 80069a4:	18ffff04 	addi	r3,r3,-4
 80069a8:	19000017 	ldw	r4,0(r3)
 80069ac:	6b7fffc4 	addi	r13,r13,-1
 80069b0:	203ffc26 	beq	r4,zero,80069a4 <__alt_data_end+0xfc0069a4>
 80069b4:	13400415 	stw	r13,16(r2)
 80069b8:	dfc00417 	ldw	ra,16(sp)
 80069bc:	dcc00317 	ldw	r19,12(sp)
 80069c0:	dc800217 	ldw	r18,8(sp)
 80069c4:	dc400117 	ldw	r17,4(sp)
 80069c8:	dc000017 	ldw	r16,0(sp)
 80069cc:	dec00504 	addi	sp,sp,20
 80069d0:	f800283a 	ret
 80069d4:	8005883a 	mov	r2,r16
 80069d8:	04400044 	movi	r17,1
 80069dc:	9021883a 	mov	r16,r18
 80069e0:	1025883a 	mov	r18,r2
 80069e4:	003fb006 	br	80068a8 <__alt_data_end+0xfc0068a8>
 80069e8:	9809883a 	mov	r4,r19
 80069ec:	000b883a 	mov	r5,zero
 80069f0:	8005f4c0 	call	8005f4c <_Balloc>
 80069f4:	00c00044 	movi	r3,1
 80069f8:	10c00415 	stw	r3,16(r2)
 80069fc:	10000515 	stw	zero,20(r2)
 8006a00:	003fed06 	br	80069b8 <__alt_data_end+0xfc0069b8>

08006a04 <__ulp>:
 8006a04:	295ffc2c 	andhi	r5,r5,32752
 8006a08:	00bf3034 	movhi	r2,64704
 8006a0c:	2887883a 	add	r3,r5,r2
 8006a10:	00c0020e 	bge	zero,r3,8006a1c <__ulp+0x18>
 8006a14:	0005883a 	mov	r2,zero
 8006a18:	f800283a 	ret
 8006a1c:	00c7c83a 	sub	r3,zero,r3
 8006a20:	180bd53a 	srai	r5,r3,20
 8006a24:	008004c4 	movi	r2,19
 8006a28:	11400a0e 	bge	r2,r5,8006a54 <__ulp+0x50>
 8006a2c:	00800c84 	movi	r2,50
 8006a30:	0007883a 	mov	r3,zero
 8006a34:	11400516 	blt	r2,r5,8006a4c <__ulp+0x48>
 8006a38:	00800cc4 	movi	r2,51
 8006a3c:	114bc83a 	sub	r5,r2,r5
 8006a40:	00800044 	movi	r2,1
 8006a44:	1144983a 	sll	r2,r2,r5
 8006a48:	f800283a 	ret
 8006a4c:	00800044 	movi	r2,1
 8006a50:	f800283a 	ret
 8006a54:	00800234 	movhi	r2,8
 8006a58:	1147d83a 	sra	r3,r2,r5
 8006a5c:	0005883a 	mov	r2,zero
 8006a60:	f800283a 	ret

08006a64 <__b2d>:
 8006a64:	defffa04 	addi	sp,sp,-24
 8006a68:	dc000015 	stw	r16,0(sp)
 8006a6c:	24000417 	ldw	r16,16(r4)
 8006a70:	dc400115 	stw	r17,4(sp)
 8006a74:	24400504 	addi	r17,r4,20
 8006a78:	8421883a 	add	r16,r16,r16
 8006a7c:	8421883a 	add	r16,r16,r16
 8006a80:	8c21883a 	add	r16,r17,r16
 8006a84:	dc800215 	stw	r18,8(sp)
 8006a88:	84bfff17 	ldw	r18,-4(r16)
 8006a8c:	dd000415 	stw	r20,16(sp)
 8006a90:	dcc00315 	stw	r19,12(sp)
 8006a94:	9009883a 	mov	r4,r18
 8006a98:	2829883a 	mov	r20,r5
 8006a9c:	dfc00515 	stw	ra,20(sp)
 8006aa0:	80062340 	call	8006234 <__hi0bits>
 8006aa4:	00c00804 	movi	r3,32
 8006aa8:	1887c83a 	sub	r3,r3,r2
 8006aac:	a0c00015 	stw	r3,0(r20)
 8006ab0:	00c00284 	movi	r3,10
 8006ab4:	84ffff04 	addi	r19,r16,-4
 8006ab8:	18801216 	blt	r3,r2,8006b04 <__b2d+0xa0>
 8006abc:	014002c4 	movi	r5,11
 8006ac0:	2889c83a 	sub	r4,r5,r2
 8006ac4:	9106d83a 	srl	r3,r18,r4
 8006ac8:	18cffc34 	orhi	r3,r3,16368
 8006acc:	8cc0282e 	bgeu	r17,r19,8006b70 <__b2d+0x10c>
 8006ad0:	817ffe17 	ldw	r5,-8(r16)
 8006ad4:	290ad83a 	srl	r5,r5,r4
 8006ad8:	10800544 	addi	r2,r2,21
 8006adc:	9084983a 	sll	r2,r18,r2
 8006ae0:	2884b03a 	or	r2,r5,r2
 8006ae4:	dfc00517 	ldw	ra,20(sp)
 8006ae8:	dd000417 	ldw	r20,16(sp)
 8006aec:	dcc00317 	ldw	r19,12(sp)
 8006af0:	dc800217 	ldw	r18,8(sp)
 8006af4:	dc400117 	ldw	r17,4(sp)
 8006af8:	dc000017 	ldw	r16,0(sp)
 8006afc:	dec00604 	addi	sp,sp,24
 8006b00:	f800283a 	ret
 8006b04:	113ffd44 	addi	r4,r2,-11
 8006b08:	8cc00f2e 	bgeu	r17,r19,8006b48 <__b2d+0xe4>
 8006b0c:	81bffe04 	addi	r6,r16,-8
 8006b10:	817ffe17 	ldw	r5,-8(r16)
 8006b14:	20001326 	beq	r4,zero,8006b64 <__b2d+0x100>
 8006b18:	00c00ac4 	movi	r3,43
 8006b1c:	1885c83a 	sub	r2,r3,r2
 8006b20:	2886d83a 	srl	r3,r5,r2
 8006b24:	9124983a 	sll	r18,r18,r4
 8006b28:	90e4b03a 	or	r18,r18,r3
 8006b2c:	90cffc34 	orhi	r3,r18,16368
 8006b30:	8980112e 	bgeu	r17,r6,8006b78 <__b2d+0x114>
 8006b34:	81bffd17 	ldw	r6,-12(r16)
 8006b38:	308cd83a 	srl	r6,r6,r2
 8006b3c:	2904983a 	sll	r2,r5,r4
 8006b40:	1184b03a 	or	r2,r2,r6
 8006b44:	003fe706 	br	8006ae4 <__alt_data_end+0xfc006ae4>
 8006b48:	20000526 	beq	r4,zero,8006b60 <__b2d+0xfc>
 8006b4c:	9124983a 	sll	r18,r18,r4
 8006b50:	000d883a 	mov	r6,zero
 8006b54:	000b883a 	mov	r5,zero
 8006b58:	90cffc34 	orhi	r3,r18,16368
 8006b5c:	003ff706 	br	8006b3c <__alt_data_end+0xfc006b3c>
 8006b60:	000b883a 	mov	r5,zero
 8006b64:	90cffc34 	orhi	r3,r18,16368
 8006b68:	2805883a 	mov	r2,r5
 8006b6c:	003fdd06 	br	8006ae4 <__alt_data_end+0xfc006ae4>
 8006b70:	000b883a 	mov	r5,zero
 8006b74:	003fd806 	br	8006ad8 <__alt_data_end+0xfc006ad8>
 8006b78:	000d883a 	mov	r6,zero
 8006b7c:	003fef06 	br	8006b3c <__alt_data_end+0xfc006b3c>

08006b80 <__d2b>:
 8006b80:	defff704 	addi	sp,sp,-36
 8006b84:	dc000215 	stw	r16,8(sp)
 8006b88:	3021883a 	mov	r16,r6
 8006b8c:	dc400315 	stw	r17,12(sp)
 8006b90:	8022907a 	slli	r17,r16,1
 8006b94:	dd400715 	stw	r21,28(sp)
 8006b98:	282b883a 	mov	r21,r5
 8006b9c:	01400044 	movi	r5,1
 8006ba0:	dd000615 	stw	r20,24(sp)
 8006ba4:	dcc00515 	stw	r19,20(sp)
 8006ba8:	dc800415 	stw	r18,16(sp)
 8006bac:	dfc00815 	stw	ra,32(sp)
 8006bb0:	3829883a 	mov	r20,r7
 8006bb4:	dc800917 	ldw	r18,36(sp)
 8006bb8:	8822d57a 	srli	r17,r17,21
 8006bbc:	8005f4c0 	call	8005f4c <_Balloc>
 8006bc0:	1027883a 	mov	r19,r2
 8006bc4:	00800434 	movhi	r2,16
 8006bc8:	10bfffc4 	addi	r2,r2,-1
 8006bcc:	808c703a 	and	r6,r16,r2
 8006bd0:	88000126 	beq	r17,zero,8006bd8 <__d2b+0x58>
 8006bd4:	31800434 	orhi	r6,r6,16
 8006bd8:	d9800015 	stw	r6,0(sp)
 8006bdc:	a8001f26 	beq	r21,zero,8006c5c <__d2b+0xdc>
 8006be0:	d9000104 	addi	r4,sp,4
 8006be4:	dd400115 	stw	r21,4(sp)
 8006be8:	800629c0 	call	800629c <__lo0bits>
 8006bec:	d8c00017 	ldw	r3,0(sp)
 8006bf0:	1000291e 	bne	r2,zero,8006c98 <__d2b+0x118>
 8006bf4:	d9000117 	ldw	r4,4(sp)
 8006bf8:	99000515 	stw	r4,20(r19)
 8006bfc:	1820c03a 	cmpne	r16,r3,zero
 8006c00:	84000044 	addi	r16,r16,1
 8006c04:	98c00615 	stw	r3,24(r19)
 8006c08:	9c000415 	stw	r16,16(r19)
 8006c0c:	88001b1e 	bne	r17,zero,8006c7c <__d2b+0xfc>
 8006c10:	800690ba 	slli	r3,r16,2
 8006c14:	10bef384 	addi	r2,r2,-1074
 8006c18:	a0800015 	stw	r2,0(r20)
 8006c1c:	98c5883a 	add	r2,r19,r3
 8006c20:	11000417 	ldw	r4,16(r2)
 8006c24:	8020917a 	slli	r16,r16,5
 8006c28:	80062340 	call	8006234 <__hi0bits>
 8006c2c:	8085c83a 	sub	r2,r16,r2
 8006c30:	90800015 	stw	r2,0(r18)
 8006c34:	9805883a 	mov	r2,r19
 8006c38:	dfc00817 	ldw	ra,32(sp)
 8006c3c:	dd400717 	ldw	r21,28(sp)
 8006c40:	dd000617 	ldw	r20,24(sp)
 8006c44:	dcc00517 	ldw	r19,20(sp)
 8006c48:	dc800417 	ldw	r18,16(sp)
 8006c4c:	dc400317 	ldw	r17,12(sp)
 8006c50:	dc000217 	ldw	r16,8(sp)
 8006c54:	dec00904 	addi	sp,sp,36
 8006c58:	f800283a 	ret
 8006c5c:	d809883a 	mov	r4,sp
 8006c60:	800629c0 	call	800629c <__lo0bits>
 8006c64:	d8c00017 	ldw	r3,0(sp)
 8006c68:	04000044 	movi	r16,1
 8006c6c:	9c000415 	stw	r16,16(r19)
 8006c70:	98c00515 	stw	r3,20(r19)
 8006c74:	10800804 	addi	r2,r2,32
 8006c78:	883fe526 	beq	r17,zero,8006c10 <__alt_data_end+0xfc006c10>
 8006c7c:	8c7ef344 	addi	r17,r17,-1075
 8006c80:	88a3883a 	add	r17,r17,r2
 8006c84:	00c00d44 	movi	r3,53
 8006c88:	a4400015 	stw	r17,0(r20)
 8006c8c:	1885c83a 	sub	r2,r3,r2
 8006c90:	90800015 	stw	r2,0(r18)
 8006c94:	003fe706 	br	8006c34 <__alt_data_end+0xfc006c34>
 8006c98:	01000804 	movi	r4,32
 8006c9c:	2089c83a 	sub	r4,r4,r2
 8006ca0:	1908983a 	sll	r4,r3,r4
 8006ca4:	d9400117 	ldw	r5,4(sp)
 8006ca8:	1886d83a 	srl	r3,r3,r2
 8006cac:	2148b03a 	or	r4,r4,r5
 8006cb0:	99000515 	stw	r4,20(r19)
 8006cb4:	d8c00015 	stw	r3,0(sp)
 8006cb8:	003fd006 	br	8006bfc <__alt_data_end+0xfc006bfc>

08006cbc <__ratio>:
 8006cbc:	defff904 	addi	sp,sp,-28
 8006cc0:	dc400315 	stw	r17,12(sp)
 8006cc4:	2823883a 	mov	r17,r5
 8006cc8:	d9400104 	addi	r5,sp,4
 8006ccc:	dfc00615 	stw	ra,24(sp)
 8006cd0:	dcc00515 	stw	r19,20(sp)
 8006cd4:	dc800415 	stw	r18,16(sp)
 8006cd8:	2027883a 	mov	r19,r4
 8006cdc:	dc000215 	stw	r16,8(sp)
 8006ce0:	8006a640 	call	8006a64 <__b2d>
 8006ce4:	8809883a 	mov	r4,r17
 8006ce8:	d80b883a 	mov	r5,sp
 8006cec:	1025883a 	mov	r18,r2
 8006cf0:	1821883a 	mov	r16,r3
 8006cf4:	8006a640 	call	8006a64 <__b2d>
 8006cf8:	8a400417 	ldw	r9,16(r17)
 8006cfc:	9a000417 	ldw	r8,16(r19)
 8006d00:	100d883a 	mov	r6,r2
 8006d04:	d8800017 	ldw	r2,0(sp)
 8006d08:	4251c83a 	sub	r8,r8,r9
 8006d0c:	4012917a 	slli	r9,r8,5
 8006d10:	da000117 	ldw	r8,4(sp)
 8006d14:	4091c83a 	sub	r8,r8,r2
 8006d18:	4251883a 	add	r8,r8,r9
 8006d1c:	02000d0e 	bge	zero,r8,8006d54 <__ratio+0x98>
 8006d20:	4010953a 	slli	r8,r8,20
 8006d24:	4421883a 	add	r16,r8,r16
 8006d28:	9009883a 	mov	r4,r18
 8006d2c:	800b883a 	mov	r5,r16
 8006d30:	180f883a 	mov	r7,r3
 8006d34:	800aa040 	call	800aa04 <__divdf3>
 8006d38:	dfc00617 	ldw	ra,24(sp)
 8006d3c:	dcc00517 	ldw	r19,20(sp)
 8006d40:	dc800417 	ldw	r18,16(sp)
 8006d44:	dc400317 	ldw	r17,12(sp)
 8006d48:	dc000217 	ldw	r16,8(sp)
 8006d4c:	dec00704 	addi	sp,sp,28
 8006d50:	f800283a 	ret
 8006d54:	4010953a 	slli	r8,r8,20
 8006d58:	1a07c83a 	sub	r3,r3,r8
 8006d5c:	003ff206 	br	8006d28 <__alt_data_end+0xfc006d28>

08006d60 <_mprec_log10>:
 8006d60:	defffe04 	addi	sp,sp,-8
 8006d64:	dc000015 	stw	r16,0(sp)
 8006d68:	dfc00115 	stw	ra,4(sp)
 8006d6c:	008005c4 	movi	r2,23
 8006d70:	2021883a 	mov	r16,r4
 8006d74:	11000d0e 	bge	r2,r4,8006dac <_mprec_log10+0x4c>
 8006d78:	0005883a 	mov	r2,zero
 8006d7c:	00cffc34 	movhi	r3,16368
 8006d80:	843fffc4 	addi	r16,r16,-1
 8006d84:	1009883a 	mov	r4,r2
 8006d88:	180b883a 	mov	r5,r3
 8006d8c:	000d883a 	mov	r6,zero
 8006d90:	01d00934 	movhi	r7,16420
 8006d94:	800b5140 	call	800b514 <__muldf3>
 8006d98:	803ff91e 	bne	r16,zero,8006d80 <__alt_data_end+0xfc006d80>
 8006d9c:	dfc00117 	ldw	ra,4(sp)
 8006da0:	dc000017 	ldw	r16,0(sp)
 8006da4:	dec00204 	addi	sp,sp,8
 8006da8:	f800283a 	ret
 8006dac:	202090fa 	slli	r16,r4,3
 8006db0:	00820074 	movhi	r2,2049
 8006db4:	10bd5b04 	addi	r2,r2,-2708
 8006db8:	1421883a 	add	r16,r2,r16
 8006dbc:	80800017 	ldw	r2,0(r16)
 8006dc0:	80c00117 	ldw	r3,4(r16)
 8006dc4:	dfc00117 	ldw	ra,4(sp)
 8006dc8:	dc000017 	ldw	r16,0(sp)
 8006dcc:	dec00204 	addi	sp,sp,8
 8006dd0:	f800283a 	ret

08006dd4 <__copybits>:
 8006dd4:	297fffc4 	addi	r5,r5,-1
 8006dd8:	280fd17a 	srai	r7,r5,5
 8006ddc:	30c00417 	ldw	r3,16(r6)
 8006de0:	30800504 	addi	r2,r6,20
 8006de4:	39c00044 	addi	r7,r7,1
 8006de8:	18c7883a 	add	r3,r3,r3
 8006dec:	39cf883a 	add	r7,r7,r7
 8006df0:	18c7883a 	add	r3,r3,r3
 8006df4:	39cf883a 	add	r7,r7,r7
 8006df8:	10c7883a 	add	r3,r2,r3
 8006dfc:	21cf883a 	add	r7,r4,r7
 8006e00:	10c00d2e 	bgeu	r2,r3,8006e38 <__copybits+0x64>
 8006e04:	200b883a 	mov	r5,r4
 8006e08:	12000017 	ldw	r8,0(r2)
 8006e0c:	29400104 	addi	r5,r5,4
 8006e10:	10800104 	addi	r2,r2,4
 8006e14:	2a3fff15 	stw	r8,-4(r5)
 8006e18:	10fffb36 	bltu	r2,r3,8006e08 <__alt_data_end+0xfc006e08>
 8006e1c:	1985c83a 	sub	r2,r3,r6
 8006e20:	10bffac4 	addi	r2,r2,-21
 8006e24:	1004d0ba 	srli	r2,r2,2
 8006e28:	10800044 	addi	r2,r2,1
 8006e2c:	1085883a 	add	r2,r2,r2
 8006e30:	1085883a 	add	r2,r2,r2
 8006e34:	2089883a 	add	r4,r4,r2
 8006e38:	21c0032e 	bgeu	r4,r7,8006e48 <__copybits+0x74>
 8006e3c:	20000015 	stw	zero,0(r4)
 8006e40:	21000104 	addi	r4,r4,4
 8006e44:	21fffd36 	bltu	r4,r7,8006e3c <__alt_data_end+0xfc006e3c>
 8006e48:	f800283a 	ret

08006e4c <__any_on>:
 8006e4c:	20c00417 	ldw	r3,16(r4)
 8006e50:	2805d17a 	srai	r2,r5,5
 8006e54:	21000504 	addi	r4,r4,20
 8006e58:	18800d0e 	bge	r3,r2,8006e90 <__any_on+0x44>
 8006e5c:	18c7883a 	add	r3,r3,r3
 8006e60:	18c7883a 	add	r3,r3,r3
 8006e64:	20c7883a 	add	r3,r4,r3
 8006e68:	20c0192e 	bgeu	r4,r3,8006ed0 <__any_on+0x84>
 8006e6c:	18bfff17 	ldw	r2,-4(r3)
 8006e70:	18ffff04 	addi	r3,r3,-4
 8006e74:	1000041e 	bne	r2,zero,8006e88 <__any_on+0x3c>
 8006e78:	20c0142e 	bgeu	r4,r3,8006ecc <__any_on+0x80>
 8006e7c:	18ffff04 	addi	r3,r3,-4
 8006e80:	19400017 	ldw	r5,0(r3)
 8006e84:	283ffc26 	beq	r5,zero,8006e78 <__alt_data_end+0xfc006e78>
 8006e88:	00800044 	movi	r2,1
 8006e8c:	f800283a 	ret
 8006e90:	10c00a0e 	bge	r2,r3,8006ebc <__any_on+0x70>
 8006e94:	1085883a 	add	r2,r2,r2
 8006e98:	1085883a 	add	r2,r2,r2
 8006e9c:	294007cc 	andi	r5,r5,31
 8006ea0:	2087883a 	add	r3,r4,r2
 8006ea4:	283ff026 	beq	r5,zero,8006e68 <__alt_data_end+0xfc006e68>
 8006ea8:	19800017 	ldw	r6,0(r3)
 8006eac:	3144d83a 	srl	r2,r6,r5
 8006eb0:	114a983a 	sll	r5,r2,r5
 8006eb4:	29bff41e 	bne	r5,r6,8006e88 <__alt_data_end+0xfc006e88>
 8006eb8:	003feb06 	br	8006e68 <__alt_data_end+0xfc006e68>
 8006ebc:	1085883a 	add	r2,r2,r2
 8006ec0:	1085883a 	add	r2,r2,r2
 8006ec4:	2087883a 	add	r3,r4,r2
 8006ec8:	003fe706 	br	8006e68 <__alt_data_end+0xfc006e68>
 8006ecc:	f800283a 	ret
 8006ed0:	0005883a 	mov	r2,zero
 8006ed4:	f800283a 	ret

08006ed8 <_realloc_r>:
 8006ed8:	defff604 	addi	sp,sp,-40
 8006edc:	dcc00315 	stw	r19,12(sp)
 8006ee0:	dc400115 	stw	r17,4(sp)
 8006ee4:	dfc00915 	stw	ra,36(sp)
 8006ee8:	df000815 	stw	fp,32(sp)
 8006eec:	ddc00715 	stw	r23,28(sp)
 8006ef0:	dd800615 	stw	r22,24(sp)
 8006ef4:	dd400515 	stw	r21,20(sp)
 8006ef8:	dd000415 	stw	r20,16(sp)
 8006efc:	dc800215 	stw	r18,8(sp)
 8006f00:	dc000015 	stw	r16,0(sp)
 8006f04:	2827883a 	mov	r19,r5
 8006f08:	3023883a 	mov	r17,r6
 8006f0c:	2800bf26 	beq	r5,zero,800720c <_realloc_r+0x334>
 8006f10:	2025883a 	mov	r18,r4
 8006f14:	800cd280 	call	800cd28 <__malloc_lock>
 8006f18:	98ffff17 	ldw	r3,-4(r19)
 8006f1c:	01bfff04 	movi	r6,-4
 8006f20:	890002c4 	addi	r4,r17,11
 8006f24:	01c00584 	movi	r7,22
 8006f28:	9d7ffe04 	addi	r21,r19,-8
 8006f2c:	19a0703a 	and	r16,r3,r6
 8006f30:	39003f2e 	bgeu	r7,r4,8007030 <_realloc_r+0x158>
 8006f34:	053ffe04 	movi	r20,-8
 8006f38:	2528703a 	and	r20,r4,r20
 8006f3c:	a00f883a 	mov	r7,r20
 8006f40:	a0008216 	blt	r20,zero,800714c <_realloc_r+0x274>
 8006f44:	a4408136 	bltu	r20,r17,800714c <_realloc_r+0x274>
 8006f48:	81c03c0e 	bge	r16,r7,800703c <_realloc_r+0x164>
 8006f4c:	07020074 	movhi	fp,2049
 8006f50:	e73f0f04 	addi	fp,fp,-964
 8006f54:	e1000217 	ldw	r4,8(fp)
 8006f58:	ac05883a 	add	r2,r21,r16
 8006f5c:	2080bf26 	beq	r4,r2,800725c <_realloc_r+0x384>
 8006f60:	11000117 	ldw	r4,4(r2)
 8006f64:	023fff84 	movi	r8,-2
 8006f68:	2210703a 	and	r8,r4,r8
 8006f6c:	1211883a 	add	r8,r2,r8
 8006f70:	41400117 	ldw	r5,4(r8)
 8006f74:	2940004c 	andi	r5,r5,1
 8006f78:	28004a1e 	bne	r5,zero,80070a4 <_realloc_r+0x1cc>
 8006f7c:	017fff04 	movi	r5,-4
 8006f80:	2148703a 	and	r4,r4,r5
 8006f84:	2409883a 	add	r4,r4,r16
 8006f88:	21c0ad0e 	bge	r4,r7,8007240 <_realloc_r+0x368>
 8006f8c:	18c0004c 	andi	r3,r3,1
 8006f90:	18007f1e 	bne	r3,zero,8007190 <_realloc_r+0x2b8>
 8006f94:	9dfffe17 	ldw	r23,-8(r19)
 8006f98:	adefc83a 	sub	r23,r21,r23
 8006f9c:	bd800117 	ldw	r22,4(r23)
 8006fa0:	b14a703a 	and	r5,r22,r5
 8006fa4:	216d883a 	add	r22,r4,r5
 8006fa8:	b1c04516 	blt	r22,r7,80070c0 <_realloc_r+0x1e8>
 8006fac:	10c00317 	ldw	r3,12(r2)
 8006fb0:	10800217 	ldw	r2,8(r2)
 8006fb4:	81bfff04 	addi	r6,r16,-4
 8006fb8:	bc400204 	addi	r17,r23,8
 8006fbc:	10c00315 	stw	r3,12(r2)
 8006fc0:	18800215 	stw	r2,8(r3)
 8006fc4:	b9400217 	ldw	r5,8(r23)
 8006fc8:	b8c00317 	ldw	r3,12(r23)
 8006fcc:	00800904 	movi	r2,36
 8006fd0:	28c00315 	stw	r3,12(r5)
 8006fd4:	19400215 	stw	r5,8(r3)
 8006fd8:	1180ef36 	bltu	r2,r6,8007398 <_realloc_r+0x4c0>
 8006fdc:	008004c4 	movi	r2,19
 8006fe0:	1180da2e 	bgeu	r2,r6,800734c <_realloc_r+0x474>
 8006fe4:	98800017 	ldw	r2,0(r19)
 8006fe8:	b8800215 	stw	r2,8(r23)
 8006fec:	98800117 	ldw	r2,4(r19)
 8006ff0:	b8800315 	stw	r2,12(r23)
 8006ff4:	008006c4 	movi	r2,27
 8006ff8:	1180fc2e 	bgeu	r2,r6,80073ec <_realloc_r+0x514>
 8006ffc:	98800217 	ldw	r2,8(r19)
 8007000:	b8800415 	stw	r2,16(r23)
 8007004:	98800317 	ldw	r2,12(r19)
 8007008:	b8800515 	stw	r2,20(r23)
 800700c:	00800904 	movi	r2,36
 8007010:	3080421e 	bne	r6,r2,800711c <_realloc_r+0x244>
 8007014:	98800417 	ldw	r2,16(r19)
 8007018:	9cc00604 	addi	r19,r19,24
 800701c:	b8c00804 	addi	r3,r23,32
 8007020:	b8800615 	stw	r2,24(r23)
 8007024:	98bfff17 	ldw	r2,-4(r19)
 8007028:	b8800715 	stw	r2,28(r23)
 800702c:	00003d06 	br	8007124 <_realloc_r+0x24c>
 8007030:	01c00404 	movi	r7,16
 8007034:	3829883a 	mov	r20,r7
 8007038:	003fc206 	br	8006f44 <__alt_data_end+0xfc006f44>
 800703c:	9823883a 	mov	r17,r19
 8007040:	850fc83a 	sub	r7,r16,r20
 8007044:	008003c4 	movi	r2,15
 8007048:	18c0004c 	andi	r3,r3,1
 800704c:	11c04336 	bltu	r2,r7,800715c <_realloc_r+0x284>
 8007050:	1c06b03a 	or	r3,r3,r16
 8007054:	a8c00115 	stw	r3,4(r21)
 8007058:	ac21883a 	add	r16,r21,r16
 800705c:	80c00117 	ldw	r3,4(r16)
 8007060:	18c00054 	ori	r3,r3,1
 8007064:	80c00115 	stw	r3,4(r16)
 8007068:	9009883a 	mov	r4,r18
 800706c:	800cd480 	call	800cd48 <__malloc_unlock>
 8007070:	8805883a 	mov	r2,r17
 8007074:	dfc00917 	ldw	ra,36(sp)
 8007078:	df000817 	ldw	fp,32(sp)
 800707c:	ddc00717 	ldw	r23,28(sp)
 8007080:	dd800617 	ldw	r22,24(sp)
 8007084:	dd400517 	ldw	r21,20(sp)
 8007088:	dd000417 	ldw	r20,16(sp)
 800708c:	dcc00317 	ldw	r19,12(sp)
 8007090:	dc800217 	ldw	r18,8(sp)
 8007094:	dc400117 	ldw	r17,4(sp)
 8007098:	dc000017 	ldw	r16,0(sp)
 800709c:	dec00a04 	addi	sp,sp,40
 80070a0:	f800283a 	ret
 80070a4:	18c0004c 	andi	r3,r3,1
 80070a8:	1800391e 	bne	r3,zero,8007190 <_realloc_r+0x2b8>
 80070ac:	9dfffe17 	ldw	r23,-8(r19)
 80070b0:	00bfff04 	movi	r2,-4
 80070b4:	adefc83a 	sub	r23,r21,r23
 80070b8:	b9400117 	ldw	r5,4(r23)
 80070bc:	288a703a 	and	r5,r5,r2
 80070c0:	2c2d883a 	add	r22,r5,r16
 80070c4:	b1c03216 	blt	r22,r7,8007190 <_realloc_r+0x2b8>
 80070c8:	b8800317 	ldw	r2,12(r23)
 80070cc:	b8c00217 	ldw	r3,8(r23)
 80070d0:	81bfff04 	addi	r6,r16,-4
 80070d4:	01000904 	movi	r4,36
 80070d8:	18800315 	stw	r2,12(r3)
 80070dc:	10c00215 	stw	r3,8(r2)
 80070e0:	bc400204 	addi	r17,r23,8
 80070e4:	2180ac36 	bltu	r4,r6,8007398 <_realloc_r+0x4c0>
 80070e8:	008004c4 	movi	r2,19
 80070ec:	1180972e 	bgeu	r2,r6,800734c <_realloc_r+0x474>
 80070f0:	98800017 	ldw	r2,0(r19)
 80070f4:	b8800215 	stw	r2,8(r23)
 80070f8:	98800117 	ldw	r2,4(r19)
 80070fc:	b8800315 	stw	r2,12(r23)
 8007100:	008006c4 	movi	r2,27
 8007104:	1180b92e 	bgeu	r2,r6,80073ec <_realloc_r+0x514>
 8007108:	98800217 	ldw	r2,8(r19)
 800710c:	b8800415 	stw	r2,16(r23)
 8007110:	98800317 	ldw	r2,12(r19)
 8007114:	b8800515 	stw	r2,20(r23)
 8007118:	313fbe26 	beq	r6,r4,8007014 <__alt_data_end+0xfc007014>
 800711c:	b8c00604 	addi	r3,r23,24
 8007120:	9cc00404 	addi	r19,r19,16
 8007124:	98800017 	ldw	r2,0(r19)
 8007128:	b021883a 	mov	r16,r22
 800712c:	b82b883a 	mov	r21,r23
 8007130:	18800015 	stw	r2,0(r3)
 8007134:	98800117 	ldw	r2,4(r19)
 8007138:	18800115 	stw	r2,4(r3)
 800713c:	98800217 	ldw	r2,8(r19)
 8007140:	18800215 	stw	r2,8(r3)
 8007144:	b8c00117 	ldw	r3,4(r23)
 8007148:	003fbd06 	br	8007040 <__alt_data_end+0xfc007040>
 800714c:	00800304 	movi	r2,12
 8007150:	90800015 	stw	r2,0(r18)
 8007154:	0005883a 	mov	r2,zero
 8007158:	003fc606 	br	8007074 <__alt_data_end+0xfc007074>
 800715c:	1d06b03a 	or	r3,r3,r20
 8007160:	ad0b883a 	add	r5,r21,r20
 8007164:	a8c00115 	stw	r3,4(r21)
 8007168:	38800054 	ori	r2,r7,1
 800716c:	28800115 	stw	r2,4(r5)
 8007170:	29cf883a 	add	r7,r5,r7
 8007174:	38800117 	ldw	r2,4(r7)
 8007178:	9009883a 	mov	r4,r18
 800717c:	29400204 	addi	r5,r5,8
 8007180:	10800054 	ori	r2,r2,1
 8007184:	38800115 	stw	r2,4(r7)
 8007188:	80047680 	call	8004768 <_free_r>
 800718c:	003fb606 	br	8007068 <__alt_data_end+0xfc007068>
 8007190:	880b883a 	mov	r5,r17
 8007194:	9009883a 	mov	r4,r18
 8007198:	80053040 	call	8005304 <_malloc_r>
 800719c:	1023883a 	mov	r17,r2
 80071a0:	1000aa26 	beq	r2,zero,800744c <_realloc_r+0x574>
 80071a4:	98ffff17 	ldw	r3,-4(r19)
 80071a8:	113ffe04 	addi	r4,r2,-8
 80071ac:	00bfff84 	movi	r2,-2
 80071b0:	1884703a 	and	r2,r3,r2
 80071b4:	a885883a 	add	r2,r21,r2
 80071b8:	20808626 	beq	r4,r2,80073d4 <_realloc_r+0x4fc>
 80071bc:	81bfff04 	addi	r6,r16,-4
 80071c0:	00800904 	movi	r2,36
 80071c4:	11807036 	bltu	r2,r6,8007388 <_realloc_r+0x4b0>
 80071c8:	00c004c4 	movi	r3,19
 80071cc:	19805636 	bltu	r3,r6,8007328 <_realloc_r+0x450>
 80071d0:	8805883a 	mov	r2,r17
 80071d4:	9807883a 	mov	r3,r19
 80071d8:	19000017 	ldw	r4,0(r3)
 80071dc:	11000015 	stw	r4,0(r2)
 80071e0:	19000117 	ldw	r4,4(r3)
 80071e4:	11000115 	stw	r4,4(r2)
 80071e8:	18c00217 	ldw	r3,8(r3)
 80071ec:	10c00215 	stw	r3,8(r2)
 80071f0:	980b883a 	mov	r5,r19
 80071f4:	9009883a 	mov	r4,r18
 80071f8:	80047680 	call	8004768 <_free_r>
 80071fc:	9009883a 	mov	r4,r18
 8007200:	800cd480 	call	800cd48 <__malloc_unlock>
 8007204:	8805883a 	mov	r2,r17
 8007208:	003f9a06 	br	8007074 <__alt_data_end+0xfc007074>
 800720c:	300b883a 	mov	r5,r6
 8007210:	dfc00917 	ldw	ra,36(sp)
 8007214:	df000817 	ldw	fp,32(sp)
 8007218:	ddc00717 	ldw	r23,28(sp)
 800721c:	dd800617 	ldw	r22,24(sp)
 8007220:	dd400517 	ldw	r21,20(sp)
 8007224:	dd000417 	ldw	r20,16(sp)
 8007228:	dcc00317 	ldw	r19,12(sp)
 800722c:	dc800217 	ldw	r18,8(sp)
 8007230:	dc400117 	ldw	r17,4(sp)
 8007234:	dc000017 	ldw	r16,0(sp)
 8007238:	dec00a04 	addi	sp,sp,40
 800723c:	80053041 	jmpi	8005304 <_malloc_r>
 8007240:	11400317 	ldw	r5,12(r2)
 8007244:	10800217 	ldw	r2,8(r2)
 8007248:	9823883a 	mov	r17,r19
 800724c:	2021883a 	mov	r16,r4
 8007250:	11400315 	stw	r5,12(r2)
 8007254:	28800215 	stw	r2,8(r5)
 8007258:	003f7906 	br	8007040 <__alt_data_end+0xfc007040>
 800725c:	21000117 	ldw	r4,4(r4)
 8007260:	00bfff04 	movi	r2,-4
 8007264:	a1800404 	addi	r6,r20,16
 8007268:	2088703a 	and	r4,r4,r2
 800726c:	2409883a 	add	r4,r4,r16
 8007270:	2180380e 	bge	r4,r6,8007354 <_realloc_r+0x47c>
 8007274:	18c0004c 	andi	r3,r3,1
 8007278:	183fc51e 	bne	r3,zero,8007190 <__alt_data_end+0xfc007190>
 800727c:	9dfffe17 	ldw	r23,-8(r19)
 8007280:	adefc83a 	sub	r23,r21,r23
 8007284:	b9400117 	ldw	r5,4(r23)
 8007288:	288a703a 	and	r5,r5,r2
 800728c:	216d883a 	add	r22,r4,r5
 8007290:	b1bf8b16 	blt	r22,r6,80070c0 <__alt_data_end+0xfc0070c0>
 8007294:	b8800317 	ldw	r2,12(r23)
 8007298:	b8c00217 	ldw	r3,8(r23)
 800729c:	81bfff04 	addi	r6,r16,-4
 80072a0:	01000904 	movi	r4,36
 80072a4:	18800315 	stw	r2,12(r3)
 80072a8:	10c00215 	stw	r3,8(r2)
 80072ac:	bc400204 	addi	r17,r23,8
 80072b0:	21805a36 	bltu	r4,r6,800741c <_realloc_r+0x544>
 80072b4:	008004c4 	movi	r2,19
 80072b8:	1180562e 	bgeu	r2,r6,8007414 <_realloc_r+0x53c>
 80072bc:	98800017 	ldw	r2,0(r19)
 80072c0:	b8800215 	stw	r2,8(r23)
 80072c4:	98800117 	ldw	r2,4(r19)
 80072c8:	b8800315 	stw	r2,12(r23)
 80072cc:	008006c4 	movi	r2,27
 80072d0:	11805636 	bltu	r2,r6,800742c <_realloc_r+0x554>
 80072d4:	b8800404 	addi	r2,r23,16
 80072d8:	9cc00204 	addi	r19,r19,8
 80072dc:	98c00017 	ldw	r3,0(r19)
 80072e0:	10c00015 	stw	r3,0(r2)
 80072e4:	98c00117 	ldw	r3,4(r19)
 80072e8:	10c00115 	stw	r3,4(r2)
 80072ec:	98c00217 	ldw	r3,8(r19)
 80072f0:	10c00215 	stw	r3,8(r2)
 80072f4:	bd07883a 	add	r3,r23,r20
 80072f8:	b505c83a 	sub	r2,r22,r20
 80072fc:	e0c00215 	stw	r3,8(fp)
 8007300:	10800054 	ori	r2,r2,1
 8007304:	18800115 	stw	r2,4(r3)
 8007308:	b8800117 	ldw	r2,4(r23)
 800730c:	9009883a 	mov	r4,r18
 8007310:	1080004c 	andi	r2,r2,1
 8007314:	a0a8b03a 	or	r20,r20,r2
 8007318:	bd000115 	stw	r20,4(r23)
 800731c:	800cd480 	call	800cd48 <__malloc_unlock>
 8007320:	8805883a 	mov	r2,r17
 8007324:	003f5306 	br	8007074 <__alt_data_end+0xfc007074>
 8007328:	98c00017 	ldw	r3,0(r19)
 800732c:	88c00015 	stw	r3,0(r17)
 8007330:	98c00117 	ldw	r3,4(r19)
 8007334:	88c00115 	stw	r3,4(r17)
 8007338:	00c006c4 	movi	r3,27
 800733c:	19801d36 	bltu	r3,r6,80073b4 <_realloc_r+0x4dc>
 8007340:	88800204 	addi	r2,r17,8
 8007344:	98c00204 	addi	r3,r19,8
 8007348:	003fa306 	br	80071d8 <__alt_data_end+0xfc0071d8>
 800734c:	8807883a 	mov	r3,r17
 8007350:	003f7406 	br	8007124 <__alt_data_end+0xfc007124>
 8007354:	ad2b883a 	add	r21,r21,r20
 8007358:	2505c83a 	sub	r2,r4,r20
 800735c:	e5400215 	stw	r21,8(fp)
 8007360:	10800054 	ori	r2,r2,1
 8007364:	a8800115 	stw	r2,4(r21)
 8007368:	98bfff17 	ldw	r2,-4(r19)
 800736c:	9009883a 	mov	r4,r18
 8007370:	1080004c 	andi	r2,r2,1
 8007374:	a0a8b03a 	or	r20,r20,r2
 8007378:	9d3fff15 	stw	r20,-4(r19)
 800737c:	800cd480 	call	800cd48 <__malloc_unlock>
 8007380:	9805883a 	mov	r2,r19
 8007384:	003f3b06 	br	8007074 <__alt_data_end+0xfc007074>
 8007388:	8809883a 	mov	r4,r17
 800738c:	980b883a 	mov	r5,r19
 8007390:	8005ccc0 	call	8005ccc <memmove>
 8007394:	003f9606 	br	80071f0 <__alt_data_end+0xfc0071f0>
 8007398:	8809883a 	mov	r4,r17
 800739c:	980b883a 	mov	r5,r19
 80073a0:	8005ccc0 	call	8005ccc <memmove>
 80073a4:	b8c00117 	ldw	r3,4(r23)
 80073a8:	b021883a 	mov	r16,r22
 80073ac:	b82b883a 	mov	r21,r23
 80073b0:	003f2306 	br	8007040 <__alt_data_end+0xfc007040>
 80073b4:	98c00217 	ldw	r3,8(r19)
 80073b8:	88c00215 	stw	r3,8(r17)
 80073bc:	98c00317 	ldw	r3,12(r19)
 80073c0:	88c00315 	stw	r3,12(r17)
 80073c4:	30800c26 	beq	r6,r2,80073f8 <_realloc_r+0x520>
 80073c8:	88800404 	addi	r2,r17,16
 80073cc:	98c00404 	addi	r3,r19,16
 80073d0:	003f8106 	br	80071d8 <__alt_data_end+0xfc0071d8>
 80073d4:	893fff17 	ldw	r4,-4(r17)
 80073d8:	00bfff04 	movi	r2,-4
 80073dc:	9823883a 	mov	r17,r19
 80073e0:	2084703a 	and	r2,r4,r2
 80073e4:	80a1883a 	add	r16,r16,r2
 80073e8:	003f1506 	br	8007040 <__alt_data_end+0xfc007040>
 80073ec:	b8c00404 	addi	r3,r23,16
 80073f0:	9cc00204 	addi	r19,r19,8
 80073f4:	003f4b06 	br	8007124 <__alt_data_end+0xfc007124>
 80073f8:	99000417 	ldw	r4,16(r19)
 80073fc:	88800604 	addi	r2,r17,24
 8007400:	98c00604 	addi	r3,r19,24
 8007404:	89000415 	stw	r4,16(r17)
 8007408:	99000517 	ldw	r4,20(r19)
 800740c:	89000515 	stw	r4,20(r17)
 8007410:	003f7106 	br	80071d8 <__alt_data_end+0xfc0071d8>
 8007414:	8805883a 	mov	r2,r17
 8007418:	003fb006 	br	80072dc <__alt_data_end+0xfc0072dc>
 800741c:	8809883a 	mov	r4,r17
 8007420:	980b883a 	mov	r5,r19
 8007424:	8005ccc0 	call	8005ccc <memmove>
 8007428:	003fb206 	br	80072f4 <__alt_data_end+0xfc0072f4>
 800742c:	98800217 	ldw	r2,8(r19)
 8007430:	b8800415 	stw	r2,16(r23)
 8007434:	98800317 	ldw	r2,12(r19)
 8007438:	b8800515 	stw	r2,20(r23)
 800743c:	31000726 	beq	r6,r4,800745c <_realloc_r+0x584>
 8007440:	b8800604 	addi	r2,r23,24
 8007444:	9cc00404 	addi	r19,r19,16
 8007448:	003fa406 	br	80072dc <__alt_data_end+0xfc0072dc>
 800744c:	9009883a 	mov	r4,r18
 8007450:	800cd480 	call	800cd48 <__malloc_unlock>
 8007454:	0005883a 	mov	r2,zero
 8007458:	003f0606 	br	8007074 <__alt_data_end+0xfc007074>
 800745c:	98c00417 	ldw	r3,16(r19)
 8007460:	9cc00604 	addi	r19,r19,24
 8007464:	b8800804 	addi	r2,r23,32
 8007468:	b8c00615 	stw	r3,24(r23)
 800746c:	98ffff17 	ldw	r3,-4(r19)
 8007470:	b8c00715 	stw	r3,28(r23)
 8007474:	003f9906 	br	80072dc <__alt_data_end+0xfc0072dc>

08007478 <__fpclassifyd>:
 8007478:	00a00034 	movhi	r2,32768
 800747c:	10bfffc4 	addi	r2,r2,-1
 8007480:	2884703a 	and	r2,r5,r2
 8007484:	10000726 	beq	r2,zero,80074a4 <__fpclassifyd+0x2c>
 8007488:	00fffc34 	movhi	r3,65520
 800748c:	019ff834 	movhi	r6,32736
 8007490:	28c7883a 	add	r3,r5,r3
 8007494:	31bfffc4 	addi	r6,r6,-1
 8007498:	30c00536 	bltu	r6,r3,80074b0 <__fpclassifyd+0x38>
 800749c:	00800104 	movi	r2,4
 80074a0:	f800283a 	ret
 80074a4:	2000021e 	bne	r4,zero,80074b0 <__fpclassifyd+0x38>
 80074a8:	00800084 	movi	r2,2
 80074ac:	f800283a 	ret
 80074b0:	00dffc34 	movhi	r3,32752
 80074b4:	019ff834 	movhi	r6,32736
 80074b8:	28cb883a 	add	r5,r5,r3
 80074bc:	31bfffc4 	addi	r6,r6,-1
 80074c0:	317ff62e 	bgeu	r6,r5,800749c <__alt_data_end+0xfc00749c>
 80074c4:	01400434 	movhi	r5,16
 80074c8:	297fffc4 	addi	r5,r5,-1
 80074cc:	28800236 	bltu	r5,r2,80074d8 <__fpclassifyd+0x60>
 80074d0:	008000c4 	movi	r2,3
 80074d4:	f800283a 	ret
 80074d8:	10c00226 	beq	r2,r3,80074e4 <__fpclassifyd+0x6c>
 80074dc:	0005883a 	mov	r2,zero
 80074e0:	f800283a 	ret
 80074e4:	2005003a 	cmpeq	r2,r4,zero
 80074e8:	f800283a 	ret

080074ec <_sbrk_r>:
 80074ec:	defffd04 	addi	sp,sp,-12
 80074f0:	dc000015 	stw	r16,0(sp)
 80074f4:	04020074 	movhi	r16,2049
 80074f8:	dc400115 	stw	r17,4(sp)
 80074fc:	840b7a04 	addi	r16,r16,11752
 8007500:	2023883a 	mov	r17,r4
 8007504:	2809883a 	mov	r4,r5
 8007508:	dfc00215 	stw	ra,8(sp)
 800750c:	80000015 	stw	zero,0(r16)
 8007510:	800cf140 	call	800cf14 <sbrk>
 8007514:	00ffffc4 	movi	r3,-1
 8007518:	10c00526 	beq	r2,r3,8007530 <_sbrk_r+0x44>
 800751c:	dfc00217 	ldw	ra,8(sp)
 8007520:	dc400117 	ldw	r17,4(sp)
 8007524:	dc000017 	ldw	r16,0(sp)
 8007528:	dec00304 	addi	sp,sp,12
 800752c:	f800283a 	ret
 8007530:	80c00017 	ldw	r3,0(r16)
 8007534:	183ff926 	beq	r3,zero,800751c <__alt_data_end+0xfc00751c>
 8007538:	88c00015 	stw	r3,0(r17)
 800753c:	003ff706 	br	800751c <__alt_data_end+0xfc00751c>

08007540 <__sread>:
 8007540:	defffe04 	addi	sp,sp,-8
 8007544:	dc000015 	stw	r16,0(sp)
 8007548:	2821883a 	mov	r16,r5
 800754c:	2940038f 	ldh	r5,14(r5)
 8007550:	dfc00115 	stw	ra,4(sp)
 8007554:	80091200 	call	8009120 <_read_r>
 8007558:	10000716 	blt	r2,zero,8007578 <__sread+0x38>
 800755c:	80c01417 	ldw	r3,80(r16)
 8007560:	1887883a 	add	r3,r3,r2
 8007564:	80c01415 	stw	r3,80(r16)
 8007568:	dfc00117 	ldw	ra,4(sp)
 800756c:	dc000017 	ldw	r16,0(sp)
 8007570:	dec00204 	addi	sp,sp,8
 8007574:	f800283a 	ret
 8007578:	80c0030b 	ldhu	r3,12(r16)
 800757c:	18fbffcc 	andi	r3,r3,61439
 8007580:	80c0030d 	sth	r3,12(r16)
 8007584:	dfc00117 	ldw	ra,4(sp)
 8007588:	dc000017 	ldw	r16,0(sp)
 800758c:	dec00204 	addi	sp,sp,8
 8007590:	f800283a 	ret

08007594 <__seofread>:
 8007594:	0005883a 	mov	r2,zero
 8007598:	f800283a 	ret

0800759c <__swrite>:
 800759c:	2880030b 	ldhu	r2,12(r5)
 80075a0:	defffb04 	addi	sp,sp,-20
 80075a4:	dcc00315 	stw	r19,12(sp)
 80075a8:	dc800215 	stw	r18,8(sp)
 80075ac:	dc400115 	stw	r17,4(sp)
 80075b0:	dc000015 	stw	r16,0(sp)
 80075b4:	dfc00415 	stw	ra,16(sp)
 80075b8:	10c0400c 	andi	r3,r2,256
 80075bc:	2821883a 	mov	r16,r5
 80075c0:	2027883a 	mov	r19,r4
 80075c4:	3025883a 	mov	r18,r6
 80075c8:	3823883a 	mov	r17,r7
 80075cc:	18000526 	beq	r3,zero,80075e4 <__swrite+0x48>
 80075d0:	2940038f 	ldh	r5,14(r5)
 80075d4:	000d883a 	mov	r6,zero
 80075d8:	01c00084 	movi	r7,2
 80075dc:	80090c40 	call	80090c4 <_lseek_r>
 80075e0:	8080030b 	ldhu	r2,12(r16)
 80075e4:	8140038f 	ldh	r5,14(r16)
 80075e8:	10bbffcc 	andi	r2,r2,61439
 80075ec:	9809883a 	mov	r4,r19
 80075f0:	900d883a 	mov	r6,r18
 80075f4:	880f883a 	mov	r7,r17
 80075f8:	8080030d 	sth	r2,12(r16)
 80075fc:	dfc00417 	ldw	ra,16(sp)
 8007600:	dcc00317 	ldw	r19,12(sp)
 8007604:	dc800217 	ldw	r18,8(sp)
 8007608:	dc400117 	ldw	r17,4(sp)
 800760c:	dc000017 	ldw	r16,0(sp)
 8007610:	dec00504 	addi	sp,sp,20
 8007614:	8008bb41 	jmpi	8008bb4 <_write_r>

08007618 <__sseek>:
 8007618:	defffe04 	addi	sp,sp,-8
 800761c:	dc000015 	stw	r16,0(sp)
 8007620:	2821883a 	mov	r16,r5
 8007624:	2940038f 	ldh	r5,14(r5)
 8007628:	dfc00115 	stw	ra,4(sp)
 800762c:	80090c40 	call	80090c4 <_lseek_r>
 8007630:	00ffffc4 	movi	r3,-1
 8007634:	10c00826 	beq	r2,r3,8007658 <__sseek+0x40>
 8007638:	80c0030b 	ldhu	r3,12(r16)
 800763c:	80801415 	stw	r2,80(r16)
 8007640:	18c40014 	ori	r3,r3,4096
 8007644:	80c0030d 	sth	r3,12(r16)
 8007648:	dfc00117 	ldw	ra,4(sp)
 800764c:	dc000017 	ldw	r16,0(sp)
 8007650:	dec00204 	addi	sp,sp,8
 8007654:	f800283a 	ret
 8007658:	80c0030b 	ldhu	r3,12(r16)
 800765c:	18fbffcc 	andi	r3,r3,61439
 8007660:	80c0030d 	sth	r3,12(r16)
 8007664:	dfc00117 	ldw	ra,4(sp)
 8007668:	dc000017 	ldw	r16,0(sp)
 800766c:	dec00204 	addi	sp,sp,8
 8007670:	f800283a 	ret

08007674 <__sclose>:
 8007674:	2940038f 	ldh	r5,14(r5)
 8007678:	8008c101 	jmpi	8008c10 <_close_r>

0800767c <strcmp>:
 800767c:	2144b03a 	or	r2,r4,r5
 8007680:	108000cc 	andi	r2,r2,3
 8007684:	1000171e 	bne	r2,zero,80076e4 <strcmp+0x68>
 8007688:	20800017 	ldw	r2,0(r4)
 800768c:	28c00017 	ldw	r3,0(r5)
 8007690:	10c0141e 	bne	r2,r3,80076e4 <strcmp+0x68>
 8007694:	027fbff4 	movhi	r9,65279
 8007698:	4a7fbfc4 	addi	r9,r9,-257
 800769c:	0086303a 	nor	r3,zero,r2
 80076a0:	02202074 	movhi	r8,32897
 80076a4:	1245883a 	add	r2,r2,r9
 80076a8:	42202004 	addi	r8,r8,-32640
 80076ac:	10c4703a 	and	r2,r2,r3
 80076b0:	1204703a 	and	r2,r2,r8
 80076b4:	10000226 	beq	r2,zero,80076c0 <strcmp+0x44>
 80076b8:	00001706 	br	8007718 <strcmp+0x9c>
 80076bc:	1000161e 	bne	r2,zero,8007718 <strcmp+0x9c>
 80076c0:	21000104 	addi	r4,r4,4
 80076c4:	20c00017 	ldw	r3,0(r4)
 80076c8:	29400104 	addi	r5,r5,4
 80076cc:	29800017 	ldw	r6,0(r5)
 80076d0:	1a4f883a 	add	r7,r3,r9
 80076d4:	00c4303a 	nor	r2,zero,r3
 80076d8:	3884703a 	and	r2,r7,r2
 80076dc:	1204703a 	and	r2,r2,r8
 80076e0:	19bff626 	beq	r3,r6,80076bc <__alt_data_end+0xfc0076bc>
 80076e4:	20800007 	ldb	r2,0(r4)
 80076e8:	1000051e 	bne	r2,zero,8007700 <strcmp+0x84>
 80076ec:	00000606 	br	8007708 <strcmp+0x8c>
 80076f0:	21000044 	addi	r4,r4,1
 80076f4:	20800007 	ldb	r2,0(r4)
 80076f8:	29400044 	addi	r5,r5,1
 80076fc:	10000226 	beq	r2,zero,8007708 <strcmp+0x8c>
 8007700:	28c00007 	ldb	r3,0(r5)
 8007704:	10fffa26 	beq	r2,r3,80076f0 <__alt_data_end+0xfc0076f0>
 8007708:	20800003 	ldbu	r2,0(r4)
 800770c:	28c00003 	ldbu	r3,0(r5)
 8007710:	10c5c83a 	sub	r2,r2,r3
 8007714:	f800283a 	ret
 8007718:	0005883a 	mov	r2,zero
 800771c:	f800283a 	ret

08007720 <__sprint_r.part.0>:
 8007720:	28801917 	ldw	r2,100(r5)
 8007724:	defff604 	addi	sp,sp,-40
 8007728:	dd400515 	stw	r21,20(sp)
 800772c:	dcc00315 	stw	r19,12(sp)
 8007730:	dfc00915 	stw	ra,36(sp)
 8007734:	df000815 	stw	fp,32(sp)
 8007738:	ddc00715 	stw	r23,28(sp)
 800773c:	dd800615 	stw	r22,24(sp)
 8007740:	dd000415 	stw	r20,16(sp)
 8007744:	dc800215 	stw	r18,8(sp)
 8007748:	dc400115 	stw	r17,4(sp)
 800774c:	dc000015 	stw	r16,0(sp)
 8007750:	1088000c 	andi	r2,r2,8192
 8007754:	2827883a 	mov	r19,r5
 8007758:	302b883a 	mov	r21,r6
 800775c:	10002d26 	beq	r2,zero,8007814 <__sprint_r.part.0+0xf4>
 8007760:	30800217 	ldw	r2,8(r6)
 8007764:	35800017 	ldw	r22,0(r6)
 8007768:	10002826 	beq	r2,zero,800780c <__sprint_r.part.0+0xec>
 800776c:	2029883a 	mov	r20,r4
 8007770:	b5c00104 	addi	r23,r22,4
 8007774:	04bfffc4 	movi	r18,-1
 8007778:	bc400017 	ldw	r17,0(r23)
 800777c:	b4000017 	ldw	r16,0(r22)
 8007780:	0039883a 	mov	fp,zero
 8007784:	8822d0ba 	srli	r17,r17,2
 8007788:	04400316 	blt	zero,r17,8007798 <__sprint_r.part.0+0x78>
 800778c:	00001706 	br	80077ec <__sprint_r.part.0+0xcc>
 8007790:	84000104 	addi	r16,r16,4
 8007794:	8f001526 	beq	r17,fp,80077ec <__sprint_r.part.0+0xcc>
 8007798:	81400017 	ldw	r5,0(r16)
 800779c:	a009883a 	mov	r4,r20
 80077a0:	980d883a 	mov	r6,r19
 80077a4:	8008e3c0 	call	8008e3c <_fputwc_r>
 80077a8:	e7000044 	addi	fp,fp,1
 80077ac:	14bff81e 	bne	r2,r18,8007790 <__alt_data_end+0xfc007790>
 80077b0:	9005883a 	mov	r2,r18
 80077b4:	a8000215 	stw	zero,8(r21)
 80077b8:	a8000115 	stw	zero,4(r21)
 80077bc:	dfc00917 	ldw	ra,36(sp)
 80077c0:	df000817 	ldw	fp,32(sp)
 80077c4:	ddc00717 	ldw	r23,28(sp)
 80077c8:	dd800617 	ldw	r22,24(sp)
 80077cc:	dd400517 	ldw	r21,20(sp)
 80077d0:	dd000417 	ldw	r20,16(sp)
 80077d4:	dcc00317 	ldw	r19,12(sp)
 80077d8:	dc800217 	ldw	r18,8(sp)
 80077dc:	dc400117 	ldw	r17,4(sp)
 80077e0:	dc000017 	ldw	r16,0(sp)
 80077e4:	dec00a04 	addi	sp,sp,40
 80077e8:	f800283a 	ret
 80077ec:	a8c00217 	ldw	r3,8(r21)
 80077f0:	8c63883a 	add	r17,r17,r17
 80077f4:	8c63883a 	add	r17,r17,r17
 80077f8:	1c45c83a 	sub	r2,r3,r17
 80077fc:	a8800215 	stw	r2,8(r21)
 8007800:	b5800204 	addi	r22,r22,8
 8007804:	bdc00204 	addi	r23,r23,8
 8007808:	103fdb1e 	bne	r2,zero,8007778 <__alt_data_end+0xfc007778>
 800780c:	0005883a 	mov	r2,zero
 8007810:	003fe806 	br	80077b4 <__alt_data_end+0xfc0077b4>
 8007814:	8004a580 	call	8004a58 <__sfvwrite_r>
 8007818:	003fe606 	br	80077b4 <__alt_data_end+0xfc0077b4>

0800781c <__sprint_r>:
 800781c:	30c00217 	ldw	r3,8(r6)
 8007820:	18000126 	beq	r3,zero,8007828 <__sprint_r+0xc>
 8007824:	80077201 	jmpi	8007720 <__sprint_r.part.0>
 8007828:	30000115 	stw	zero,4(r6)
 800782c:	0005883a 	mov	r2,zero
 8007830:	f800283a 	ret

08007834 <___vfiprintf_internal_r>:
 8007834:	defeca04 	addi	sp,sp,-1240
 8007838:	dd813215 	stw	r22,1224(sp)
 800783c:	dd013015 	stw	r20,1216(sp)
 8007840:	dfc13515 	stw	ra,1236(sp)
 8007844:	df013415 	stw	fp,1232(sp)
 8007848:	ddc13315 	stw	r23,1228(sp)
 800784c:	dd413115 	stw	r21,1220(sp)
 8007850:	dcc12f15 	stw	r19,1212(sp)
 8007854:	dc812e15 	stw	r18,1208(sp)
 8007858:	dc412d15 	stw	r17,1204(sp)
 800785c:	dc012c15 	stw	r16,1200(sp)
 8007860:	d9012015 	stw	r4,1152(sp)
 8007864:	d9c12115 	stw	r7,1156(sp)
 8007868:	2829883a 	mov	r20,r5
 800786c:	302d883a 	mov	r22,r6
 8007870:	20000226 	beq	r4,zero,800787c <___vfiprintf_internal_r+0x48>
 8007874:	20800e17 	ldw	r2,56(r4)
 8007878:	1001d326 	beq	r2,zero,8007fc8 <___vfiprintf_internal_r+0x794>
 800787c:	a0c0030b 	ldhu	r3,12(r20)
 8007880:	1908000c 	andi	r4,r3,8192
 8007884:	1805883a 	mov	r2,r3
 8007888:	2000071e 	bne	r4,zero,80078a8 <___vfiprintf_internal_r+0x74>
 800788c:	a1001917 	ldw	r4,100(r20)
 8007890:	18880014 	ori	r2,r3,8192
 8007894:	00f7ffc4 	movi	r3,-8193
 8007898:	20c8703a 	and	r4,r4,r3
 800789c:	a080030d 	sth	r2,12(r20)
 80078a0:	1007883a 	mov	r3,r2
 80078a4:	a1001915 	stw	r4,100(r20)
 80078a8:	1100020c 	andi	r4,r2,8
 80078ac:	20018926 	beq	r4,zero,8007ed4 <___vfiprintf_internal_r+0x6a0>
 80078b0:	a1000417 	ldw	r4,16(r20)
 80078b4:	20018726 	beq	r4,zero,8007ed4 <___vfiprintf_internal_r+0x6a0>
 80078b8:	1080068c 	andi	r2,r2,26
 80078bc:	01000284 	movi	r4,10
 80078c0:	11018d26 	beq	r2,r4,8007ef8 <___vfiprintf_internal_r+0x6c4>
 80078c4:	da810a04 	addi	r10,sp,1064
 80078c8:	dac109c4 	addi	r11,sp,1063
 80078cc:	07020074 	movhi	fp,2049
 80078d0:	05c20074 	movhi	r23,2049
 80078d4:	da811e15 	stw	r10,1144(sp)
 80078d8:	52d5c83a 	sub	r10,r10,r11
 80078dc:	e73d9104 	addi	fp,fp,-2492
 80078e0:	bdfd8d04 	addi	r23,r23,-2508
 80078e4:	dac11f15 	stw	r11,1148(sp)
 80078e8:	dec11a15 	stw	sp,1128(sp)
 80078ec:	d8011c15 	stw	zero,1136(sp)
 80078f0:	d8011b15 	stw	zero,1132(sp)
 80078f4:	d8012615 	stw	zero,1176(sp)
 80078f8:	d8012215 	stw	zero,1160(sp)
 80078fc:	da812715 	stw	r10,1180(sp)
 8007900:	d811883a 	mov	r8,sp
 8007904:	b021883a 	mov	r16,r22
 8007908:	80800007 	ldb	r2,0(r16)
 800790c:	10039c26 	beq	r2,zero,8008780 <___vfiprintf_internal_r+0xf4c>
 8007910:	01000944 	movi	r4,37
 8007914:	11039a26 	beq	r2,r4,8008780 <___vfiprintf_internal_r+0xf4c>
 8007918:	8005883a 	mov	r2,r16
 800791c:	00000106 	br	8007924 <___vfiprintf_internal_r+0xf0>
 8007920:	19000326 	beq	r3,r4,8007930 <___vfiprintf_internal_r+0xfc>
 8007924:	10800044 	addi	r2,r2,1
 8007928:	10c00007 	ldb	r3,0(r2)
 800792c:	183ffc1e 	bne	r3,zero,8007920 <__alt_data_end+0xfc007920>
 8007930:	1425c83a 	sub	r18,r2,r16
 8007934:	1023883a 	mov	r17,r2
 8007938:	90001026 	beq	r18,zero,800797c <___vfiprintf_internal_r+0x148>
 800793c:	d8c11c17 	ldw	r3,1136(sp)
 8007940:	d8811b17 	ldw	r2,1132(sp)
 8007944:	44000015 	stw	r16,0(r8)
 8007948:	90c7883a 	add	r3,r18,r3
 800794c:	10800044 	addi	r2,r2,1
 8007950:	44800115 	stw	r18,4(r8)
 8007954:	d8c11c15 	stw	r3,1136(sp)
 8007958:	d8811b15 	stw	r2,1132(sp)
 800795c:	010001c4 	movi	r4,7
 8007960:	2080750e 	bge	r4,r2,8007b38 <___vfiprintf_internal_r+0x304>
 8007964:	18039d1e 	bne	r3,zero,80087dc <___vfiprintf_internal_r+0xfa8>
 8007968:	dac12217 	ldw	r11,1160(sp)
 800796c:	d8011b15 	stw	zero,1132(sp)
 8007970:	d811883a 	mov	r8,sp
 8007974:	5c97883a 	add	r11,r11,r18
 8007978:	dac12215 	stw	r11,1160(sp)
 800797c:	88800007 	ldb	r2,0(r17)
 8007980:	1002e026 	beq	r2,zero,8008504 <___vfiprintf_internal_r+0xcd0>
 8007984:	88c00047 	ldb	r3,1(r17)
 8007988:	8c000044 	addi	r16,r17,1
 800798c:	d8011d85 	stb	zero,1142(sp)
 8007990:	000d883a 	mov	r6,zero
 8007994:	027fffc4 	movi	r9,-1
 8007998:	0027883a 	mov	r19,zero
 800799c:	002b883a 	mov	r21,zero
 80079a0:	01001604 	movi	r4,88
 80079a4:	01400244 	movi	r5,9
 80079a8:	03000a84 	movi	r12,42
 80079ac:	01c01b04 	movi	r7,108
 80079b0:	84000044 	addi	r16,r16,1
 80079b4:	18bff804 	addi	r2,r3,-32
 80079b8:	20825f36 	bltu	r4,r2,8008338 <___vfiprintf_internal_r+0xb04>
 80079bc:	100490ba 	slli	r2,r2,2
 80079c0:	02820034 	movhi	r10,2048
 80079c4:	529e7504 	addi	r10,r10,31188
 80079c8:	1285883a 	add	r2,r2,r10
 80079cc:	10800017 	ldw	r2,0(r2)
 80079d0:	1000683a 	jmp	r2
 80079d4:	080081a8 	cmpgeui	zero,at,518
 80079d8:	08008338 	rdprs	zero,at,524
 80079dc:	08008338 	rdprs	zero,at,524
 80079e0:	0800832c 	andhi	zero,at,524
 80079e4:	08008338 	rdprs	zero,at,524
 80079e8:	08008338 	rdprs	zero,at,524
 80079ec:	08008338 	rdprs	zero,at,524
 80079f0:	08008338 	rdprs	zero,at,524
 80079f4:	08008338 	rdprs	zero,at,524
 80079f8:	08008338 	rdprs	zero,at,524
 80079fc:	08008304 	addi	zero,at,524
 8007a00:	08008320 	cmpeqi	zero,at,524
 8007a04:	08008338 	rdprs	zero,at,524
 8007a08:	08007fd8 	cmpnei	zero,at,511
 8007a0c:	08008138 	rdprs	zero,at,516
 8007a10:	08008338 	rdprs	zero,at,524
 8007a14:	080080bc 	xorhi	zero,at,514
 8007a18:	080080c8 	cmpgei	zero,at,515
 8007a1c:	080080c8 	cmpgei	zero,at,515
 8007a20:	080080c8 	cmpgei	zero,at,515
 8007a24:	080080c8 	cmpgei	zero,at,515
 8007a28:	080080c8 	cmpgei	zero,at,515
 8007a2c:	080080c8 	cmpgei	zero,at,515
 8007a30:	080080c8 	cmpgei	zero,at,515
 8007a34:	080080c8 	cmpgei	zero,at,515
 8007a38:	080080c8 	cmpgei	zero,at,515
 8007a3c:	08008338 	rdprs	zero,at,524
 8007a40:	08008338 	rdprs	zero,at,524
 8007a44:	08008338 	rdprs	zero,at,524
 8007a48:	08008338 	rdprs	zero,at,524
 8007a4c:	08008338 	rdprs	zero,at,524
 8007a50:	08008338 	rdprs	zero,at,524
 8007a54:	08008338 	rdprs	zero,at,524
 8007a58:	08008338 	rdprs	zero,at,524
 8007a5c:	08008338 	rdprs	zero,at,524
 8007a60:	08008338 	rdprs	zero,at,524
 8007a64:	080080f4 	orhi	zero,at,515
 8007a68:	08008338 	rdprs	zero,at,524
 8007a6c:	08008338 	rdprs	zero,at,524
 8007a70:	08008338 	rdprs	zero,at,524
 8007a74:	08008338 	rdprs	zero,at,524
 8007a78:	08008338 	rdprs	zero,at,524
 8007a7c:	08008338 	rdprs	zero,at,524
 8007a80:	08008338 	rdprs	zero,at,524
 8007a84:	08008338 	rdprs	zero,at,524
 8007a88:	08008338 	rdprs	zero,at,524
 8007a8c:	08008338 	rdprs	zero,at,524
 8007a90:	08007b88 	cmpgei	zero,at,494
 8007a94:	08008338 	rdprs	zero,at,524
 8007a98:	08008338 	rdprs	zero,at,524
 8007a9c:	08008338 	rdprs	zero,at,524
 8007aa0:	08008338 	rdprs	zero,at,524
 8007aa4:	08008338 	rdprs	zero,at,524
 8007aa8:	08007b4c 	andi	zero,at,493
 8007aac:	08008338 	rdprs	zero,at,524
 8007ab0:	08008338 	rdprs	zero,at,524
 8007ab4:	08008034 	orhi	zero,at,512
 8007ab8:	08008338 	rdprs	zero,at,524
 8007abc:	08008338 	rdprs	zero,at,524
 8007ac0:	08008338 	rdprs	zero,at,524
 8007ac4:	08008338 	rdprs	zero,at,524
 8007ac8:	08008338 	rdprs	zero,at,524
 8007acc:	08008338 	rdprs	zero,at,524
 8007ad0:	08008338 	rdprs	zero,at,524
 8007ad4:	08008338 	rdprs	zero,at,524
 8007ad8:	08008338 	rdprs	zero,at,524
 8007adc:	08008338 	rdprs	zero,at,524
 8007ae0:	0800808c 	andi	zero,at,514
 8007ae4:	08008224 	muli	zero,at,520
 8007ae8:	08008338 	rdprs	zero,at,524
 8007aec:	08008338 	rdprs	zero,at,524
 8007af0:	08008338 	rdprs	zero,at,524
 8007af4:	080082ac 	andhi	zero,at,522
 8007af8:	08008224 	muli	zero,at,520
 8007afc:	08008338 	rdprs	zero,at,524
 8007b00:	08008338 	rdprs	zero,at,524
 8007b04:	080082b8 	rdprs	zero,at,522
 8007b08:	08008338 	rdprs	zero,at,524
 8007b0c:	08008178 	rdprs	zero,at,517
 8007b10:	08007b8c 	andi	zero,at,494
 8007b14:	08008260 	cmpeqi	zero,at,521
 8007b18:	080082a0 	cmpeqi	zero,at,522
 8007b1c:	08008338 	rdprs	zero,at,524
 8007b20:	080081c4 	addi	zero,at,519
 8007b24:	08008338 	rdprs	zero,at,524
 8007b28:	08007b50 	cmplti	zero,at,493
 8007b2c:	08008338 	rdprs	zero,at,524
 8007b30:	08008338 	rdprs	zero,at,524
 8007b34:	080082c8 	cmpgei	zero,at,523
 8007b38:	42000204 	addi	r8,r8,8
 8007b3c:	dac12217 	ldw	r11,1160(sp)
 8007b40:	5c97883a 	add	r11,r11,r18
 8007b44:	dac12215 	stw	r11,1160(sp)
 8007b48:	003f8c06 	br	800797c <__alt_data_end+0xfc00797c>
 8007b4c:	ad400414 	ori	r21,r21,16
 8007b50:	a880080c 	andi	r2,r21,32
 8007b54:	10012f1e 	bne	r2,zero,8008014 <___vfiprintf_internal_r+0x7e0>
 8007b58:	a880040c 	andi	r2,r21,16
 8007b5c:	1001ff1e 	bne	r2,zero,800835c <___vfiprintf_internal_r+0xb28>
 8007b60:	a880100c 	andi	r2,r21,64
 8007b64:	1001fd26 	beq	r2,zero,800835c <___vfiprintf_internal_r+0xb28>
 8007b68:	da812117 	ldw	r10,1156(sp)
 8007b6c:	002d883a 	mov	r22,zero
 8007b70:	00800044 	movi	r2,1
 8007b74:	5480000b 	ldhu	r18,0(r10)
 8007b78:	52800104 	addi	r10,r10,4
 8007b7c:	da812115 	stw	r10,1156(sp)
 8007b80:	9009883a 	mov	r4,r18
 8007b84:	00000a06 	br	8007bb0 <___vfiprintf_internal_r+0x37c>
 8007b88:	ad400414 	ori	r21,r21,16
 8007b8c:	a880080c 	andi	r2,r21,32
 8007b90:	10011426 	beq	r2,zero,8007fe4 <___vfiprintf_internal_r+0x7b0>
 8007b94:	da812117 	ldw	r10,1156(sp)
 8007b98:	0005883a 	mov	r2,zero
 8007b9c:	54800017 	ldw	r18,0(r10)
 8007ba0:	55800117 	ldw	r22,4(r10)
 8007ba4:	52800204 	addi	r10,r10,8
 8007ba8:	da812115 	stw	r10,1156(sp)
 8007bac:	9588b03a 	or	r4,r18,r22
 8007bb0:	d8011d85 	stb	zero,1142(sp)
 8007bb4:	4823883a 	mov	r17,r9
 8007bb8:	0019883a 	mov	r12,zero
 8007bbc:	48000216 	blt	r9,zero,8007bc8 <___vfiprintf_internal_r+0x394>
 8007bc0:	00ffdfc4 	movi	r3,-129
 8007bc4:	a8ea703a 	and	r21,r21,r3
 8007bc8:	2002221e 	bne	r4,zero,8008454 <___vfiprintf_internal_r+0xc20>
 8007bcc:	4802c726 	beq	r9,zero,80086ec <___vfiprintf_internal_r+0xeb8>
 8007bd0:	10803fcc 	andi	r2,r2,255
 8007bd4:	00c00044 	movi	r3,1
 8007bd8:	10c24426 	beq	r2,r3,80084ec <___vfiprintf_internal_r+0xcb8>
 8007bdc:	00c00084 	movi	r3,2
 8007be0:	10c2cc26 	beq	r2,r3,8008714 <___vfiprintf_internal_r+0xee0>
 8007be4:	d8c10a04 	addi	r3,sp,1064
 8007be8:	9008d0fa 	srli	r4,r18,3
 8007bec:	b00a977a 	slli	r5,r22,29
 8007bf0:	b02cd0fa 	srli	r22,r22,3
 8007bf4:	948001cc 	andi	r18,r18,7
 8007bf8:	90800c04 	addi	r2,r18,48
 8007bfc:	18ffffc4 	addi	r3,r3,-1
 8007c00:	2924b03a 	or	r18,r5,r4
 8007c04:	18800005 	stb	r2,0(r3)
 8007c08:	9588b03a 	or	r4,r18,r22
 8007c0c:	203ff61e 	bne	r4,zero,8007be8 <__alt_data_end+0xfc007be8>
 8007c10:	a900004c 	andi	r4,r21,1
 8007c14:	d8c12415 	stw	r3,1168(sp)
 8007c18:	2002fb1e 	bne	r4,zero,8008808 <___vfiprintf_internal_r+0xfd4>
 8007c1c:	da811e17 	ldw	r10,1144(sp)
 8007c20:	50e3c83a 	sub	r17,r10,r3
 8007c24:	8825883a 	mov	r18,r17
 8007c28:	8a40010e 	bge	r17,r9,8007c30 <___vfiprintf_internal_r+0x3fc>
 8007c2c:	4825883a 	mov	r18,r9
 8007c30:	63003fcc 	andi	r12,r12,255
 8007c34:	6300201c 	xori	r12,r12,128
 8007c38:	633fe004 	addi	r12,r12,-128
 8007c3c:	60000126 	beq	r12,zero,8007c44 <___vfiprintf_internal_r+0x410>
 8007c40:	94800044 	addi	r18,r18,1
 8007c44:	ab80008c 	andi	r14,r21,2
 8007c48:	70000126 	beq	r14,zero,8007c50 <___vfiprintf_internal_r+0x41c>
 8007c4c:	94800084 	addi	r18,r18,2
 8007c50:	ad80210c 	andi	r22,r21,132
 8007c54:	b001df1e 	bne	r22,zero,80083d4 <___vfiprintf_internal_r+0xba0>
 8007c58:	9c8fc83a 	sub	r7,r19,r18
 8007c5c:	01c1dd0e 	bge	zero,r7,80083d4 <___vfiprintf_internal_r+0xba0>
 8007c60:	03000404 	movi	r12,16
 8007c64:	d8811c17 	ldw	r2,1136(sp)
 8007c68:	61c3920e 	bge	r12,r7,8008ab4 <___vfiprintf_internal_r+0x1280>
 8007c6c:	02820074 	movhi	r10,2049
 8007c70:	52bd9104 	addi	r10,r10,-2492
 8007c74:	dc012915 	stw	r16,1188(sp)
 8007c78:	d9811b17 	ldw	r6,1132(sp)
 8007c7c:	da812315 	stw	r10,1164(sp)
 8007c80:	00c001c4 	movi	r3,7
 8007c84:	da412515 	stw	r9,1172(sp)
 8007c88:	db812815 	stw	r14,1184(sp)
 8007c8c:	3821883a 	mov	r16,r7
 8007c90:	00000506 	br	8007ca8 <___vfiprintf_internal_r+0x474>
 8007c94:	31400084 	addi	r5,r6,2
 8007c98:	42000204 	addi	r8,r8,8
 8007c9c:	200d883a 	mov	r6,r4
 8007ca0:	843ffc04 	addi	r16,r16,-16
 8007ca4:	64000d0e 	bge	r12,r16,8007cdc <___vfiprintf_internal_r+0x4a8>
 8007ca8:	10800404 	addi	r2,r2,16
 8007cac:	31000044 	addi	r4,r6,1
 8007cb0:	47000015 	stw	fp,0(r8)
 8007cb4:	43000115 	stw	r12,4(r8)
 8007cb8:	d8811c15 	stw	r2,1136(sp)
 8007cbc:	d9011b15 	stw	r4,1132(sp)
 8007cc0:	193ff40e 	bge	r3,r4,8007c94 <__alt_data_end+0xfc007c94>
 8007cc4:	1001b51e 	bne	r2,zero,800839c <___vfiprintf_internal_r+0xb68>
 8007cc8:	843ffc04 	addi	r16,r16,-16
 8007ccc:	000d883a 	mov	r6,zero
 8007cd0:	01400044 	movi	r5,1
 8007cd4:	d811883a 	mov	r8,sp
 8007cd8:	643ff316 	blt	r12,r16,8007ca8 <__alt_data_end+0xfc007ca8>
 8007cdc:	800f883a 	mov	r7,r16
 8007ce0:	da412517 	ldw	r9,1172(sp)
 8007ce4:	db812817 	ldw	r14,1184(sp)
 8007ce8:	dc012917 	ldw	r16,1188(sp)
 8007cec:	dac12317 	ldw	r11,1164(sp)
 8007cf0:	3887883a 	add	r3,r7,r2
 8007cf4:	41c00115 	stw	r7,4(r8)
 8007cf8:	42c00015 	stw	r11,0(r8)
 8007cfc:	d8c11c15 	stw	r3,1136(sp)
 8007d00:	d9411b15 	stw	r5,1132(sp)
 8007d04:	008001c4 	movi	r2,7
 8007d08:	11429316 	blt	r2,r5,8008758 <___vfiprintf_internal_r+0xf24>
 8007d0c:	d9011d87 	ldb	r4,1142(sp)
 8007d10:	42000204 	addi	r8,r8,8
 8007d14:	28800044 	addi	r2,r5,1
 8007d18:	2001b31e 	bne	r4,zero,80083e8 <___vfiprintf_internal_r+0xbb4>
 8007d1c:	70000c26 	beq	r14,zero,8007d50 <___vfiprintf_internal_r+0x51c>
 8007d20:	d9011d04 	addi	r4,sp,1140
 8007d24:	18c00084 	addi	r3,r3,2
 8007d28:	41000015 	stw	r4,0(r8)
 8007d2c:	01000084 	movi	r4,2
 8007d30:	41000115 	stw	r4,4(r8)
 8007d34:	d8c11c15 	stw	r3,1136(sp)
 8007d38:	d8811b15 	stw	r2,1132(sp)
 8007d3c:	010001c4 	movi	r4,7
 8007d40:	20826516 	blt	r4,r2,80086d8 <___vfiprintf_internal_r+0xea4>
 8007d44:	100b883a 	mov	r5,r2
 8007d48:	42000204 	addi	r8,r8,8
 8007d4c:	10800044 	addi	r2,r2,1
 8007d50:	01002004 	movi	r4,128
 8007d54:	b1021a26 	beq	r22,r4,80085c0 <___vfiprintf_internal_r+0xd8c>
 8007d58:	4c6dc83a 	sub	r22,r9,r17
 8007d5c:	0580230e 	bge	zero,r22,8007dec <___vfiprintf_internal_r+0x5b8>
 8007d60:	01c00404 	movi	r7,16
 8007d64:	3d83300e 	bge	r7,r22,8008a28 <___vfiprintf_internal_r+0x11f4>
 8007d68:	00820074 	movhi	r2,2049
 8007d6c:	10bd8d04 	addi	r2,r2,-2508
 8007d70:	d8812315 	stw	r2,1164(sp)
 8007d74:	030001c4 	movi	r12,7
 8007d78:	00000506 	br	8007d90 <___vfiprintf_internal_r+0x55c>
 8007d7c:	28800084 	addi	r2,r5,2
 8007d80:	42000204 	addi	r8,r8,8
 8007d84:	200b883a 	mov	r5,r4
 8007d88:	b5bffc04 	addi	r22,r22,-16
 8007d8c:	3d800d0e 	bge	r7,r22,8007dc4 <___vfiprintf_internal_r+0x590>
 8007d90:	18c00404 	addi	r3,r3,16
 8007d94:	29000044 	addi	r4,r5,1
 8007d98:	45c00015 	stw	r23,0(r8)
 8007d9c:	41c00115 	stw	r7,4(r8)
 8007da0:	d8c11c15 	stw	r3,1136(sp)
 8007da4:	d9011b15 	stw	r4,1132(sp)
 8007da8:	613ff40e 	bge	r12,r4,8007d7c <__alt_data_end+0xfc007d7c>
 8007dac:	18019b1e 	bne	r3,zero,800841c <___vfiprintf_internal_r+0xbe8>
 8007db0:	b5bffc04 	addi	r22,r22,-16
 8007db4:	000b883a 	mov	r5,zero
 8007db8:	00800044 	movi	r2,1
 8007dbc:	d811883a 	mov	r8,sp
 8007dc0:	3dbff316 	blt	r7,r22,8007d90 <__alt_data_end+0xfc007d90>
 8007dc4:	da812317 	ldw	r10,1164(sp)
 8007dc8:	1d87883a 	add	r3,r3,r22
 8007dcc:	45800115 	stw	r22,4(r8)
 8007dd0:	42800015 	stw	r10,0(r8)
 8007dd4:	d8c11c15 	stw	r3,1136(sp)
 8007dd8:	d8811b15 	stw	r2,1132(sp)
 8007ddc:	010001c4 	movi	r4,7
 8007de0:	2081dd16 	blt	r4,r2,8008558 <___vfiprintf_internal_r+0xd24>
 8007de4:	42000204 	addi	r8,r8,8
 8007de8:	10800044 	addi	r2,r2,1
 8007dec:	da812417 	ldw	r10,1168(sp)
 8007df0:	1c47883a 	add	r3,r3,r17
 8007df4:	44400115 	stw	r17,4(r8)
 8007df8:	42800015 	stw	r10,0(r8)
 8007dfc:	d8c11c15 	stw	r3,1136(sp)
 8007e00:	d8811b15 	stw	r2,1132(sp)
 8007e04:	010001c4 	movi	r4,7
 8007e08:	2081dc0e 	bge	r4,r2,800857c <___vfiprintf_internal_r+0xd48>
 8007e0c:	1802611e 	bne	r3,zero,8008794 <___vfiprintf_internal_r+0xf60>
 8007e10:	d8011b15 	stw	zero,1132(sp)
 8007e14:	aac0010c 	andi	r11,r21,4
 8007e18:	58002726 	beq	r11,zero,8007eb8 <___vfiprintf_internal_r+0x684>
 8007e1c:	9ca3c83a 	sub	r17,r19,r18
 8007e20:	d811883a 	mov	r8,sp
 8007e24:	0443510e 	bge	zero,r17,8008b6c <___vfiprintf_internal_r+0x1338>
 8007e28:	01c00404 	movi	r7,16
 8007e2c:	3c43320e 	bge	r7,r17,8008af8 <___vfiprintf_internal_r+0x12c4>
 8007e30:	00820074 	movhi	r2,2049
 8007e34:	10bd9104 	addi	r2,r2,-2492
 8007e38:	d9011b17 	ldw	r4,1132(sp)
 8007e3c:	d8812315 	stw	r2,1164(sp)
 8007e40:	382d883a 	mov	r22,r7
 8007e44:	054001c4 	movi	r21,7
 8007e48:	00000506 	br	8007e60 <___vfiprintf_internal_r+0x62c>
 8007e4c:	21400084 	addi	r5,r4,2
 8007e50:	42000204 	addi	r8,r8,8
 8007e54:	1009883a 	mov	r4,r2
 8007e58:	8c7ffc04 	addi	r17,r17,-16
 8007e5c:	b4400d0e 	bge	r22,r17,8007e94 <___vfiprintf_internal_r+0x660>
 8007e60:	18c00404 	addi	r3,r3,16
 8007e64:	20800044 	addi	r2,r4,1
 8007e68:	47000015 	stw	fp,0(r8)
 8007e6c:	45800115 	stw	r22,4(r8)
 8007e70:	d8c11c15 	stw	r3,1136(sp)
 8007e74:	d8811b15 	stw	r2,1132(sp)
 8007e78:	a8bff40e 	bge	r21,r2,8007e4c <__alt_data_end+0xfc007e4c>
 8007e7c:	1801ac1e 	bne	r3,zero,8008530 <___vfiprintf_internal_r+0xcfc>
 8007e80:	8c7ffc04 	addi	r17,r17,-16
 8007e84:	0009883a 	mov	r4,zero
 8007e88:	01400044 	movi	r5,1
 8007e8c:	d811883a 	mov	r8,sp
 8007e90:	b47ff316 	blt	r22,r17,8007e60 <__alt_data_end+0xfc007e60>
 8007e94:	da812317 	ldw	r10,1164(sp)
 8007e98:	1c47883a 	add	r3,r3,r17
 8007e9c:	44400115 	stw	r17,4(r8)
 8007ea0:	42800015 	stw	r10,0(r8)
 8007ea4:	d8c11c15 	stw	r3,1136(sp)
 8007ea8:	d9411b15 	stw	r5,1132(sp)
 8007eac:	008001c4 	movi	r2,7
 8007eb0:	1141b70e 	bge	r2,r5,8008590 <___vfiprintf_internal_r+0xd5c>
 8007eb4:	1802cf1e 	bne	r3,zero,80089f4 <___vfiprintf_internal_r+0x11c0>
 8007eb8:	94c2ca16 	blt	r18,r19,80089e4 <___vfiprintf_internal_r+0x11b0>
 8007ebc:	dac12217 	ldw	r11,1160(sp)
 8007ec0:	5c97883a 	add	r11,r11,r18
 8007ec4:	dac12215 	stw	r11,1160(sp)
 8007ec8:	d8011b15 	stw	zero,1132(sp)
 8007ecc:	d811883a 	mov	r8,sp
 8007ed0:	003e8d06 	br	8007908 <__alt_data_end+0xfc007908>
 8007ed4:	d9012017 	ldw	r4,1152(sp)
 8007ed8:	a00b883a 	mov	r5,r20
 8007edc:	80025f40 	call	80025f4 <__swsetup_r>
 8007ee0:	10002c1e 	bne	r2,zero,8007f94 <___vfiprintf_internal_r+0x760>
 8007ee4:	a0c0030b 	ldhu	r3,12(r20)
 8007ee8:	01000284 	movi	r4,10
 8007eec:	1805883a 	mov	r2,r3
 8007ef0:	1080068c 	andi	r2,r2,26
 8007ef4:	113e731e 	bne	r2,r4,80078c4 <__alt_data_end+0xfc0078c4>
 8007ef8:	a080038b 	ldhu	r2,14(r20)
 8007efc:	113fffcc 	andi	r4,r2,65535
 8007f00:	2120001c 	xori	r4,r4,32768
 8007f04:	21200004 	addi	r4,r4,-32768
 8007f08:	203e6e16 	blt	r4,zero,80078c4 <__alt_data_end+0xfc0078c4>
 8007f0c:	a3001917 	ldw	r12,100(r20)
 8007f10:	a2c00717 	ldw	r11,28(r20)
 8007f14:	a2800917 	ldw	r10,36(r20)
 8007f18:	d9012017 	ldw	r4,1152(sp)
 8007f1c:	d9c12117 	ldw	r7,1156(sp)
 8007f20:	02410004 	movi	r9,1024
 8007f24:	18ffff4c 	andi	r3,r3,65533
 8007f28:	da4b883a 	add	r5,sp,r9
 8007f2c:	b00d883a 	mov	r6,r22
 8007f30:	d8c1030d 	sth	r3,1036(sp)
 8007f34:	db011915 	stw	r12,1124(sp)
 8007f38:	d881038d 	sth	r2,1038(sp)
 8007f3c:	dac10715 	stw	r11,1052(sp)
 8007f40:	da810915 	stw	r10,1060(sp)
 8007f44:	dec10015 	stw	sp,1024(sp)
 8007f48:	dec10415 	stw	sp,1040(sp)
 8007f4c:	da410215 	stw	r9,1032(sp)
 8007f50:	da410515 	stw	r9,1044(sp)
 8007f54:	d8010615 	stw	zero,1048(sp)
 8007f58:	80078340 	call	8007834 <___vfiprintf_internal_r>
 8007f5c:	1021883a 	mov	r16,r2
 8007f60:	10000416 	blt	r2,zero,8007f74 <___vfiprintf_internal_r+0x740>
 8007f64:	d9012017 	ldw	r4,1152(sp)
 8007f68:	d9410004 	addi	r5,sp,1024
 8007f6c:	800404c0 	call	800404c <_fflush_r>
 8007f70:	1002fc1e 	bne	r2,zero,8008b64 <___vfiprintf_internal_r+0x1330>
 8007f74:	d881030b 	ldhu	r2,1036(sp)
 8007f78:	1080100c 	andi	r2,r2,64
 8007f7c:	10000326 	beq	r2,zero,8007f8c <___vfiprintf_internal_r+0x758>
 8007f80:	a080030b 	ldhu	r2,12(r20)
 8007f84:	10801014 	ori	r2,r2,64
 8007f88:	a080030d 	sth	r2,12(r20)
 8007f8c:	8005883a 	mov	r2,r16
 8007f90:	00000106 	br	8007f98 <___vfiprintf_internal_r+0x764>
 8007f94:	00bfffc4 	movi	r2,-1
 8007f98:	dfc13517 	ldw	ra,1236(sp)
 8007f9c:	df013417 	ldw	fp,1232(sp)
 8007fa0:	ddc13317 	ldw	r23,1228(sp)
 8007fa4:	dd813217 	ldw	r22,1224(sp)
 8007fa8:	dd413117 	ldw	r21,1220(sp)
 8007fac:	dd013017 	ldw	r20,1216(sp)
 8007fb0:	dcc12f17 	ldw	r19,1212(sp)
 8007fb4:	dc812e17 	ldw	r18,1208(sp)
 8007fb8:	dc412d17 	ldw	r17,1204(sp)
 8007fbc:	dc012c17 	ldw	r16,1200(sp)
 8007fc0:	dec13604 	addi	sp,sp,1240
 8007fc4:	f800283a 	ret
 8007fc8:	80045f40 	call	80045f4 <__sinit>
 8007fcc:	003e2b06 	br	800787c <__alt_data_end+0xfc00787c>
 8007fd0:	04e7c83a 	sub	r19,zero,r19
 8007fd4:	d8812115 	stw	r2,1156(sp)
 8007fd8:	ad400114 	ori	r21,r21,4
 8007fdc:	80c00007 	ldb	r3,0(r16)
 8007fe0:	003e7306 	br	80079b0 <__alt_data_end+0xfc0079b0>
 8007fe4:	a880040c 	andi	r2,r21,16
 8007fe8:	1000e41e 	bne	r2,zero,800837c <___vfiprintf_internal_r+0xb48>
 8007fec:	a880100c 	andi	r2,r21,64
 8007ff0:	1000e226 	beq	r2,zero,800837c <___vfiprintf_internal_r+0xb48>
 8007ff4:	da812117 	ldw	r10,1156(sp)
 8007ff8:	002d883a 	mov	r22,zero
 8007ffc:	0005883a 	mov	r2,zero
 8008000:	5480000b 	ldhu	r18,0(r10)
 8008004:	52800104 	addi	r10,r10,4
 8008008:	da812115 	stw	r10,1156(sp)
 800800c:	9009883a 	mov	r4,r18
 8008010:	003ee706 	br	8007bb0 <__alt_data_end+0xfc007bb0>
 8008014:	da812117 	ldw	r10,1156(sp)
 8008018:	00800044 	movi	r2,1
 800801c:	54800017 	ldw	r18,0(r10)
 8008020:	55800117 	ldw	r22,4(r10)
 8008024:	52800204 	addi	r10,r10,8
 8008028:	da812115 	stw	r10,1156(sp)
 800802c:	9588b03a 	or	r4,r18,r22
 8008030:	003edf06 	br	8007bb0 <__alt_data_end+0xfc007bb0>
 8008034:	02c20074 	movhi	r11,2049
 8008038:	5afd2704 	addi	r11,r11,-2916
 800803c:	d9811d85 	stb	r6,1142(sp)
 8008040:	dac12615 	stw	r11,1176(sp)
 8008044:	a900080c 	andi	r4,r21,32
 8008048:	d8812117 	ldw	r2,1156(sp)
 800804c:	2000a526 	beq	r4,zero,80082e4 <___vfiprintf_internal_r+0xab0>
 8008050:	da812117 	ldw	r10,1156(sp)
 8008054:	14800017 	ldw	r18,0(r2)
 8008058:	15800117 	ldw	r22,4(r2)
 800805c:	52800204 	addi	r10,r10,8
 8008060:	da812115 	stw	r10,1156(sp)
 8008064:	a880004c 	andi	r2,r21,1
 8008068:	1001d926 	beq	r2,zero,80087d0 <___vfiprintf_internal_r+0xf9c>
 800806c:	9588b03a 	or	r4,r18,r22
 8008070:	20024426 	beq	r4,zero,8008984 <___vfiprintf_internal_r+0x1150>
 8008074:	00800c04 	movi	r2,48
 8008078:	d8811d05 	stb	r2,1140(sp)
 800807c:	d8c11d45 	stb	r3,1141(sp)
 8008080:	ad400094 	ori	r21,r21,2
 8008084:	00800084 	movi	r2,2
 8008088:	003ec906 	br	8007bb0 <__alt_data_end+0xfc007bb0>
 800808c:	da812117 	ldw	r10,1156(sp)
 8008090:	04800044 	movi	r18,1
 8008094:	dac10004 	addi	r11,sp,1024
 8008098:	50800017 	ldw	r2,0(r10)
 800809c:	52800104 	addi	r10,r10,4
 80080a0:	d8011d85 	stb	zero,1142(sp)
 80080a4:	d8810005 	stb	r2,1024(sp)
 80080a8:	da812115 	stw	r10,1156(sp)
 80080ac:	9023883a 	mov	r17,r18
 80080b0:	dac12415 	stw	r11,1168(sp)
 80080b4:	0013883a 	mov	r9,zero
 80080b8:	003ee206 	br	8007c44 <__alt_data_end+0xfc007c44>
 80080bc:	ad402014 	ori	r21,r21,128
 80080c0:	80c00007 	ldb	r3,0(r16)
 80080c4:	003e3a06 	br	80079b0 <__alt_data_end+0xfc0079b0>
 80080c8:	8015883a 	mov	r10,r16
 80080cc:	0027883a 	mov	r19,zero
 80080d0:	18bff404 	addi	r2,r3,-48
 80080d4:	50c00007 	ldb	r3,0(r10)
 80080d8:	9cc002a4 	muli	r19,r19,10
 80080dc:	84000044 	addi	r16,r16,1
 80080e0:	8015883a 	mov	r10,r16
 80080e4:	98a7883a 	add	r19,r19,r2
 80080e8:	18bff404 	addi	r2,r3,-48
 80080ec:	28bff92e 	bgeu	r5,r2,80080d4 <__alt_data_end+0xfc0080d4>
 80080f0:	003e3006 	br	80079b4 <__alt_data_end+0xfc0079b4>
 80080f4:	ad400414 	ori	r21,r21,16
 80080f8:	d9811d85 	stb	r6,1142(sp)
 80080fc:	a880080c 	andi	r2,r21,32
 8008100:	d8c12117 	ldw	r3,1156(sp)
 8008104:	10004b26 	beq	r2,zero,8008234 <___vfiprintf_internal_r+0xa00>
 8008108:	da812117 	ldw	r10,1156(sp)
 800810c:	18800117 	ldw	r2,4(r3)
 8008110:	1c800017 	ldw	r18,0(r3)
 8008114:	52800204 	addi	r10,r10,8
 8008118:	da812115 	stw	r10,1156(sp)
 800811c:	102d883a 	mov	r22,r2
 8008120:	1001f116 	blt	r2,zero,80088e8 <___vfiprintf_internal_r+0x10b4>
 8008124:	db011d83 	ldbu	r12,1142(sp)
 8008128:	4823883a 	mov	r17,r9
 800812c:	00800044 	movi	r2,1
 8008130:	9588b03a 	or	r4,r18,r22
 8008134:	003ea106 	br	8007bbc <__alt_data_end+0xfc007bbc>
 8008138:	80c00007 	ldb	r3,0(r16)
 800813c:	82800044 	addi	r10,r16,1
 8008140:	1b027f26 	beq	r3,r12,8008b40 <___vfiprintf_internal_r+0x130c>
 8008144:	18bff404 	addi	r2,r3,-48
 8008148:	5021883a 	mov	r16,r10
 800814c:	0013883a 	mov	r9,zero
 8008150:	28be1836 	bltu	r5,r2,80079b4 <__alt_data_end+0xfc0079b4>
 8008154:	80c00007 	ldb	r3,0(r16)
 8008158:	4a4002a4 	muli	r9,r9,10
 800815c:	84000044 	addi	r16,r16,1
 8008160:	1253883a 	add	r9,r2,r9
 8008164:	18bff404 	addi	r2,r3,-48
 8008168:	28bffa2e 	bgeu	r5,r2,8008154 <__alt_data_end+0xfc008154>
 800816c:	483e110e 	bge	r9,zero,80079b4 <__alt_data_end+0xfc0079b4>
 8008170:	027fffc4 	movi	r9,-1
 8008174:	003e0f06 	br	80079b4 <__alt_data_end+0xfc0079b4>
 8008178:	d9811d85 	stb	r6,1142(sp)
 800817c:	a880080c 	andi	r2,r21,32
 8008180:	1001ee26 	beq	r2,zero,800893c <___vfiprintf_internal_r+0x1108>
 8008184:	da812117 	ldw	r10,1156(sp)
 8008188:	dac12217 	ldw	r11,1160(sp)
 800818c:	50800017 	ldw	r2,0(r10)
 8008190:	5807d7fa 	srai	r3,r11,31
 8008194:	52800104 	addi	r10,r10,4
 8008198:	da812115 	stw	r10,1156(sp)
 800819c:	12c00015 	stw	r11,0(r2)
 80081a0:	10c00115 	stw	r3,4(r2)
 80081a4:	003dd806 	br	8007908 <__alt_data_end+0xfc007908>
 80081a8:	30803fcc 	andi	r2,r6,255
 80081ac:	1080201c 	xori	r2,r2,128
 80081b0:	10bfe004 	addi	r2,r2,-128
 80081b4:	1001df1e 	bne	r2,zero,8008934 <___vfiprintf_internal_r+0x1100>
 80081b8:	01800804 	movi	r6,32
 80081bc:	80c00007 	ldb	r3,0(r16)
 80081c0:	003dfb06 	br	80079b0 <__alt_data_end+0xfc0079b0>
 80081c4:	da812117 	ldw	r10,1156(sp)
 80081c8:	dac12117 	ldw	r11,1156(sp)
 80081cc:	d8011d85 	stb	zero,1142(sp)
 80081d0:	52800017 	ldw	r10,0(r10)
 80081d4:	5d800104 	addi	r22,r11,4
 80081d8:	da812415 	stw	r10,1168(sp)
 80081dc:	50023b26 	beq	r10,zero,8008acc <___vfiprintf_internal_r+0x1298>
 80081e0:	d9012417 	ldw	r4,1168(sp)
 80081e4:	48021f16 	blt	r9,zero,8008a64 <___vfiprintf_internal_r+0x1230>
 80081e8:	480d883a 	mov	r6,r9
 80081ec:	000b883a 	mov	r5,zero
 80081f0:	da012a15 	stw	r8,1192(sp)
 80081f4:	da412b15 	stw	r9,1196(sp)
 80081f8:	8005aac0 	call	8005aac <memchr>
 80081fc:	da012a17 	ldw	r8,1192(sp)
 8008200:	da412b17 	ldw	r9,1196(sp)
 8008204:	10024726 	beq	r2,zero,8008b24 <___vfiprintf_internal_r+0x12f0>
 8008208:	d8c12417 	ldw	r3,1168(sp)
 800820c:	10e3c83a 	sub	r17,r2,r3
 8008210:	4c41f616 	blt	r9,r17,80089ec <___vfiprintf_internal_r+0x11b8>
 8008214:	db011d83 	ldbu	r12,1142(sp)
 8008218:	dd812115 	stw	r22,1156(sp)
 800821c:	0013883a 	mov	r9,zero
 8008220:	003e8006 	br	8007c24 <__alt_data_end+0xfc007c24>
 8008224:	d9811d85 	stb	r6,1142(sp)
 8008228:	a880080c 	andi	r2,r21,32
 800822c:	d8c12117 	ldw	r3,1156(sp)
 8008230:	103fb51e 	bne	r2,zero,8008108 <__alt_data_end+0xfc008108>
 8008234:	a880040c 	andi	r2,r21,16
 8008238:	10015e1e 	bne	r2,zero,80087b4 <___vfiprintf_internal_r+0xf80>
 800823c:	a880100c 	andi	r2,r21,64
 8008240:	10015c26 	beq	r2,zero,80087b4 <___vfiprintf_internal_r+0xf80>
 8008244:	1c80000f 	ldh	r18,0(r3)
 8008248:	da812117 	ldw	r10,1156(sp)
 800824c:	902dd7fa 	srai	r22,r18,31
 8008250:	52800104 	addi	r10,r10,4
 8008254:	da812115 	stw	r10,1156(sp)
 8008258:	b005883a 	mov	r2,r22
 800825c:	003fb006 	br	8008120 <__alt_data_end+0xfc008120>
 8008260:	da812117 	ldw	r10,1156(sp)
 8008264:	00800c04 	movi	r2,48
 8008268:	02c20074 	movhi	r11,2049
 800826c:	54800017 	ldw	r18,0(r10)
 8008270:	d8811d05 	stb	r2,1140(sp)
 8008274:	52800104 	addi	r10,r10,4
 8008278:	00801e04 	movi	r2,120
 800827c:	5afd2c04 	addi	r11,r11,-2896
 8008280:	d8811d45 	stb	r2,1141(sp)
 8008284:	002d883a 	mov	r22,zero
 8008288:	ad400094 	ori	r21,r21,2
 800828c:	da812115 	stw	r10,1156(sp)
 8008290:	dac12615 	stw	r11,1176(sp)
 8008294:	00800084 	movi	r2,2
 8008298:	9009883a 	mov	r4,r18
 800829c:	003e4406 	br	8007bb0 <__alt_data_end+0xfc007bb0>
 80082a0:	ad400814 	ori	r21,r21,32
 80082a4:	80c00007 	ldb	r3,0(r16)
 80082a8:	003dc106 	br	80079b0 <__alt_data_end+0xfc0079b0>
 80082ac:	ad401014 	ori	r21,r21,64
 80082b0:	80c00007 	ldb	r3,0(r16)
 80082b4:	003dbe06 	br	80079b0 <__alt_data_end+0xfc0079b0>
 80082b8:	80c00007 	ldb	r3,0(r16)
 80082bc:	19c1de26 	beq	r3,r7,8008a38 <___vfiprintf_internal_r+0x1204>
 80082c0:	ad400414 	ori	r21,r21,16
 80082c4:	003dba06 	br	80079b0 <__alt_data_end+0xfc0079b0>
 80082c8:	00820074 	movhi	r2,2049
 80082cc:	10bd2c04 	addi	r2,r2,-2896
 80082d0:	d8812615 	stw	r2,1176(sp)
 80082d4:	d9811d85 	stb	r6,1142(sp)
 80082d8:	a900080c 	andi	r4,r21,32
 80082dc:	d8812117 	ldw	r2,1156(sp)
 80082e0:	203f5b1e 	bne	r4,zero,8008050 <__alt_data_end+0xfc008050>
 80082e4:	a900040c 	andi	r4,r21,16
 80082e8:	2001a826 	beq	r4,zero,800898c <___vfiprintf_internal_r+0x1158>
 80082ec:	dac12117 	ldw	r11,1156(sp)
 80082f0:	14800017 	ldw	r18,0(r2)
 80082f4:	002d883a 	mov	r22,zero
 80082f8:	5ac00104 	addi	r11,r11,4
 80082fc:	dac12115 	stw	r11,1156(sp)
 8008300:	003f5806 	br	8008064 <__alt_data_end+0xfc008064>
 8008304:	da812117 	ldw	r10,1156(sp)
 8008308:	54c00017 	ldw	r19,0(r10)
 800830c:	50800104 	addi	r2,r10,4
 8008310:	983f2f16 	blt	r19,zero,8007fd0 <__alt_data_end+0xfc007fd0>
 8008314:	d8812115 	stw	r2,1156(sp)
 8008318:	80c00007 	ldb	r3,0(r16)
 800831c:	003da406 	br	80079b0 <__alt_data_end+0xfc0079b0>
 8008320:	01800ac4 	movi	r6,43
 8008324:	80c00007 	ldb	r3,0(r16)
 8008328:	003da106 	br	80079b0 <__alt_data_end+0xfc0079b0>
 800832c:	ad400054 	ori	r21,r21,1
 8008330:	80c00007 	ldb	r3,0(r16)
 8008334:	003d9e06 	br	80079b0 <__alt_data_end+0xfc0079b0>
 8008338:	d9811d85 	stb	r6,1142(sp)
 800833c:	18007126 	beq	r3,zero,8008504 <___vfiprintf_internal_r+0xcd0>
 8008340:	04800044 	movi	r18,1
 8008344:	d8c10005 	stb	r3,1024(sp)
 8008348:	d8c10004 	addi	r3,sp,1024
 800834c:	d8011d85 	stb	zero,1142(sp)
 8008350:	9023883a 	mov	r17,r18
 8008354:	d8c12415 	stw	r3,1168(sp)
 8008358:	003f5606 	br	80080b4 <__alt_data_end+0xfc0080b4>
 800835c:	dac12117 	ldw	r11,1156(sp)
 8008360:	002d883a 	mov	r22,zero
 8008364:	00800044 	movi	r2,1
 8008368:	5c800017 	ldw	r18,0(r11)
 800836c:	5ac00104 	addi	r11,r11,4
 8008370:	dac12115 	stw	r11,1156(sp)
 8008374:	9009883a 	mov	r4,r18
 8008378:	003e0d06 	br	8007bb0 <__alt_data_end+0xfc007bb0>
 800837c:	dac12117 	ldw	r11,1156(sp)
 8008380:	002d883a 	mov	r22,zero
 8008384:	0005883a 	mov	r2,zero
 8008388:	5c800017 	ldw	r18,0(r11)
 800838c:	5ac00104 	addi	r11,r11,4
 8008390:	dac12115 	stw	r11,1156(sp)
 8008394:	9009883a 	mov	r4,r18
 8008398:	003e0506 	br	8007bb0 <__alt_data_end+0xfc007bb0>
 800839c:	d9012017 	ldw	r4,1152(sp)
 80083a0:	a00b883a 	mov	r5,r20
 80083a4:	d9811a04 	addi	r6,sp,1128
 80083a8:	d8c12a15 	stw	r3,1192(sp)
 80083ac:	db012b15 	stw	r12,1196(sp)
 80083b0:	80077200 	call	8007720 <__sprint_r.part.0>
 80083b4:	d8c12a17 	ldw	r3,1192(sp)
 80083b8:	db012b17 	ldw	r12,1196(sp)
 80083bc:	1000571e 	bne	r2,zero,800851c <___vfiprintf_internal_r+0xce8>
 80083c0:	d9811b17 	ldw	r6,1132(sp)
 80083c4:	d8811c17 	ldw	r2,1136(sp)
 80083c8:	d811883a 	mov	r8,sp
 80083cc:	31400044 	addi	r5,r6,1
 80083d0:	003e3306 	br	8007ca0 <__alt_data_end+0xfc007ca0>
 80083d4:	d9411b17 	ldw	r5,1132(sp)
 80083d8:	d8c11c17 	ldw	r3,1136(sp)
 80083dc:	28800044 	addi	r2,r5,1
 80083e0:	d9011d87 	ldb	r4,1142(sp)
 80083e4:	203e4d26 	beq	r4,zero,8007d1c <__alt_data_end+0xfc007d1c>
 80083e8:	01000044 	movi	r4,1
 80083ec:	d9411d84 	addi	r5,sp,1142
 80083f0:	1907883a 	add	r3,r3,r4
 80083f4:	41400015 	stw	r5,0(r8)
 80083f8:	41000115 	stw	r4,4(r8)
 80083fc:	d8c11c15 	stw	r3,1136(sp)
 8008400:	d8811b15 	stw	r2,1132(sp)
 8008404:	014001c4 	movi	r5,7
 8008408:	2880aa16 	blt	r5,r2,80086b4 <___vfiprintf_internal_r+0xe80>
 800840c:	100b883a 	mov	r5,r2
 8008410:	42000204 	addi	r8,r8,8
 8008414:	10800044 	addi	r2,r2,1
 8008418:	003e4006 	br	8007d1c <__alt_data_end+0xfc007d1c>
 800841c:	d9012017 	ldw	r4,1152(sp)
 8008420:	a00b883a 	mov	r5,r20
 8008424:	d9811a04 	addi	r6,sp,1128
 8008428:	d9c12a15 	stw	r7,1192(sp)
 800842c:	db012b15 	stw	r12,1196(sp)
 8008430:	80077200 	call	8007720 <__sprint_r.part.0>
 8008434:	d9c12a17 	ldw	r7,1192(sp)
 8008438:	db012b17 	ldw	r12,1196(sp)
 800843c:	1000371e 	bne	r2,zero,800851c <___vfiprintf_internal_r+0xce8>
 8008440:	d9411b17 	ldw	r5,1132(sp)
 8008444:	d8c11c17 	ldw	r3,1136(sp)
 8008448:	d811883a 	mov	r8,sp
 800844c:	28800044 	addi	r2,r5,1
 8008450:	003e4d06 	br	8007d88 <__alt_data_end+0xfc007d88>
 8008454:	10803fcc 	andi	r2,r2,255
 8008458:	00c00044 	movi	r3,1
 800845c:	10fddf1e 	bne	r2,r3,8007bdc <__alt_data_end+0xfc007bdc>
 8008460:	b000021e 	bne	r22,zero,800846c <___vfiprintf_internal_r+0xc38>
 8008464:	00800244 	movi	r2,9
 8008468:	1480202e 	bgeu	r2,r18,80084ec <___vfiprintf_internal_r+0xcb8>
 800846c:	dc012515 	stw	r16,1172(sp)
 8008470:	dc410a04 	addi	r17,sp,1064
 8008474:	9021883a 	mov	r16,r18
 8008478:	da012415 	stw	r8,1168(sp)
 800847c:	b025883a 	mov	r18,r22
 8008480:	da412315 	stw	r9,1164(sp)
 8008484:	602d883a 	mov	r22,r12
 8008488:	8009883a 	mov	r4,r16
 800848c:	900b883a 	mov	r5,r18
 8008490:	01800284 	movi	r6,10
 8008494:	000f883a 	mov	r7,zero
 8008498:	8009aac0 	call	8009aac <__umoddi3>
 800849c:	10800c04 	addi	r2,r2,48
 80084a0:	8c7fffc4 	addi	r17,r17,-1
 80084a4:	8009883a 	mov	r4,r16
 80084a8:	900b883a 	mov	r5,r18
 80084ac:	01800284 	movi	r6,10
 80084b0:	000f883a 	mov	r7,zero
 80084b4:	88800005 	stb	r2,0(r17)
 80084b8:	80094ec0 	call	80094ec <__udivdi3>
 80084bc:	1021883a 	mov	r16,r2
 80084c0:	10c4b03a 	or	r2,r2,r3
 80084c4:	1825883a 	mov	r18,r3
 80084c8:	103fef1e 	bne	r2,zero,8008488 <__alt_data_end+0xfc008488>
 80084cc:	da811e17 	ldw	r10,1144(sp)
 80084d0:	da012417 	ldw	r8,1168(sp)
 80084d4:	da412317 	ldw	r9,1164(sp)
 80084d8:	dc412415 	stw	r17,1168(sp)
 80084dc:	b019883a 	mov	r12,r22
 80084e0:	dc012517 	ldw	r16,1172(sp)
 80084e4:	5463c83a 	sub	r17,r10,r17
 80084e8:	003dce06 	br	8007c24 <__alt_data_end+0xfc007c24>
 80084ec:	94800c04 	addi	r18,r18,48
 80084f0:	d8c109c4 	addi	r3,sp,1063
 80084f4:	dc8109c5 	stb	r18,1063(sp)
 80084f8:	dc412717 	ldw	r17,1180(sp)
 80084fc:	d8c12415 	stw	r3,1168(sp)
 8008500:	003dc806 	br	8007c24 <__alt_data_end+0xfc007c24>
 8008504:	d8811c17 	ldw	r2,1136(sp)
 8008508:	10000426 	beq	r2,zero,800851c <___vfiprintf_internal_r+0xce8>
 800850c:	d9012017 	ldw	r4,1152(sp)
 8008510:	a00b883a 	mov	r5,r20
 8008514:	d9811a04 	addi	r6,sp,1128
 8008518:	80077200 	call	8007720 <__sprint_r.part.0>
 800851c:	a080030b 	ldhu	r2,12(r20)
 8008520:	1080100c 	andi	r2,r2,64
 8008524:	103e9b1e 	bne	r2,zero,8007f94 <__alt_data_end+0xfc007f94>
 8008528:	d8812217 	ldw	r2,1160(sp)
 800852c:	003e9a06 	br	8007f98 <__alt_data_end+0xfc007f98>
 8008530:	d9012017 	ldw	r4,1152(sp)
 8008534:	a00b883a 	mov	r5,r20
 8008538:	d9811a04 	addi	r6,sp,1128
 800853c:	80077200 	call	8007720 <__sprint_r.part.0>
 8008540:	103ff61e 	bne	r2,zero,800851c <__alt_data_end+0xfc00851c>
 8008544:	d9011b17 	ldw	r4,1132(sp)
 8008548:	d8c11c17 	ldw	r3,1136(sp)
 800854c:	d811883a 	mov	r8,sp
 8008550:	21400044 	addi	r5,r4,1
 8008554:	003e4006 	br	8007e58 <__alt_data_end+0xfc007e58>
 8008558:	1800d61e 	bne	r3,zero,80088b4 <___vfiprintf_internal_r+0x1080>
 800855c:	dac12417 	ldw	r11,1168(sp)
 8008560:	00800044 	movi	r2,1
 8008564:	dc400115 	stw	r17,4(sp)
 8008568:	dac00015 	stw	r11,0(sp)
 800856c:	dc411c15 	stw	r17,1136(sp)
 8008570:	d8811b15 	stw	r2,1132(sp)
 8008574:	8807883a 	mov	r3,r17
 8008578:	d811883a 	mov	r8,sp
 800857c:	42000204 	addi	r8,r8,8
 8008580:	aac0010c 	andi	r11,r21,4
 8008584:	58000226 	beq	r11,zero,8008590 <___vfiprintf_internal_r+0xd5c>
 8008588:	9ca3c83a 	sub	r17,r19,r18
 800858c:	047e2616 	blt	zero,r17,8007e28 <__alt_data_end+0xfc007e28>
 8008590:	94c0010e 	bge	r18,r19,8008598 <___vfiprintf_internal_r+0xd64>
 8008594:	9825883a 	mov	r18,r19
 8008598:	da812217 	ldw	r10,1160(sp)
 800859c:	5495883a 	add	r10,r10,r18
 80085a0:	da812215 	stw	r10,1160(sp)
 80085a4:	183e4826 	beq	r3,zero,8007ec8 <__alt_data_end+0xfc007ec8>
 80085a8:	d9012017 	ldw	r4,1152(sp)
 80085ac:	a00b883a 	mov	r5,r20
 80085b0:	d9811a04 	addi	r6,sp,1128
 80085b4:	80077200 	call	8007720 <__sprint_r.part.0>
 80085b8:	103e4326 	beq	r2,zero,8007ec8 <__alt_data_end+0xfc007ec8>
 80085bc:	003fd706 	br	800851c <__alt_data_end+0xfc00851c>
 80085c0:	9cadc83a 	sub	r22,r19,r18
 80085c4:	05bde40e 	bge	zero,r22,8007d58 <__alt_data_end+0xfc007d58>
 80085c8:	03000404 	movi	r12,16
 80085cc:	6581500e 	bge	r12,r22,8008b10 <___vfiprintf_internal_r+0x12dc>
 80085d0:	00820074 	movhi	r2,2049
 80085d4:	10bd8d04 	addi	r2,r2,-2508
 80085d8:	d8812315 	stw	r2,1164(sp)
 80085dc:	8005883a 	mov	r2,r16
 80085e0:	038001c4 	movi	r14,7
 80085e4:	b021883a 	mov	r16,r22
 80085e8:	da412515 	stw	r9,1172(sp)
 80085ec:	102d883a 	mov	r22,r2
 80085f0:	00000506 	br	8008608 <___vfiprintf_internal_r+0xdd4>
 80085f4:	29000084 	addi	r4,r5,2
 80085f8:	42000204 	addi	r8,r8,8
 80085fc:	100b883a 	mov	r5,r2
 8008600:	843ffc04 	addi	r16,r16,-16
 8008604:	64000d0e 	bge	r12,r16,800863c <___vfiprintf_internal_r+0xe08>
 8008608:	18c00404 	addi	r3,r3,16
 800860c:	28800044 	addi	r2,r5,1
 8008610:	45c00015 	stw	r23,0(r8)
 8008614:	43000115 	stw	r12,4(r8)
 8008618:	d8c11c15 	stw	r3,1136(sp)
 800861c:	d8811b15 	stw	r2,1132(sp)
 8008620:	70bff40e 	bge	r14,r2,80085f4 <__alt_data_end+0xfc0085f4>
 8008624:	1800151e 	bne	r3,zero,800867c <___vfiprintf_internal_r+0xe48>
 8008628:	843ffc04 	addi	r16,r16,-16
 800862c:	000b883a 	mov	r5,zero
 8008630:	01000044 	movi	r4,1
 8008634:	d811883a 	mov	r8,sp
 8008638:	643ff316 	blt	r12,r16,8008608 <__alt_data_end+0xfc008608>
 800863c:	da412517 	ldw	r9,1172(sp)
 8008640:	b005883a 	mov	r2,r22
 8008644:	802d883a 	mov	r22,r16
 8008648:	1021883a 	mov	r16,r2
 800864c:	da812317 	ldw	r10,1164(sp)
 8008650:	1d87883a 	add	r3,r3,r22
 8008654:	45800115 	stw	r22,4(r8)
 8008658:	42800015 	stw	r10,0(r8)
 800865c:	d8c11c15 	stw	r3,1136(sp)
 8008660:	d9011b15 	stw	r4,1132(sp)
 8008664:	008001c4 	movi	r2,7
 8008668:	11008d16 	blt	r2,r4,80088a0 <___vfiprintf_internal_r+0x106c>
 800866c:	42000204 	addi	r8,r8,8
 8008670:	20800044 	addi	r2,r4,1
 8008674:	200b883a 	mov	r5,r4
 8008678:	003db706 	br	8007d58 <__alt_data_end+0xfc007d58>
 800867c:	d9012017 	ldw	r4,1152(sp)
 8008680:	a00b883a 	mov	r5,r20
 8008684:	d9811a04 	addi	r6,sp,1128
 8008688:	db012b15 	stw	r12,1196(sp)
 800868c:	db812a15 	stw	r14,1192(sp)
 8008690:	80077200 	call	8007720 <__sprint_r.part.0>
 8008694:	db012b17 	ldw	r12,1196(sp)
 8008698:	db812a17 	ldw	r14,1192(sp)
 800869c:	103f9f1e 	bne	r2,zero,800851c <__alt_data_end+0xfc00851c>
 80086a0:	d9411b17 	ldw	r5,1132(sp)
 80086a4:	d8c11c17 	ldw	r3,1136(sp)
 80086a8:	d811883a 	mov	r8,sp
 80086ac:	29000044 	addi	r4,r5,1
 80086b0:	003fd306 	br	8008600 <__alt_data_end+0xfc008600>
 80086b4:	18006c1e 	bne	r3,zero,8008868 <___vfiprintf_internal_r+0x1034>
 80086b8:	70004f26 	beq	r14,zero,80087f8 <___vfiprintf_internal_r+0xfc4>
 80086bc:	d8811d04 	addi	r2,sp,1140
 80086c0:	00c00084 	movi	r3,2
 80086c4:	d8800015 	stw	r2,0(sp)
 80086c8:	d8c00115 	stw	r3,4(sp)
 80086cc:	2005883a 	mov	r2,r4
 80086d0:	d811883a 	mov	r8,sp
 80086d4:	003d9b06 	br	8007d44 <__alt_data_end+0xfc007d44>
 80086d8:	1800571e 	bne	r3,zero,8008838 <___vfiprintf_internal_r+0x1004>
 80086dc:	000b883a 	mov	r5,zero
 80086e0:	00800044 	movi	r2,1
 80086e4:	d811883a 	mov	r8,sp
 80086e8:	003d9906 	br	8007d50 <__alt_data_end+0xfc007d50>
 80086ec:	10803fcc 	andi	r2,r2,255
 80086f0:	1000251e 	bne	r2,zero,8008788 <___vfiprintf_internal_r+0xf54>
 80086f4:	a880004c 	andi	r2,r21,1
 80086f8:	10007826 	beq	r2,zero,80088dc <___vfiprintf_internal_r+0x10a8>
 80086fc:	00800c04 	movi	r2,48
 8008700:	d8c109c4 	addi	r3,sp,1063
 8008704:	d88109c5 	stb	r2,1063(sp)
 8008708:	dc412717 	ldw	r17,1180(sp)
 800870c:	d8c12415 	stw	r3,1168(sp)
 8008710:	003d4406 	br	8007c24 <__alt_data_end+0xfc007c24>
 8008714:	d9012617 	ldw	r4,1176(sp)
 8008718:	dc410a04 	addi	r17,sp,1064
 800871c:	908003cc 	andi	r2,r18,15
 8008720:	b006973a 	slli	r3,r22,28
 8008724:	2085883a 	add	r2,r4,r2
 8008728:	9024d13a 	srli	r18,r18,4
 800872c:	10800003 	ldbu	r2,0(r2)
 8008730:	b02cd13a 	srli	r22,r22,4
 8008734:	8c7fffc4 	addi	r17,r17,-1
 8008738:	1ca4b03a 	or	r18,r3,r18
 800873c:	88800005 	stb	r2,0(r17)
 8008740:	9584b03a 	or	r2,r18,r22
 8008744:	103ff51e 	bne	r2,zero,800871c <__alt_data_end+0xfc00871c>
 8008748:	dac11e17 	ldw	r11,1144(sp)
 800874c:	dc412415 	stw	r17,1168(sp)
 8008750:	5c63c83a 	sub	r17,r11,r17
 8008754:	003d3306 	br	8007c24 <__alt_data_end+0xfc007c24>
 8008758:	1800941e 	bne	r3,zero,80089ac <___vfiprintf_internal_r+0x1178>
 800875c:	d8811d87 	ldb	r2,1142(sp)
 8008760:	10006b26 	beq	r2,zero,8008910 <___vfiprintf_internal_r+0x10dc>
 8008764:	00c00044 	movi	r3,1
 8008768:	d9011d84 	addi	r4,sp,1142
 800876c:	1805883a 	mov	r2,r3
 8008770:	d9000015 	stw	r4,0(sp)
 8008774:	d8c00115 	stw	r3,4(sp)
 8008778:	d811883a 	mov	r8,sp
 800877c:	003f2306 	br	800840c <__alt_data_end+0xfc00840c>
 8008780:	8023883a 	mov	r17,r16
 8008784:	003c7d06 	br	800797c <__alt_data_end+0xfc00797c>
 8008788:	da810a04 	addi	r10,sp,1064
 800878c:	da812415 	stw	r10,1168(sp)
 8008790:	003d2406 	br	8007c24 <__alt_data_end+0xfc007c24>
 8008794:	d9012017 	ldw	r4,1152(sp)
 8008798:	a00b883a 	mov	r5,r20
 800879c:	d9811a04 	addi	r6,sp,1128
 80087a0:	80077200 	call	8007720 <__sprint_r.part.0>
 80087a4:	103f5d1e 	bne	r2,zero,800851c <__alt_data_end+0xfc00851c>
 80087a8:	d8c11c17 	ldw	r3,1136(sp)
 80087ac:	d811883a 	mov	r8,sp
 80087b0:	003f7306 	br	8008580 <__alt_data_end+0xfc008580>
 80087b4:	1c800017 	ldw	r18,0(r3)
 80087b8:	dac12117 	ldw	r11,1156(sp)
 80087bc:	902dd7fa 	srai	r22,r18,31
 80087c0:	5ac00104 	addi	r11,r11,4
 80087c4:	dac12115 	stw	r11,1156(sp)
 80087c8:	b005883a 	mov	r2,r22
 80087cc:	003e5406 	br	8008120 <__alt_data_end+0xfc008120>
 80087d0:	00800084 	movi	r2,2
 80087d4:	9588b03a 	or	r4,r18,r22
 80087d8:	003cf506 	br	8007bb0 <__alt_data_end+0xfc007bb0>
 80087dc:	d9012017 	ldw	r4,1152(sp)
 80087e0:	a00b883a 	mov	r5,r20
 80087e4:	d9811a04 	addi	r6,sp,1128
 80087e8:	80077200 	call	8007720 <__sprint_r.part.0>
 80087ec:	103f4b1e 	bne	r2,zero,800851c <__alt_data_end+0xfc00851c>
 80087f0:	d811883a 	mov	r8,sp
 80087f4:	003cd106 	br	8007b3c <__alt_data_end+0xfc007b3c>
 80087f8:	000b883a 	mov	r5,zero
 80087fc:	2005883a 	mov	r2,r4
 8008800:	d811883a 	mov	r8,sp
 8008804:	003d5206 	br	8007d50 <__alt_data_end+0xfc007d50>
 8008808:	10803fcc 	andi	r2,r2,255
 800880c:	1080201c 	xori	r2,r2,128
 8008810:	10bfe004 	addi	r2,r2,-128
 8008814:	01000c04 	movi	r4,48
 8008818:	11008e26 	beq	r2,r4,8008a54 <___vfiprintf_internal_r+0x1220>
 800881c:	da812417 	ldw	r10,1168(sp)
 8008820:	dac11e17 	ldw	r11,1144(sp)
 8008824:	193fffc5 	stb	r4,-1(r3)
 8008828:	52bfffc4 	addi	r10,r10,-1
 800882c:	da812415 	stw	r10,1168(sp)
 8008830:	5aa3c83a 	sub	r17,r11,r10
 8008834:	003cfb06 	br	8007c24 <__alt_data_end+0xfc007c24>
 8008838:	d9012017 	ldw	r4,1152(sp)
 800883c:	a00b883a 	mov	r5,r20
 8008840:	d9811a04 	addi	r6,sp,1128
 8008844:	da412b15 	stw	r9,1196(sp)
 8008848:	80077200 	call	8007720 <__sprint_r.part.0>
 800884c:	da412b17 	ldw	r9,1196(sp)
 8008850:	103f321e 	bne	r2,zero,800851c <__alt_data_end+0xfc00851c>
 8008854:	d9411b17 	ldw	r5,1132(sp)
 8008858:	d8c11c17 	ldw	r3,1136(sp)
 800885c:	d811883a 	mov	r8,sp
 8008860:	28800044 	addi	r2,r5,1
 8008864:	003d3a06 	br	8007d50 <__alt_data_end+0xfc007d50>
 8008868:	d9012017 	ldw	r4,1152(sp)
 800886c:	a00b883a 	mov	r5,r20
 8008870:	d9811a04 	addi	r6,sp,1128
 8008874:	da412b15 	stw	r9,1196(sp)
 8008878:	db812a15 	stw	r14,1192(sp)
 800887c:	80077200 	call	8007720 <__sprint_r.part.0>
 8008880:	da412b17 	ldw	r9,1196(sp)
 8008884:	db812a17 	ldw	r14,1192(sp)
 8008888:	103f241e 	bne	r2,zero,800851c <__alt_data_end+0xfc00851c>
 800888c:	d9411b17 	ldw	r5,1132(sp)
 8008890:	d8c11c17 	ldw	r3,1136(sp)
 8008894:	d811883a 	mov	r8,sp
 8008898:	28800044 	addi	r2,r5,1
 800889c:	003d1f06 	br	8007d1c <__alt_data_end+0xfc007d1c>
 80088a0:	1800781e 	bne	r3,zero,8008a84 <___vfiprintf_internal_r+0x1250>
 80088a4:	000b883a 	mov	r5,zero
 80088a8:	00800044 	movi	r2,1
 80088ac:	d811883a 	mov	r8,sp
 80088b0:	003d2906 	br	8007d58 <__alt_data_end+0xfc007d58>
 80088b4:	d9012017 	ldw	r4,1152(sp)
 80088b8:	a00b883a 	mov	r5,r20
 80088bc:	d9811a04 	addi	r6,sp,1128
 80088c0:	80077200 	call	8007720 <__sprint_r.part.0>
 80088c4:	103f151e 	bne	r2,zero,800851c <__alt_data_end+0xfc00851c>
 80088c8:	d8811b17 	ldw	r2,1132(sp)
 80088cc:	d8c11c17 	ldw	r3,1136(sp)
 80088d0:	d811883a 	mov	r8,sp
 80088d4:	10800044 	addi	r2,r2,1
 80088d8:	003d4406 	br	8007dec <__alt_data_end+0xfc007dec>
 80088dc:	dac10a04 	addi	r11,sp,1064
 80088e0:	dac12415 	stw	r11,1168(sp)
 80088e4:	003ccf06 	br	8007c24 <__alt_data_end+0xfc007c24>
 80088e8:	04a5c83a 	sub	r18,zero,r18
 80088ec:	9004c03a 	cmpne	r2,r18,zero
 80088f0:	05adc83a 	sub	r22,zero,r22
 80088f4:	b0adc83a 	sub	r22,r22,r2
 80088f8:	03000b44 	movi	r12,45
 80088fc:	db011d85 	stb	r12,1142(sp)
 8008900:	4823883a 	mov	r17,r9
 8008904:	00800044 	movi	r2,1
 8008908:	9588b03a 	or	r4,r18,r22
 800890c:	003cab06 	br	8007bbc <__alt_data_end+0xfc007bbc>
 8008910:	000b883a 	mov	r5,zero
 8008914:	00800044 	movi	r2,1
 8008918:	d811883a 	mov	r8,sp
 800891c:	703d0c26 	beq	r14,zero,8007d50 <__alt_data_end+0xfc007d50>
 8008920:	00c00084 	movi	r3,2
 8008924:	d9011d04 	addi	r4,sp,1140
 8008928:	d9000015 	stw	r4,0(sp)
 800892c:	d8c00115 	stw	r3,4(sp)
 8008930:	003d0406 	br	8007d44 <__alt_data_end+0xfc007d44>
 8008934:	80c00007 	ldb	r3,0(r16)
 8008938:	003c1d06 	br	80079b0 <__alt_data_end+0xfc0079b0>
 800893c:	a880040c 	andi	r2,r21,16
 8008940:	1000091e 	bne	r2,zero,8008968 <___vfiprintf_internal_r+0x1134>
 8008944:	aac0100c 	andi	r11,r21,64
 8008948:	58000726 	beq	r11,zero,8008968 <___vfiprintf_internal_r+0x1134>
 800894c:	da812117 	ldw	r10,1156(sp)
 8008950:	dac12217 	ldw	r11,1160(sp)
 8008954:	50800017 	ldw	r2,0(r10)
 8008958:	52800104 	addi	r10,r10,4
 800895c:	da812115 	stw	r10,1156(sp)
 8008960:	12c0000d 	sth	r11,0(r2)
 8008964:	003be806 	br	8007908 <__alt_data_end+0xfc007908>
 8008968:	da812117 	ldw	r10,1156(sp)
 800896c:	dac12217 	ldw	r11,1160(sp)
 8008970:	50800017 	ldw	r2,0(r10)
 8008974:	52800104 	addi	r10,r10,4
 8008978:	da812115 	stw	r10,1156(sp)
 800897c:	12c00015 	stw	r11,0(r2)
 8008980:	003be106 	br	8007908 <__alt_data_end+0xfc007908>
 8008984:	00800084 	movi	r2,2
 8008988:	003c8906 	br	8007bb0 <__alt_data_end+0xfc007bb0>
 800898c:	a900100c 	andi	r4,r21,64
 8008990:	20001f26 	beq	r4,zero,8008a10 <___vfiprintf_internal_r+0x11dc>
 8008994:	da812117 	ldw	r10,1156(sp)
 8008998:	1480000b 	ldhu	r18,0(r2)
 800899c:	002d883a 	mov	r22,zero
 80089a0:	52800104 	addi	r10,r10,4
 80089a4:	da812115 	stw	r10,1156(sp)
 80089a8:	003dae06 	br	8008064 <__alt_data_end+0xfc008064>
 80089ac:	d9012017 	ldw	r4,1152(sp)
 80089b0:	a00b883a 	mov	r5,r20
 80089b4:	d9811a04 	addi	r6,sp,1128
 80089b8:	da412b15 	stw	r9,1196(sp)
 80089bc:	db812a15 	stw	r14,1192(sp)
 80089c0:	80077200 	call	8007720 <__sprint_r.part.0>
 80089c4:	da412b17 	ldw	r9,1196(sp)
 80089c8:	db812a17 	ldw	r14,1192(sp)
 80089cc:	103ed31e 	bne	r2,zero,800851c <__alt_data_end+0xfc00851c>
 80089d0:	d9411b17 	ldw	r5,1132(sp)
 80089d4:	d8c11c17 	ldw	r3,1136(sp)
 80089d8:	d811883a 	mov	r8,sp
 80089dc:	28800044 	addi	r2,r5,1
 80089e0:	003e7f06 	br	80083e0 <__alt_data_end+0xfc0083e0>
 80089e4:	9825883a 	mov	r18,r19
 80089e8:	003d3406 	br	8007ebc <__alt_data_end+0xfc007ebc>
 80089ec:	4823883a 	mov	r17,r9
 80089f0:	003e0806 	br	8008214 <__alt_data_end+0xfc008214>
 80089f4:	d9012017 	ldw	r4,1152(sp)
 80089f8:	a00b883a 	mov	r5,r20
 80089fc:	d9811a04 	addi	r6,sp,1128
 8008a00:	80077200 	call	8007720 <__sprint_r.part.0>
 8008a04:	103ec51e 	bne	r2,zero,800851c <__alt_data_end+0xfc00851c>
 8008a08:	d8c11c17 	ldw	r3,1136(sp)
 8008a0c:	003ee006 	br	8008590 <__alt_data_end+0xfc008590>
 8008a10:	dac12117 	ldw	r11,1156(sp)
 8008a14:	14800017 	ldw	r18,0(r2)
 8008a18:	002d883a 	mov	r22,zero
 8008a1c:	5ac00104 	addi	r11,r11,4
 8008a20:	dac12115 	stw	r11,1156(sp)
 8008a24:	003d8f06 	br	8008064 <__alt_data_end+0xfc008064>
 8008a28:	02c20074 	movhi	r11,2049
 8008a2c:	5afd8d04 	addi	r11,r11,-2508
 8008a30:	dac12315 	stw	r11,1164(sp)
 8008a34:	003ce306 	br	8007dc4 <__alt_data_end+0xfc007dc4>
 8008a38:	80c00043 	ldbu	r3,1(r16)
 8008a3c:	ad400814 	ori	r21,r21,32
 8008a40:	84000044 	addi	r16,r16,1
 8008a44:	18c03fcc 	andi	r3,r3,255
 8008a48:	18c0201c 	xori	r3,r3,128
 8008a4c:	18ffe004 	addi	r3,r3,-128
 8008a50:	003bd706 	br	80079b0 <__alt_data_end+0xfc0079b0>
 8008a54:	dac11e17 	ldw	r11,1144(sp)
 8008a58:	d8c12417 	ldw	r3,1168(sp)
 8008a5c:	58e3c83a 	sub	r17,r11,r3
 8008a60:	003c7006 	br	8007c24 <__alt_data_end+0xfc007c24>
 8008a64:	da012a15 	stw	r8,1192(sp)
 8008a68:	800053c0 	call	800053c <strlen>
 8008a6c:	1023883a 	mov	r17,r2
 8008a70:	db011d83 	ldbu	r12,1142(sp)
 8008a74:	dd812115 	stw	r22,1156(sp)
 8008a78:	0013883a 	mov	r9,zero
 8008a7c:	da012a17 	ldw	r8,1192(sp)
 8008a80:	003c6806 	br	8007c24 <__alt_data_end+0xfc007c24>
 8008a84:	d9012017 	ldw	r4,1152(sp)
 8008a88:	a00b883a 	mov	r5,r20
 8008a8c:	d9811a04 	addi	r6,sp,1128
 8008a90:	da412b15 	stw	r9,1196(sp)
 8008a94:	80077200 	call	8007720 <__sprint_r.part.0>
 8008a98:	da412b17 	ldw	r9,1196(sp)
 8008a9c:	103e9f1e 	bne	r2,zero,800851c <__alt_data_end+0xfc00851c>
 8008aa0:	d9411b17 	ldw	r5,1132(sp)
 8008aa4:	d8c11c17 	ldw	r3,1136(sp)
 8008aa8:	d811883a 	mov	r8,sp
 8008aac:	28800044 	addi	r2,r5,1
 8008ab0:	003ca906 	br	8007d58 <__alt_data_end+0xfc007d58>
 8008ab4:	d9411b17 	ldw	r5,1132(sp)
 8008ab8:	01020074 	movhi	r4,2049
 8008abc:	213d9104 	addi	r4,r4,-2492
 8008ac0:	d9012315 	stw	r4,1164(sp)
 8008ac4:	29400044 	addi	r5,r5,1
 8008ac8:	003c8806 	br	8007cec <__alt_data_end+0xfc007cec>
 8008acc:	00800184 	movi	r2,6
 8008ad0:	1240012e 	bgeu	r2,r9,8008ad8 <___vfiprintf_internal_r+0x12a4>
 8008ad4:	1013883a 	mov	r9,r2
 8008ad8:	4823883a 	mov	r17,r9
 8008adc:	4825883a 	mov	r18,r9
 8008ae0:	48001516 	blt	r9,zero,8008b38 <___vfiprintf_internal_r+0x1304>
 8008ae4:	00820074 	movhi	r2,2049
 8008ae8:	10bd3104 	addi	r2,r2,-2876
 8008aec:	dd812115 	stw	r22,1156(sp)
 8008af0:	d8812415 	stw	r2,1168(sp)
 8008af4:	003d6f06 	br	80080b4 <__alt_data_end+0xfc0080b4>
 8008af8:	d9411b17 	ldw	r5,1132(sp)
 8008afc:	02c20074 	movhi	r11,2049
 8008b00:	5afd9104 	addi	r11,r11,-2492
 8008b04:	dac12315 	stw	r11,1164(sp)
 8008b08:	29400044 	addi	r5,r5,1
 8008b0c:	003ce106 	br	8007e94 <__alt_data_end+0xfc007e94>
 8008b10:	01020074 	movhi	r4,2049
 8008b14:	213d8d04 	addi	r4,r4,-2508
 8008b18:	d9012315 	stw	r4,1164(sp)
 8008b1c:	1009883a 	mov	r4,r2
 8008b20:	003eca06 	br	800864c <__alt_data_end+0xfc00864c>
 8008b24:	4823883a 	mov	r17,r9
 8008b28:	db011d83 	ldbu	r12,1142(sp)
 8008b2c:	dd812115 	stw	r22,1156(sp)
 8008b30:	0013883a 	mov	r9,zero
 8008b34:	003c3b06 	br	8007c24 <__alt_data_end+0xfc007c24>
 8008b38:	0025883a 	mov	r18,zero
 8008b3c:	003fe906 	br	8008ae4 <__alt_data_end+0xfc008ae4>
 8008b40:	dac12117 	ldw	r11,1156(sp)
 8008b44:	8005883a 	mov	r2,r16
 8008b48:	5021883a 	mov	r16,r10
 8008b4c:	5a400017 	ldw	r9,0(r11)
 8008b50:	58c00104 	addi	r3,r11,4
 8008b54:	d8c12115 	stw	r3,1156(sp)
 8008b58:	48000a16 	blt	r9,zero,8008b84 <___vfiprintf_internal_r+0x1350>
 8008b5c:	10c00047 	ldb	r3,1(r2)
 8008b60:	003b9306 	br	80079b0 <__alt_data_end+0xfc0079b0>
 8008b64:	043fffc4 	movi	r16,-1
 8008b68:	003d0206 	br	8007f74 <__alt_data_end+0xfc007f74>
 8008b6c:	94c0010e 	bge	r18,r19,8008b74 <___vfiprintf_internal_r+0x1340>
 8008b70:	9825883a 	mov	r18,r19
 8008b74:	da812217 	ldw	r10,1160(sp)
 8008b78:	5495883a 	add	r10,r10,r18
 8008b7c:	da812215 	stw	r10,1160(sp)
 8008b80:	003cd106 	br	8007ec8 <__alt_data_end+0xfc007ec8>
 8008b84:	027fffc4 	movi	r9,-1
 8008b88:	10c00047 	ldb	r3,1(r2)
 8008b8c:	003b8806 	br	80079b0 <__alt_data_end+0xfc0079b0>

08008b90 <__vfiprintf_internal>:
 8008b90:	2007883a 	mov	r3,r4
 8008b94:	01020074 	movhi	r4,2049
 8008b98:	21049f04 	addi	r4,r4,4732
 8008b9c:	21000017 	ldw	r4,0(r4)
 8008ba0:	2805883a 	mov	r2,r5
 8008ba4:	300f883a 	mov	r7,r6
 8008ba8:	180b883a 	mov	r5,r3
 8008bac:	100d883a 	mov	r6,r2
 8008bb0:	80078341 	jmpi	8007834 <___vfiprintf_internal_r>

08008bb4 <_write_r>:
 8008bb4:	defffd04 	addi	sp,sp,-12
 8008bb8:	dc000015 	stw	r16,0(sp)
 8008bbc:	04020074 	movhi	r16,2049
 8008bc0:	dc400115 	stw	r17,4(sp)
 8008bc4:	840b7a04 	addi	r16,r16,11752
 8008bc8:	2023883a 	mov	r17,r4
 8008bcc:	2809883a 	mov	r4,r5
 8008bd0:	300b883a 	mov	r5,r6
 8008bd4:	380d883a 	mov	r6,r7
 8008bd8:	dfc00215 	stw	ra,8(sp)
 8008bdc:	80000015 	stw	zero,0(r16)
 8008be0:	800d0140 	call	800d014 <write>
 8008be4:	00ffffc4 	movi	r3,-1
 8008be8:	10c00526 	beq	r2,r3,8008c00 <_write_r+0x4c>
 8008bec:	dfc00217 	ldw	ra,8(sp)
 8008bf0:	dc400117 	ldw	r17,4(sp)
 8008bf4:	dc000017 	ldw	r16,0(sp)
 8008bf8:	dec00304 	addi	sp,sp,12
 8008bfc:	f800283a 	ret
 8008c00:	80c00017 	ldw	r3,0(r16)
 8008c04:	183ff926 	beq	r3,zero,8008bec <__alt_data_end+0xfc008bec>
 8008c08:	88c00015 	stw	r3,0(r17)
 8008c0c:	003ff706 	br	8008bec <__alt_data_end+0xfc008bec>

08008c10 <_close_r>:
 8008c10:	defffd04 	addi	sp,sp,-12
 8008c14:	dc000015 	stw	r16,0(sp)
 8008c18:	04020074 	movhi	r16,2049
 8008c1c:	dc400115 	stw	r17,4(sp)
 8008c20:	840b7a04 	addi	r16,r16,11752
 8008c24:	2023883a 	mov	r17,r4
 8008c28:	2809883a 	mov	r4,r5
 8008c2c:	dfc00215 	stw	ra,8(sp)
 8008c30:	80000015 	stw	zero,0(r16)
 8008c34:	800c7b80 	call	800c7b8 <close>
 8008c38:	00ffffc4 	movi	r3,-1
 8008c3c:	10c00526 	beq	r2,r3,8008c54 <_close_r+0x44>
 8008c40:	dfc00217 	ldw	ra,8(sp)
 8008c44:	dc400117 	ldw	r17,4(sp)
 8008c48:	dc000017 	ldw	r16,0(sp)
 8008c4c:	dec00304 	addi	sp,sp,12
 8008c50:	f800283a 	ret
 8008c54:	80c00017 	ldw	r3,0(r16)
 8008c58:	183ff926 	beq	r3,zero,8008c40 <__alt_data_end+0xfc008c40>
 8008c5c:	88c00015 	stw	r3,0(r17)
 8008c60:	003ff706 	br	8008c40 <__alt_data_end+0xfc008c40>

08008c64 <_calloc_r>:
 8008c64:	298b383a 	mul	r5,r5,r6
 8008c68:	defffe04 	addi	sp,sp,-8
 8008c6c:	dc000015 	stw	r16,0(sp)
 8008c70:	dfc00115 	stw	ra,4(sp)
 8008c74:	80053040 	call	8005304 <_malloc_r>
 8008c78:	1021883a 	mov	r16,r2
 8008c7c:	10002826 	beq	r2,zero,8008d20 <_calloc_r+0xbc>
 8008c80:	11bfff17 	ldw	r6,-4(r2)
 8008c84:	00bfff04 	movi	r2,-4
 8008c88:	00c00904 	movi	r3,36
 8008c8c:	308c703a 	and	r6,r6,r2
 8008c90:	308d883a 	add	r6,r6,r2
 8008c94:	19801436 	bltu	r3,r6,8008ce8 <_calloc_r+0x84>
 8008c98:	008004c4 	movi	r2,19
 8008c9c:	11800936 	bltu	r2,r6,8008cc4 <_calloc_r+0x60>
 8008ca0:	8005883a 	mov	r2,r16
 8008ca4:	10000015 	stw	zero,0(r2)
 8008ca8:	10000115 	stw	zero,4(r2)
 8008cac:	10000215 	stw	zero,8(r2)
 8008cb0:	8005883a 	mov	r2,r16
 8008cb4:	dfc00117 	ldw	ra,4(sp)
 8008cb8:	dc000017 	ldw	r16,0(sp)
 8008cbc:	dec00204 	addi	sp,sp,8
 8008cc0:	f800283a 	ret
 8008cc4:	80000015 	stw	zero,0(r16)
 8008cc8:	80000115 	stw	zero,4(r16)
 8008ccc:	008006c4 	movi	r2,27
 8008cd0:	11800d2e 	bgeu	r2,r6,8008d08 <_calloc_r+0xa4>
 8008cd4:	80000215 	stw	zero,8(r16)
 8008cd8:	80000315 	stw	zero,12(r16)
 8008cdc:	30c00c26 	beq	r6,r3,8008d10 <_calloc_r+0xac>
 8008ce0:	80800404 	addi	r2,r16,16
 8008ce4:	003fef06 	br	8008ca4 <__alt_data_end+0xfc008ca4>
 8008ce8:	8009883a 	mov	r4,r16
 8008cec:	000b883a 	mov	r5,zero
 8008cf0:	8005e280 	call	8005e28 <memset>
 8008cf4:	8005883a 	mov	r2,r16
 8008cf8:	dfc00117 	ldw	ra,4(sp)
 8008cfc:	dc000017 	ldw	r16,0(sp)
 8008d00:	dec00204 	addi	sp,sp,8
 8008d04:	f800283a 	ret
 8008d08:	80800204 	addi	r2,r16,8
 8008d0c:	003fe506 	br	8008ca4 <__alt_data_end+0xfc008ca4>
 8008d10:	80000415 	stw	zero,16(r16)
 8008d14:	80800604 	addi	r2,r16,24
 8008d18:	80000515 	stw	zero,20(r16)
 8008d1c:	003fe106 	br	8008ca4 <__alt_data_end+0xfc008ca4>
 8008d20:	0005883a 	mov	r2,zero
 8008d24:	003fe306 	br	8008cb4 <__alt_data_end+0xfc008cb4>

08008d28 <_fclose_r>:
 8008d28:	28003226 	beq	r5,zero,8008df4 <_fclose_r+0xcc>
 8008d2c:	defffc04 	addi	sp,sp,-16
 8008d30:	dc400115 	stw	r17,4(sp)
 8008d34:	2023883a 	mov	r17,r4
 8008d38:	dc000015 	stw	r16,0(sp)
 8008d3c:	dfc00315 	stw	ra,12(sp)
 8008d40:	dc800215 	stw	r18,8(sp)
 8008d44:	2821883a 	mov	r16,r5
 8008d48:	80046040 	call	8004604 <__sfp_lock_acquire>
 8008d4c:	88000226 	beq	r17,zero,8008d58 <_fclose_r+0x30>
 8008d50:	88800e17 	ldw	r2,56(r17)
 8008d54:	10002926 	beq	r2,zero,8008dfc <_fclose_r+0xd4>
 8008d58:	8080030f 	ldh	r2,12(r16)
 8008d5c:	10002226 	beq	r2,zero,8008de8 <_fclose_r+0xc0>
 8008d60:	8809883a 	mov	r4,r17
 8008d64:	800b883a 	mov	r5,r16
 8008d68:	800404c0 	call	800404c <_fflush_r>
 8008d6c:	1025883a 	mov	r18,r2
 8008d70:	80800b17 	ldw	r2,44(r16)
 8008d74:	10000426 	beq	r2,zero,8008d88 <_fclose_r+0x60>
 8008d78:	81400717 	ldw	r5,28(r16)
 8008d7c:	8809883a 	mov	r4,r17
 8008d80:	103ee83a 	callr	r2
 8008d84:	10002616 	blt	r2,zero,8008e20 <_fclose_r+0xf8>
 8008d88:	8080030b 	ldhu	r2,12(r16)
 8008d8c:	1080200c 	andi	r2,r2,128
 8008d90:	10001f1e 	bne	r2,zero,8008e10 <_fclose_r+0xe8>
 8008d94:	81400c17 	ldw	r5,48(r16)
 8008d98:	28000526 	beq	r5,zero,8008db0 <_fclose_r+0x88>
 8008d9c:	80801004 	addi	r2,r16,64
 8008da0:	28800226 	beq	r5,r2,8008dac <_fclose_r+0x84>
 8008da4:	8809883a 	mov	r4,r17
 8008da8:	80047680 	call	8004768 <_free_r>
 8008dac:	80000c15 	stw	zero,48(r16)
 8008db0:	81401117 	ldw	r5,68(r16)
 8008db4:	28000326 	beq	r5,zero,8008dc4 <_fclose_r+0x9c>
 8008db8:	8809883a 	mov	r4,r17
 8008dbc:	80047680 	call	8004768 <_free_r>
 8008dc0:	80001115 	stw	zero,68(r16)
 8008dc4:	8000030d 	sth	zero,12(r16)
 8008dc8:	80046080 	call	8004608 <__sfp_lock_release>
 8008dcc:	9005883a 	mov	r2,r18
 8008dd0:	dfc00317 	ldw	ra,12(sp)
 8008dd4:	dc800217 	ldw	r18,8(sp)
 8008dd8:	dc400117 	ldw	r17,4(sp)
 8008ddc:	dc000017 	ldw	r16,0(sp)
 8008de0:	dec00404 	addi	sp,sp,16
 8008de4:	f800283a 	ret
 8008de8:	80046080 	call	8004608 <__sfp_lock_release>
 8008dec:	0005883a 	mov	r2,zero
 8008df0:	003ff706 	br	8008dd0 <__alt_data_end+0xfc008dd0>
 8008df4:	0005883a 	mov	r2,zero
 8008df8:	f800283a 	ret
 8008dfc:	8809883a 	mov	r4,r17
 8008e00:	80045f40 	call	80045f4 <__sinit>
 8008e04:	8080030f 	ldh	r2,12(r16)
 8008e08:	103fd51e 	bne	r2,zero,8008d60 <__alt_data_end+0xfc008d60>
 8008e0c:	003ff606 	br	8008de8 <__alt_data_end+0xfc008de8>
 8008e10:	81400417 	ldw	r5,16(r16)
 8008e14:	8809883a 	mov	r4,r17
 8008e18:	80047680 	call	8004768 <_free_r>
 8008e1c:	003fdd06 	br	8008d94 <__alt_data_end+0xfc008d94>
 8008e20:	04bfffc4 	movi	r18,-1
 8008e24:	003fd806 	br	8008d88 <__alt_data_end+0xfc008d88>

08008e28 <fclose>:
 8008e28:	00820074 	movhi	r2,2049
 8008e2c:	10849f04 	addi	r2,r2,4732
 8008e30:	200b883a 	mov	r5,r4
 8008e34:	11000017 	ldw	r4,0(r2)
 8008e38:	8008d281 	jmpi	8008d28 <_fclose_r>

08008e3c <_fputwc_r>:
 8008e3c:	3080030b 	ldhu	r2,12(r6)
 8008e40:	defff804 	addi	sp,sp,-32
 8008e44:	dcc00415 	stw	r19,16(sp)
 8008e48:	dc800315 	stw	r18,12(sp)
 8008e4c:	dc000115 	stw	r16,4(sp)
 8008e50:	dfc00715 	stw	ra,28(sp)
 8008e54:	dd400615 	stw	r21,24(sp)
 8008e58:	dd000515 	stw	r20,20(sp)
 8008e5c:	dc400215 	stw	r17,8(sp)
 8008e60:	10c8000c 	andi	r3,r2,8192
 8008e64:	3021883a 	mov	r16,r6
 8008e68:	2027883a 	mov	r19,r4
 8008e6c:	2825883a 	mov	r18,r5
 8008e70:	1800051e 	bne	r3,zero,8008e88 <_fputwc_r+0x4c>
 8008e74:	30c01917 	ldw	r3,100(r6)
 8008e78:	10880014 	ori	r2,r2,8192
 8008e7c:	3080030d 	sth	r2,12(r6)
 8008e80:	18880014 	ori	r2,r3,8192
 8008e84:	30801915 	stw	r2,100(r6)
 8008e88:	80050f40 	call	80050f4 <__locale_mb_cur_max>
 8008e8c:	00c00044 	movi	r3,1
 8008e90:	10c03e26 	beq	r2,r3,8008f8c <_fputwc_r+0x150>
 8008e94:	9809883a 	mov	r4,r19
 8008e98:	d80b883a 	mov	r5,sp
 8008e9c:	900d883a 	mov	r6,r18
 8008ea0:	81c01704 	addi	r7,r16,92
 8008ea4:	80092ec0 	call	80092ec <_wcrtomb_r>
 8008ea8:	1029883a 	mov	r20,r2
 8008eac:	00bfffc4 	movi	r2,-1
 8008eb0:	a0802026 	beq	r20,r2,8008f34 <_fputwc_r+0xf8>
 8008eb4:	d9400003 	ldbu	r5,0(sp)
 8008eb8:	a0001c26 	beq	r20,zero,8008f2c <_fputwc_r+0xf0>
 8008ebc:	0023883a 	mov	r17,zero
 8008ec0:	05400284 	movi	r21,10
 8008ec4:	00000906 	br	8008eec <_fputwc_r+0xb0>
 8008ec8:	80800017 	ldw	r2,0(r16)
 8008ecc:	11400005 	stb	r5,0(r2)
 8008ed0:	80c00017 	ldw	r3,0(r16)
 8008ed4:	18c00044 	addi	r3,r3,1
 8008ed8:	80c00015 	stw	r3,0(r16)
 8008edc:	8c400044 	addi	r17,r17,1
 8008ee0:	dc45883a 	add	r2,sp,r17
 8008ee4:	8d00112e 	bgeu	r17,r20,8008f2c <_fputwc_r+0xf0>
 8008ee8:	11400003 	ldbu	r5,0(r2)
 8008eec:	80c00217 	ldw	r3,8(r16)
 8008ef0:	18ffffc4 	addi	r3,r3,-1
 8008ef4:	80c00215 	stw	r3,8(r16)
 8008ef8:	183ff30e 	bge	r3,zero,8008ec8 <__alt_data_end+0xfc008ec8>
 8008efc:	80800617 	ldw	r2,24(r16)
 8008f00:	18801916 	blt	r3,r2,8008f68 <_fputwc_r+0x12c>
 8008f04:	80800017 	ldw	r2,0(r16)
 8008f08:	11400005 	stb	r5,0(r2)
 8008f0c:	80800017 	ldw	r2,0(r16)
 8008f10:	10c00003 	ldbu	r3,0(r2)
 8008f14:	10800044 	addi	r2,r2,1
 8008f18:	1d402326 	beq	r3,r21,8008fa8 <_fputwc_r+0x16c>
 8008f1c:	80800015 	stw	r2,0(r16)
 8008f20:	8c400044 	addi	r17,r17,1
 8008f24:	dc45883a 	add	r2,sp,r17
 8008f28:	8d3fef36 	bltu	r17,r20,8008ee8 <__alt_data_end+0xfc008ee8>
 8008f2c:	9005883a 	mov	r2,r18
 8008f30:	00000406 	br	8008f44 <_fputwc_r+0x108>
 8008f34:	80c0030b 	ldhu	r3,12(r16)
 8008f38:	a005883a 	mov	r2,r20
 8008f3c:	18c01014 	ori	r3,r3,64
 8008f40:	80c0030d 	sth	r3,12(r16)
 8008f44:	dfc00717 	ldw	ra,28(sp)
 8008f48:	dd400617 	ldw	r21,24(sp)
 8008f4c:	dd000517 	ldw	r20,20(sp)
 8008f50:	dcc00417 	ldw	r19,16(sp)
 8008f54:	dc800317 	ldw	r18,12(sp)
 8008f58:	dc400217 	ldw	r17,8(sp)
 8008f5c:	dc000117 	ldw	r16,4(sp)
 8008f60:	dec00804 	addi	sp,sp,32
 8008f64:	f800283a 	ret
 8008f68:	9809883a 	mov	r4,r19
 8008f6c:	29403fcc 	andi	r5,r5,255
 8008f70:	800d883a 	mov	r6,r16
 8008f74:	800917c0 	call	800917c <__swbuf_r>
 8008f78:	10bfffe0 	cmpeqi	r2,r2,-1
 8008f7c:	10803fcc 	andi	r2,r2,255
 8008f80:	103fd626 	beq	r2,zero,8008edc <__alt_data_end+0xfc008edc>
 8008f84:	00bfffc4 	movi	r2,-1
 8008f88:	003fee06 	br	8008f44 <__alt_data_end+0xfc008f44>
 8008f8c:	90ffffc4 	addi	r3,r18,-1
 8008f90:	01003f84 	movi	r4,254
 8008f94:	20ffbf36 	bltu	r4,r3,8008e94 <__alt_data_end+0xfc008e94>
 8008f98:	900b883a 	mov	r5,r18
 8008f9c:	dc800005 	stb	r18,0(sp)
 8008fa0:	1029883a 	mov	r20,r2
 8008fa4:	003fc506 	br	8008ebc <__alt_data_end+0xfc008ebc>
 8008fa8:	9809883a 	mov	r4,r19
 8008fac:	a80b883a 	mov	r5,r21
 8008fb0:	800d883a 	mov	r6,r16
 8008fb4:	800917c0 	call	800917c <__swbuf_r>
 8008fb8:	10bfffe0 	cmpeqi	r2,r2,-1
 8008fbc:	003fef06 	br	8008f7c <__alt_data_end+0xfc008f7c>

08008fc0 <fputwc>:
 8008fc0:	defffc04 	addi	sp,sp,-16
 8008fc4:	dc000115 	stw	r16,4(sp)
 8008fc8:	04020074 	movhi	r16,2049
 8008fcc:	84049f04 	addi	r16,r16,4732
 8008fd0:	dc400215 	stw	r17,8(sp)
 8008fd4:	2023883a 	mov	r17,r4
 8008fd8:	81000017 	ldw	r4,0(r16)
 8008fdc:	dfc00315 	stw	ra,12(sp)
 8008fe0:	280d883a 	mov	r6,r5
 8008fe4:	20000626 	beq	r4,zero,8009000 <fputwc+0x40>
 8008fe8:	20800e17 	ldw	r2,56(r4)
 8008fec:	1000041e 	bne	r2,zero,8009000 <fputwc+0x40>
 8008ff0:	d9400015 	stw	r5,0(sp)
 8008ff4:	80045f40 	call	80045f4 <__sinit>
 8008ff8:	81000017 	ldw	r4,0(r16)
 8008ffc:	d9800017 	ldw	r6,0(sp)
 8009000:	880b883a 	mov	r5,r17
 8009004:	dfc00317 	ldw	ra,12(sp)
 8009008:	dc400217 	ldw	r17,8(sp)
 800900c:	dc000117 	ldw	r16,4(sp)
 8009010:	dec00404 	addi	sp,sp,16
 8009014:	8008e3c1 	jmpi	8008e3c <_fputwc_r>

08009018 <_fstat_r>:
 8009018:	defffd04 	addi	sp,sp,-12
 800901c:	dc000015 	stw	r16,0(sp)
 8009020:	04020074 	movhi	r16,2049
 8009024:	dc400115 	stw	r17,4(sp)
 8009028:	840b7a04 	addi	r16,r16,11752
 800902c:	2023883a 	mov	r17,r4
 8009030:	2809883a 	mov	r4,r5
 8009034:	300b883a 	mov	r5,r6
 8009038:	dfc00215 	stw	ra,8(sp)
 800903c:	80000015 	stw	zero,0(r16)
 8009040:	800c9040 	call	800c904 <fstat>
 8009044:	00ffffc4 	movi	r3,-1
 8009048:	10c00526 	beq	r2,r3,8009060 <_fstat_r+0x48>
 800904c:	dfc00217 	ldw	ra,8(sp)
 8009050:	dc400117 	ldw	r17,4(sp)
 8009054:	dc000017 	ldw	r16,0(sp)
 8009058:	dec00304 	addi	sp,sp,12
 800905c:	f800283a 	ret
 8009060:	80c00017 	ldw	r3,0(r16)
 8009064:	183ff926 	beq	r3,zero,800904c <__alt_data_end+0xfc00904c>
 8009068:	88c00015 	stw	r3,0(r17)
 800906c:	003ff706 	br	800904c <__alt_data_end+0xfc00904c>

08009070 <_isatty_r>:
 8009070:	defffd04 	addi	sp,sp,-12
 8009074:	dc000015 	stw	r16,0(sp)
 8009078:	04020074 	movhi	r16,2049
 800907c:	dc400115 	stw	r17,4(sp)
 8009080:	840b7a04 	addi	r16,r16,11752
 8009084:	2023883a 	mov	r17,r4
 8009088:	2809883a 	mov	r4,r5
 800908c:	dfc00215 	stw	ra,8(sp)
 8009090:	80000015 	stw	zero,0(r16)
 8009094:	800ca040 	call	800ca04 <isatty>
 8009098:	00ffffc4 	movi	r3,-1
 800909c:	10c00526 	beq	r2,r3,80090b4 <_isatty_r+0x44>
 80090a0:	dfc00217 	ldw	ra,8(sp)
 80090a4:	dc400117 	ldw	r17,4(sp)
 80090a8:	dc000017 	ldw	r16,0(sp)
 80090ac:	dec00304 	addi	sp,sp,12
 80090b0:	f800283a 	ret
 80090b4:	80c00017 	ldw	r3,0(r16)
 80090b8:	183ff926 	beq	r3,zero,80090a0 <__alt_data_end+0xfc0090a0>
 80090bc:	88c00015 	stw	r3,0(r17)
 80090c0:	003ff706 	br	80090a0 <__alt_data_end+0xfc0090a0>

080090c4 <_lseek_r>:
 80090c4:	defffd04 	addi	sp,sp,-12
 80090c8:	dc000015 	stw	r16,0(sp)
 80090cc:	04020074 	movhi	r16,2049
 80090d0:	dc400115 	stw	r17,4(sp)
 80090d4:	840b7a04 	addi	r16,r16,11752
 80090d8:	2023883a 	mov	r17,r4
 80090dc:	2809883a 	mov	r4,r5
 80090e0:	300b883a 	mov	r5,r6
 80090e4:	380d883a 	mov	r6,r7
 80090e8:	dfc00215 	stw	ra,8(sp)
 80090ec:	80000015 	stw	zero,0(r16)
 80090f0:	800cbdc0 	call	800cbdc <lseek>
 80090f4:	00ffffc4 	movi	r3,-1
 80090f8:	10c00526 	beq	r2,r3,8009110 <_lseek_r+0x4c>
 80090fc:	dfc00217 	ldw	ra,8(sp)
 8009100:	dc400117 	ldw	r17,4(sp)
 8009104:	dc000017 	ldw	r16,0(sp)
 8009108:	dec00304 	addi	sp,sp,12
 800910c:	f800283a 	ret
 8009110:	80c00017 	ldw	r3,0(r16)
 8009114:	183ff926 	beq	r3,zero,80090fc <__alt_data_end+0xfc0090fc>
 8009118:	88c00015 	stw	r3,0(r17)
 800911c:	003ff706 	br	80090fc <__alt_data_end+0xfc0090fc>

08009120 <_read_r>:
 8009120:	defffd04 	addi	sp,sp,-12
 8009124:	dc000015 	stw	r16,0(sp)
 8009128:	04020074 	movhi	r16,2049
 800912c:	dc400115 	stw	r17,4(sp)
 8009130:	840b7a04 	addi	r16,r16,11752
 8009134:	2023883a 	mov	r17,r4
 8009138:	2809883a 	mov	r4,r5
 800913c:	300b883a 	mov	r5,r6
 8009140:	380d883a 	mov	r6,r7
 8009144:	dfc00215 	stw	ra,8(sp)
 8009148:	80000015 	stw	zero,0(r16)
 800914c:	800cdb80 	call	800cdb8 <read>
 8009150:	00ffffc4 	movi	r3,-1
 8009154:	10c00526 	beq	r2,r3,800916c <_read_r+0x4c>
 8009158:	dfc00217 	ldw	ra,8(sp)
 800915c:	dc400117 	ldw	r17,4(sp)
 8009160:	dc000017 	ldw	r16,0(sp)
 8009164:	dec00304 	addi	sp,sp,12
 8009168:	f800283a 	ret
 800916c:	80c00017 	ldw	r3,0(r16)
 8009170:	183ff926 	beq	r3,zero,8009158 <__alt_data_end+0xfc009158>
 8009174:	88c00015 	stw	r3,0(r17)
 8009178:	003ff706 	br	8009158 <__alt_data_end+0xfc009158>

0800917c <__swbuf_r>:
 800917c:	defffc04 	addi	sp,sp,-16
 8009180:	dc800215 	stw	r18,8(sp)
 8009184:	dc400115 	stw	r17,4(sp)
 8009188:	dc000015 	stw	r16,0(sp)
 800918c:	dfc00315 	stw	ra,12(sp)
 8009190:	2025883a 	mov	r18,r4
 8009194:	2823883a 	mov	r17,r5
 8009198:	3021883a 	mov	r16,r6
 800919c:	20000226 	beq	r4,zero,80091a8 <__swbuf_r+0x2c>
 80091a0:	20800e17 	ldw	r2,56(r4)
 80091a4:	10004126 	beq	r2,zero,80092ac <__swbuf_r+0x130>
 80091a8:	80c00617 	ldw	r3,24(r16)
 80091ac:	8180030b 	ldhu	r6,12(r16)
 80091b0:	80c00215 	stw	r3,8(r16)
 80091b4:	30c0020c 	andi	r3,r6,8
 80091b8:	18003526 	beq	r3,zero,8009290 <__swbuf_r+0x114>
 80091bc:	80c00417 	ldw	r3,16(r16)
 80091c0:	18003326 	beq	r3,zero,8009290 <__swbuf_r+0x114>
 80091c4:	3088000c 	andi	r2,r6,8192
 80091c8:	8c403fcc 	andi	r17,r17,255
 80091cc:	10001726 	beq	r2,zero,800922c <__swbuf_r+0xb0>
 80091d0:	80800017 	ldw	r2,0(r16)
 80091d4:	81000517 	ldw	r4,20(r16)
 80091d8:	10c7c83a 	sub	r3,r2,r3
 80091dc:	19001d0e 	bge	r3,r4,8009254 <__swbuf_r+0xd8>
 80091e0:	18c00044 	addi	r3,r3,1
 80091e4:	81400217 	ldw	r5,8(r16)
 80091e8:	11000044 	addi	r4,r2,1
 80091ec:	81000015 	stw	r4,0(r16)
 80091f0:	297fffc4 	addi	r5,r5,-1
 80091f4:	81400215 	stw	r5,8(r16)
 80091f8:	14400005 	stb	r17,0(r2)
 80091fc:	80800517 	ldw	r2,20(r16)
 8009200:	10c01d26 	beq	r2,r3,8009278 <__swbuf_r+0xfc>
 8009204:	8080030b 	ldhu	r2,12(r16)
 8009208:	1080004c 	andi	r2,r2,1
 800920c:	1000181e 	bne	r2,zero,8009270 <__swbuf_r+0xf4>
 8009210:	8805883a 	mov	r2,r17
 8009214:	dfc00317 	ldw	ra,12(sp)
 8009218:	dc800217 	ldw	r18,8(sp)
 800921c:	dc400117 	ldw	r17,4(sp)
 8009220:	dc000017 	ldw	r16,0(sp)
 8009224:	dec00404 	addi	sp,sp,16
 8009228:	f800283a 	ret
 800922c:	81001917 	ldw	r4,100(r16)
 8009230:	00b7ffc4 	movi	r2,-8193
 8009234:	31880014 	ori	r6,r6,8192
 8009238:	2084703a 	and	r2,r4,r2
 800923c:	80801915 	stw	r2,100(r16)
 8009240:	80800017 	ldw	r2,0(r16)
 8009244:	81000517 	ldw	r4,20(r16)
 8009248:	8180030d 	sth	r6,12(r16)
 800924c:	10c7c83a 	sub	r3,r2,r3
 8009250:	193fe316 	blt	r3,r4,80091e0 <__alt_data_end+0xfc0091e0>
 8009254:	9009883a 	mov	r4,r18
 8009258:	800b883a 	mov	r5,r16
 800925c:	800404c0 	call	800404c <_fflush_r>
 8009260:	1000091e 	bne	r2,zero,8009288 <__swbuf_r+0x10c>
 8009264:	80800017 	ldw	r2,0(r16)
 8009268:	00c00044 	movi	r3,1
 800926c:	003fdd06 	br	80091e4 <__alt_data_end+0xfc0091e4>
 8009270:	00800284 	movi	r2,10
 8009274:	88bfe61e 	bne	r17,r2,8009210 <__alt_data_end+0xfc009210>
 8009278:	9009883a 	mov	r4,r18
 800927c:	800b883a 	mov	r5,r16
 8009280:	800404c0 	call	800404c <_fflush_r>
 8009284:	103fe226 	beq	r2,zero,8009210 <__alt_data_end+0xfc009210>
 8009288:	00bfffc4 	movi	r2,-1
 800928c:	003fe106 	br	8009214 <__alt_data_end+0xfc009214>
 8009290:	9009883a 	mov	r4,r18
 8009294:	800b883a 	mov	r5,r16
 8009298:	80025f40 	call	80025f4 <__swsetup_r>
 800929c:	1000051e 	bne	r2,zero,80092b4 <__swbuf_r+0x138>
 80092a0:	8180030b 	ldhu	r6,12(r16)
 80092a4:	80c00417 	ldw	r3,16(r16)
 80092a8:	003fc606 	br	80091c4 <__alt_data_end+0xfc0091c4>
 80092ac:	80045f40 	call	80045f4 <__sinit>
 80092b0:	003fbd06 	br	80091a8 <__alt_data_end+0xfc0091a8>
 80092b4:	80c0030b 	ldhu	r3,12(r16)
 80092b8:	00bfffc4 	movi	r2,-1
 80092bc:	18c01014 	ori	r3,r3,64
 80092c0:	80c0030d 	sth	r3,12(r16)
 80092c4:	00c00244 	movi	r3,9
 80092c8:	90c00015 	stw	r3,0(r18)
 80092cc:	003fd106 	br	8009214 <__alt_data_end+0xfc009214>

080092d0 <__swbuf>:
 80092d0:	00c20074 	movhi	r3,2049
 80092d4:	18c49f04 	addi	r3,r3,4732
 80092d8:	2005883a 	mov	r2,r4
 80092dc:	19000017 	ldw	r4,0(r3)
 80092e0:	280d883a 	mov	r6,r5
 80092e4:	100b883a 	mov	r5,r2
 80092e8:	800917c1 	jmpi	800917c <__swbuf_r>

080092ec <_wcrtomb_r>:
 80092ec:	defff604 	addi	sp,sp,-40
 80092f0:	00820074 	movhi	r2,2049
 80092f4:	dc800815 	stw	r18,32(sp)
 80092f8:	dc400715 	stw	r17,28(sp)
 80092fc:	dc000615 	stw	r16,24(sp)
 8009300:	1084a304 	addi	r2,r2,4748
 8009304:	dfc00915 	stw	ra,36(sp)
 8009308:	2021883a 	mov	r16,r4
 800930c:	3823883a 	mov	r17,r7
 8009310:	14800017 	ldw	r18,0(r2)
 8009314:	28001426 	beq	r5,zero,8009368 <_wcrtomb_r+0x7c>
 8009318:	d9400415 	stw	r5,16(sp)
 800931c:	d9800515 	stw	r6,20(sp)
 8009320:	80050e80 	call	80050e8 <__locale_charset>
 8009324:	d9400417 	ldw	r5,16(sp)
 8009328:	d9800517 	ldw	r6,20(sp)
 800932c:	8009883a 	mov	r4,r16
 8009330:	dc400015 	stw	r17,0(sp)
 8009334:	100f883a 	mov	r7,r2
 8009338:	903ee83a 	callr	r18
 800933c:	00ffffc4 	movi	r3,-1
 8009340:	10c0031e 	bne	r2,r3,8009350 <_wcrtomb_r+0x64>
 8009344:	88000015 	stw	zero,0(r17)
 8009348:	00c02284 	movi	r3,138
 800934c:	80c00015 	stw	r3,0(r16)
 8009350:	dfc00917 	ldw	ra,36(sp)
 8009354:	dc800817 	ldw	r18,32(sp)
 8009358:	dc400717 	ldw	r17,28(sp)
 800935c:	dc000617 	ldw	r16,24(sp)
 8009360:	dec00a04 	addi	sp,sp,40
 8009364:	f800283a 	ret
 8009368:	80050e80 	call	80050e8 <__locale_charset>
 800936c:	8009883a 	mov	r4,r16
 8009370:	dc400015 	stw	r17,0(sp)
 8009374:	d9400104 	addi	r5,sp,4
 8009378:	000d883a 	mov	r6,zero
 800937c:	100f883a 	mov	r7,r2
 8009380:	903ee83a 	callr	r18
 8009384:	003fed06 	br	800933c <__alt_data_end+0xfc00933c>

08009388 <wcrtomb>:
 8009388:	defff504 	addi	sp,sp,-44
 800938c:	dc400515 	stw	r17,20(sp)
 8009390:	dc000415 	stw	r16,16(sp)
 8009394:	dfc00a15 	stw	ra,40(sp)
 8009398:	dd400915 	stw	r21,36(sp)
 800939c:	dd000815 	stw	r20,32(sp)
 80093a0:	dcc00715 	stw	r19,28(sp)
 80093a4:	dc800615 	stw	r18,24(sp)
 80093a8:	2021883a 	mov	r16,r4
 80093ac:	3023883a 	mov	r17,r6
 80093b0:	20001d26 	beq	r4,zero,8009428 <wcrtomb+0xa0>
 80093b4:	04820074 	movhi	r18,2049
 80093b8:	94849f04 	addi	r18,r18,4732
 80093bc:	00820074 	movhi	r2,2049
 80093c0:	95400017 	ldw	r21,0(r18)
 80093c4:	1084a304 	addi	r2,r2,4748
 80093c8:	15000017 	ldw	r20,0(r2)
 80093cc:	2827883a 	mov	r19,r5
 80093d0:	80050e80 	call	80050e8 <__locale_charset>
 80093d4:	a809883a 	mov	r4,r21
 80093d8:	dc400015 	stw	r17,0(sp)
 80093dc:	800b883a 	mov	r5,r16
 80093e0:	980d883a 	mov	r6,r19
 80093e4:	100f883a 	mov	r7,r2
 80093e8:	a03ee83a 	callr	r20
 80093ec:	00ffffc4 	movi	r3,-1
 80093f0:	10c0041e 	bne	r2,r3,8009404 <wcrtomb+0x7c>
 80093f4:	90c00017 	ldw	r3,0(r18)
 80093f8:	01002284 	movi	r4,138
 80093fc:	88000015 	stw	zero,0(r17)
 8009400:	19000015 	stw	r4,0(r3)
 8009404:	dfc00a17 	ldw	ra,40(sp)
 8009408:	dd400917 	ldw	r21,36(sp)
 800940c:	dd000817 	ldw	r20,32(sp)
 8009410:	dcc00717 	ldw	r19,28(sp)
 8009414:	dc800617 	ldw	r18,24(sp)
 8009418:	dc400517 	ldw	r17,20(sp)
 800941c:	dc000417 	ldw	r16,16(sp)
 8009420:	dec00b04 	addi	sp,sp,44
 8009424:	f800283a 	ret
 8009428:	04820074 	movhi	r18,2049
 800942c:	94849f04 	addi	r18,r18,4732
 8009430:	00820074 	movhi	r2,2049
 8009434:	94c00017 	ldw	r19,0(r18)
 8009438:	1084a304 	addi	r2,r2,4748
 800943c:	14000017 	ldw	r16,0(r2)
 8009440:	80050e80 	call	80050e8 <__locale_charset>
 8009444:	9809883a 	mov	r4,r19
 8009448:	dc400015 	stw	r17,0(sp)
 800944c:	d9400104 	addi	r5,sp,4
 8009450:	000d883a 	mov	r6,zero
 8009454:	100f883a 	mov	r7,r2
 8009458:	803ee83a 	callr	r16
 800945c:	003fe306 	br	80093ec <__alt_data_end+0xfc0093ec>

08009460 <__ascii_wctomb>:
 8009460:	28000526 	beq	r5,zero,8009478 <__ascii_wctomb+0x18>
 8009464:	00803fc4 	movi	r2,255
 8009468:	11800536 	bltu	r2,r6,8009480 <__ascii_wctomb+0x20>
 800946c:	29800005 	stb	r6,0(r5)
 8009470:	00800044 	movi	r2,1
 8009474:	f800283a 	ret
 8009478:	0005883a 	mov	r2,zero
 800947c:	f800283a 	ret
 8009480:	00802284 	movi	r2,138
 8009484:	20800015 	stw	r2,0(r4)
 8009488:	00bfffc4 	movi	r2,-1
 800948c:	f800283a 	ret

08009490 <_wctomb_r>:
 8009490:	00820074 	movhi	r2,2049
 8009494:	defff904 	addi	sp,sp,-28
 8009498:	1084a304 	addi	r2,r2,4748
 800949c:	dfc00615 	stw	ra,24(sp)
 80094a0:	dc400515 	stw	r17,20(sp)
 80094a4:	dc000415 	stw	r16,16(sp)
 80094a8:	3823883a 	mov	r17,r7
 80094ac:	14000017 	ldw	r16,0(r2)
 80094b0:	d9000115 	stw	r4,4(sp)
 80094b4:	d9400215 	stw	r5,8(sp)
 80094b8:	d9800315 	stw	r6,12(sp)
 80094bc:	80050e80 	call	80050e8 <__locale_charset>
 80094c0:	d9000117 	ldw	r4,4(sp)
 80094c4:	d9400217 	ldw	r5,8(sp)
 80094c8:	d9800317 	ldw	r6,12(sp)
 80094cc:	dc400015 	stw	r17,0(sp)
 80094d0:	100f883a 	mov	r7,r2
 80094d4:	803ee83a 	callr	r16
 80094d8:	dfc00617 	ldw	ra,24(sp)
 80094dc:	dc400517 	ldw	r17,20(sp)
 80094e0:	dc000417 	ldw	r16,16(sp)
 80094e4:	dec00704 	addi	sp,sp,28
 80094e8:	f800283a 	ret

080094ec <__udivdi3>:
 80094ec:	defff504 	addi	sp,sp,-44
 80094f0:	dcc00415 	stw	r19,16(sp)
 80094f4:	dc000115 	stw	r16,4(sp)
 80094f8:	dfc00a15 	stw	ra,40(sp)
 80094fc:	df000915 	stw	fp,36(sp)
 8009500:	ddc00815 	stw	r23,32(sp)
 8009504:	dd800715 	stw	r22,28(sp)
 8009508:	dd400615 	stw	r21,24(sp)
 800950c:	dd000515 	stw	r20,20(sp)
 8009510:	dc800315 	stw	r18,12(sp)
 8009514:	dc400215 	stw	r17,8(sp)
 8009518:	2027883a 	mov	r19,r4
 800951c:	2821883a 	mov	r16,r5
 8009520:	3800421e 	bne	r7,zero,800962c <__udivdi3+0x140>
 8009524:	3025883a 	mov	r18,r6
 8009528:	2023883a 	mov	r17,r4
 800952c:	2980542e 	bgeu	r5,r6,8009680 <__udivdi3+0x194>
 8009530:	00bfffd4 	movui	r2,65535
 8009534:	282d883a 	mov	r22,r5
 8009538:	1180a836 	bltu	r2,r6,80097dc <__udivdi3+0x2f0>
 800953c:	00803fc4 	movi	r2,255
 8009540:	1181422e 	bgeu	r2,r6,8009a4c <__udivdi3+0x560>
 8009544:	00800204 	movi	r2,8
 8009548:	1007883a 	mov	r3,r2
 800954c:	3084d83a 	srl	r2,r6,r2
 8009550:	01020074 	movhi	r4,2049
 8009554:	213d9504 	addi	r4,r4,-2476
 8009558:	2085883a 	add	r2,r4,r2
 800955c:	10800003 	ldbu	r2,0(r2)
 8009560:	10c7883a 	add	r3,r2,r3
 8009564:	00800804 	movi	r2,32
 8009568:	10c5c83a 	sub	r2,r2,r3
 800956c:	10000526 	beq	r2,zero,8009584 <__udivdi3+0x98>
 8009570:	80a0983a 	sll	r16,r16,r2
 8009574:	98c6d83a 	srl	r3,r19,r3
 8009578:	30a4983a 	sll	r18,r6,r2
 800957c:	98a2983a 	sll	r17,r19,r2
 8009580:	80ecb03a 	or	r22,r16,r3
 8009584:	902ad43a 	srli	r21,r18,16
 8009588:	b009883a 	mov	r4,r22
 800958c:	953fffcc 	andi	r20,r18,65535
 8009590:	a80b883a 	mov	r5,r21
 8009594:	800a1600 	call	800a160 <__umodsi3>
 8009598:	b009883a 	mov	r4,r22
 800959c:	a80b883a 	mov	r5,r21
 80095a0:	1027883a 	mov	r19,r2
 80095a4:	800a1580 	call	800a158 <__udivsi3>
 80095a8:	1021883a 	mov	r16,r2
 80095ac:	8806d43a 	srli	r3,r17,16
 80095b0:	9804943a 	slli	r2,r19,16
 80095b4:	8527383a 	mul	r19,r16,r20
 80095b8:	10c4b03a 	or	r2,r2,r3
 80095bc:	14c0052e 	bgeu	r2,r19,80095d4 <__udivdi3+0xe8>
 80095c0:	1485883a 	add	r2,r2,r18
 80095c4:	80ffffc4 	addi	r3,r16,-1
 80095c8:	14800136 	bltu	r2,r18,80095d0 <__udivdi3+0xe4>
 80095cc:	14c13436 	bltu	r2,r19,8009aa0 <__udivdi3+0x5b4>
 80095d0:	1821883a 	mov	r16,r3
 80095d4:	14e7c83a 	sub	r19,r2,r19
 80095d8:	9809883a 	mov	r4,r19
 80095dc:	a80b883a 	mov	r5,r21
 80095e0:	800a1600 	call	800a160 <__umodsi3>
 80095e4:	102d883a 	mov	r22,r2
 80095e8:	9809883a 	mov	r4,r19
 80095ec:	a80b883a 	mov	r5,r21
 80095f0:	800a1580 	call	800a158 <__udivsi3>
 80095f4:	b02c943a 	slli	r22,r22,16
 80095f8:	1529383a 	mul	r20,r2,r20
 80095fc:	8c7fffcc 	andi	r17,r17,65535
 8009600:	b462b03a 	or	r17,r22,r17
 8009604:	8d00052e 	bgeu	r17,r20,800961c <__udivdi3+0x130>
 8009608:	8ca3883a 	add	r17,r17,r18
 800960c:	10ffffc4 	addi	r3,r2,-1
 8009610:	8c80f636 	bltu	r17,r18,80099ec <__udivdi3+0x500>
 8009614:	8d00f52e 	bgeu	r17,r20,80099ec <__udivdi3+0x500>
 8009618:	10bfff84 	addi	r2,r2,-2
 800961c:	8020943a 	slli	r16,r16,16
 8009620:	0007883a 	mov	r3,zero
 8009624:	1404b03a 	or	r2,r2,r16
 8009628:	00005b06 	br	8009798 <__udivdi3+0x2ac>
 800962c:	29c05836 	bltu	r5,r7,8009790 <__udivdi3+0x2a4>
 8009630:	00bfffd4 	movui	r2,65535
 8009634:	11c0642e 	bgeu	r2,r7,80097c8 <__udivdi3+0x2dc>
 8009638:	00804034 	movhi	r2,256
 800963c:	10bfffc4 	addi	r2,r2,-1
 8009640:	11c0f32e 	bgeu	r2,r7,8009a10 <__udivdi3+0x524>
 8009644:	00c00604 	movi	r3,24
 8009648:	180b883a 	mov	r5,r3
 800964c:	38c6d83a 	srl	r3,r7,r3
 8009650:	00820074 	movhi	r2,2049
 8009654:	10bd9504 	addi	r2,r2,-2476
 8009658:	10c7883a 	add	r3,r2,r3
 800965c:	18c00003 	ldbu	r3,0(r3)
 8009660:	01000804 	movi	r4,32
 8009664:	1947883a 	add	r3,r3,r5
 8009668:	20e5c83a 	sub	r18,r4,r3
 800966c:	9000661e 	bne	r18,zero,8009808 <__udivdi3+0x31c>
 8009670:	3c00f936 	bltu	r7,r16,8009a58 <__udivdi3+0x56c>
 8009674:	9985403a 	cmpgeu	r2,r19,r6
 8009678:	0007883a 	mov	r3,zero
 800967c:	00004606 	br	8009798 <__udivdi3+0x2ac>
 8009680:	3000041e 	bne	r6,zero,8009694 <__udivdi3+0x1a8>
 8009684:	01000044 	movi	r4,1
 8009688:	000b883a 	mov	r5,zero
 800968c:	800a1580 	call	800a158 <__udivsi3>
 8009690:	1025883a 	mov	r18,r2
 8009694:	00bfffd4 	movui	r2,65535
 8009698:	1480562e 	bgeu	r2,r18,80097f4 <__udivdi3+0x308>
 800969c:	00804034 	movhi	r2,256
 80096a0:	10bfffc4 	addi	r2,r2,-1
 80096a4:	1480e32e 	bgeu	r2,r18,8009a34 <__udivdi3+0x548>
 80096a8:	00800604 	movi	r2,24
 80096ac:	1007883a 	mov	r3,r2
 80096b0:	9084d83a 	srl	r2,r18,r2
 80096b4:	01020074 	movhi	r4,2049
 80096b8:	213d9504 	addi	r4,r4,-2476
 80096bc:	2085883a 	add	r2,r4,r2
 80096c0:	10800003 	ldbu	r2,0(r2)
 80096c4:	10c5883a 	add	r2,r2,r3
 80096c8:	00c00804 	movi	r3,32
 80096cc:	1887c83a 	sub	r3,r3,r2
 80096d0:	1800911e 	bne	r3,zero,8009918 <__udivdi3+0x42c>
 80096d4:	9028d43a 	srli	r20,r18,16
 80096d8:	84a1c83a 	sub	r16,r16,r18
 80096dc:	957fffcc 	andi	r21,r18,65535
 80096e0:	00c00044 	movi	r3,1
 80096e4:	8009883a 	mov	r4,r16
 80096e8:	a00b883a 	mov	r5,r20
 80096ec:	d8c00015 	stw	r3,0(sp)
 80096f0:	800a1600 	call	800a160 <__umodsi3>
 80096f4:	8009883a 	mov	r4,r16
 80096f8:	a00b883a 	mov	r5,r20
 80096fc:	1027883a 	mov	r19,r2
 8009700:	800a1580 	call	800a158 <__udivsi3>
 8009704:	1021883a 	mov	r16,r2
 8009708:	880cd43a 	srli	r6,r17,16
 800970c:	9804943a 	slli	r2,r19,16
 8009710:	8567383a 	mul	r19,r16,r21
 8009714:	d8c00017 	ldw	r3,0(sp)
 8009718:	1188b03a 	or	r4,r2,r6
 800971c:	24c0052e 	bgeu	r4,r19,8009734 <__udivdi3+0x248>
 8009720:	2489883a 	add	r4,r4,r18
 8009724:	80bfffc4 	addi	r2,r16,-1
 8009728:	24800136 	bltu	r4,r18,8009730 <__udivdi3+0x244>
 800972c:	24c0d936 	bltu	r4,r19,8009a94 <__udivdi3+0x5a8>
 8009730:	1021883a 	mov	r16,r2
 8009734:	24e7c83a 	sub	r19,r4,r19
 8009738:	9809883a 	mov	r4,r19
 800973c:	a00b883a 	mov	r5,r20
 8009740:	d8c00015 	stw	r3,0(sp)
 8009744:	800a1600 	call	800a160 <__umodsi3>
 8009748:	102d883a 	mov	r22,r2
 800974c:	9809883a 	mov	r4,r19
 8009750:	a00b883a 	mov	r5,r20
 8009754:	800a1580 	call	800a158 <__udivsi3>
 8009758:	b02c943a 	slli	r22,r22,16
 800975c:	156b383a 	mul	r21,r2,r21
 8009760:	8c7fffcc 	andi	r17,r17,65535
 8009764:	b462b03a 	or	r17,r22,r17
 8009768:	d8c00017 	ldw	r3,0(sp)
 800976c:	8d40052e 	bgeu	r17,r21,8009784 <__udivdi3+0x298>
 8009770:	8ca3883a 	add	r17,r17,r18
 8009774:	113fffc4 	addi	r4,r2,-1
 8009778:	8c809a36 	bltu	r17,r18,80099e4 <__udivdi3+0x4f8>
 800977c:	8d40992e 	bgeu	r17,r21,80099e4 <__udivdi3+0x4f8>
 8009780:	10bfff84 	addi	r2,r2,-2
 8009784:	8020943a 	slli	r16,r16,16
 8009788:	1404b03a 	or	r2,r2,r16
 800978c:	00000206 	br	8009798 <__udivdi3+0x2ac>
 8009790:	0007883a 	mov	r3,zero
 8009794:	0005883a 	mov	r2,zero
 8009798:	dfc00a17 	ldw	ra,40(sp)
 800979c:	df000917 	ldw	fp,36(sp)
 80097a0:	ddc00817 	ldw	r23,32(sp)
 80097a4:	dd800717 	ldw	r22,28(sp)
 80097a8:	dd400617 	ldw	r21,24(sp)
 80097ac:	dd000517 	ldw	r20,20(sp)
 80097b0:	dcc00417 	ldw	r19,16(sp)
 80097b4:	dc800317 	ldw	r18,12(sp)
 80097b8:	dc400217 	ldw	r17,8(sp)
 80097bc:	dc000117 	ldw	r16,4(sp)
 80097c0:	dec00b04 	addi	sp,sp,44
 80097c4:	f800283a 	ret
 80097c8:	00803fc4 	movi	r2,255
 80097cc:	11c0932e 	bgeu	r2,r7,8009a1c <__udivdi3+0x530>
 80097d0:	00c00204 	movi	r3,8
 80097d4:	180b883a 	mov	r5,r3
 80097d8:	003f9c06 	br	800964c <__alt_data_end+0xfc00964c>
 80097dc:	00804034 	movhi	r2,256
 80097e0:	10bfffc4 	addi	r2,r2,-1
 80097e4:	1180902e 	bgeu	r2,r6,8009a28 <__udivdi3+0x53c>
 80097e8:	00800604 	movi	r2,24
 80097ec:	1007883a 	mov	r3,r2
 80097f0:	003f5606 	br	800954c <__alt_data_end+0xfc00954c>
 80097f4:	00803fc4 	movi	r2,255
 80097f8:	1480912e 	bgeu	r2,r18,8009a40 <__udivdi3+0x554>
 80097fc:	00800204 	movi	r2,8
 8009800:	1007883a 	mov	r3,r2
 8009804:	003faa06 	br	80096b0 <__alt_data_end+0xfc0096b0>
 8009808:	30eed83a 	srl	r23,r6,r3
 800980c:	3c8e983a 	sll	r7,r7,r18
 8009810:	80f8d83a 	srl	fp,r16,r3
 8009814:	98c6d83a 	srl	r3,r19,r3
 8009818:	3deeb03a 	or	r23,r7,r23
 800981c:	b828d43a 	srli	r20,r23,16
 8009820:	84a0983a 	sll	r16,r16,r18
 8009824:	e009883a 	mov	r4,fp
 8009828:	a00b883a 	mov	r5,r20
 800982c:	80e2b03a 	or	r17,r16,r3
 8009830:	34aa983a 	sll	r21,r6,r18
 8009834:	800a1600 	call	800a160 <__umodsi3>
 8009838:	e009883a 	mov	r4,fp
 800983c:	a00b883a 	mov	r5,r20
 8009840:	102d883a 	mov	r22,r2
 8009844:	800a1580 	call	800a158 <__udivsi3>
 8009848:	1021883a 	mov	r16,r2
 800984c:	bf3fffcc 	andi	fp,r23,65535
 8009850:	b004943a 	slli	r2,r22,16
 8009854:	8808d43a 	srli	r4,r17,16
 8009858:	872d383a 	mul	r22,r16,fp
 800985c:	1104b03a 	or	r2,r2,r4
 8009860:	1580042e 	bgeu	r2,r22,8009874 <__udivdi3+0x388>
 8009864:	15c5883a 	add	r2,r2,r23
 8009868:	80ffffc4 	addi	r3,r16,-1
 800986c:	15c0812e 	bgeu	r2,r23,8009a74 <__udivdi3+0x588>
 8009870:	1821883a 	mov	r16,r3
 8009874:	15adc83a 	sub	r22,r2,r22
 8009878:	b009883a 	mov	r4,r22
 800987c:	a00b883a 	mov	r5,r20
 8009880:	800a1600 	call	800a160 <__umodsi3>
 8009884:	a00b883a 	mov	r5,r20
 8009888:	b009883a 	mov	r4,r22
 800988c:	d8800015 	stw	r2,0(sp)
 8009890:	800a1580 	call	800a158 <__udivsi3>
 8009894:	d8c00017 	ldw	r3,0(sp)
 8009898:	170b383a 	mul	r5,r2,fp
 800989c:	8c7fffcc 	andi	r17,r17,65535
 80098a0:	1806943a 	slli	r3,r3,16
 80098a4:	1c46b03a 	or	r3,r3,r17
 80098a8:	1940042e 	bgeu	r3,r5,80098bc <__udivdi3+0x3d0>
 80098ac:	1dc7883a 	add	r3,r3,r23
 80098b0:	113fffc4 	addi	r4,r2,-1
 80098b4:	1dc06b2e 	bgeu	r3,r23,8009a64 <__udivdi3+0x578>
 80098b8:	2005883a 	mov	r2,r4
 80098bc:	8020943a 	slli	r16,r16,16
 80098c0:	a9ffffcc 	andi	r7,r21,65535
 80098c4:	a82ad43a 	srli	r21,r21,16
 80098c8:	1404b03a 	or	r2,r2,r16
 80098cc:	113fffcc 	andi	r4,r2,65535
 80098d0:	100cd43a 	srli	r6,r2,16
 80098d4:	21d3383a 	mul	r9,r4,r7
 80098d8:	2549383a 	mul	r4,r4,r21
 80098dc:	31cf383a 	mul	r7,r6,r7
 80098e0:	4810d43a 	srli	r8,r9,16
 80098e4:	1947c83a 	sub	r3,r3,r5
 80098e8:	3909883a 	add	r4,r7,r4
 80098ec:	2209883a 	add	r4,r4,r8
 80098f0:	354d383a 	mul	r6,r6,r21
 80098f4:	21c0022e 	bgeu	r4,r7,8009900 <__udivdi3+0x414>
 80098f8:	01400074 	movhi	r5,1
 80098fc:	314d883a 	add	r6,r6,r5
 8009900:	202ad43a 	srli	r21,r4,16
 8009904:	354d883a 	add	r6,r6,r21
 8009908:	19803f36 	bltu	r3,r6,8009a08 <__udivdi3+0x51c>
 800990c:	19803926 	beq	r3,r6,80099f4 <__udivdi3+0x508>
 8009910:	0007883a 	mov	r3,zero
 8009914:	003fa006 	br	8009798 <__alt_data_end+0xfc009798>
 8009918:	90e4983a 	sll	r18,r18,r3
 800991c:	80aad83a 	srl	r21,r16,r2
 8009920:	80e0983a 	sll	r16,r16,r3
 8009924:	9028d43a 	srli	r20,r18,16
 8009928:	9884d83a 	srl	r2,r19,r2
 800992c:	a809883a 	mov	r4,r21
 8009930:	a00b883a 	mov	r5,r20
 8009934:	80acb03a 	or	r22,r16,r2
 8009938:	98e2983a 	sll	r17,r19,r3
 800993c:	800a1600 	call	800a160 <__umodsi3>
 8009940:	a809883a 	mov	r4,r21
 8009944:	a00b883a 	mov	r5,r20
 8009948:	1021883a 	mov	r16,r2
 800994c:	800a1580 	call	800a158 <__udivsi3>
 8009950:	957fffcc 	andi	r21,r18,65535
 8009954:	8020943a 	slli	r16,r16,16
 8009958:	b00ad43a 	srli	r5,r22,16
 800995c:	1567383a 	mul	r19,r2,r21
 8009960:	102f883a 	mov	r23,r2
 8009964:	8148b03a 	or	r4,r16,r5
 8009968:	24c0062e 	bgeu	r4,r19,8009984 <__udivdi3+0x498>
 800996c:	2489883a 	add	r4,r4,r18
 8009970:	10bfffc4 	addi	r2,r2,-1
 8009974:	24804536 	bltu	r4,r18,8009a8c <__udivdi3+0x5a0>
 8009978:	24c0442e 	bgeu	r4,r19,8009a8c <__udivdi3+0x5a0>
 800997c:	bdffff84 	addi	r23,r23,-2
 8009980:	2489883a 	add	r4,r4,r18
 8009984:	24e7c83a 	sub	r19,r4,r19
 8009988:	9809883a 	mov	r4,r19
 800998c:	a00b883a 	mov	r5,r20
 8009990:	800a1600 	call	800a160 <__umodsi3>
 8009994:	1021883a 	mov	r16,r2
 8009998:	9809883a 	mov	r4,r19
 800999c:	a00b883a 	mov	r5,r20
 80099a0:	800a1580 	call	800a158 <__udivsi3>
 80099a4:	8020943a 	slli	r16,r16,16
 80099a8:	1007883a 	mov	r3,r2
 80099ac:	1545383a 	mul	r2,r2,r21
 80099b0:	b13fffcc 	andi	r4,r22,65535
 80099b4:	8108b03a 	or	r4,r16,r4
 80099b8:	2080062e 	bgeu	r4,r2,80099d4 <__udivdi3+0x4e8>
 80099bc:	2489883a 	add	r4,r4,r18
 80099c0:	197fffc4 	addi	r5,r3,-1
 80099c4:	24802f36 	bltu	r4,r18,8009a84 <__udivdi3+0x598>
 80099c8:	20802e2e 	bgeu	r4,r2,8009a84 <__udivdi3+0x598>
 80099cc:	18ffff84 	addi	r3,r3,-2
 80099d0:	2489883a 	add	r4,r4,r18
 80099d4:	b82e943a 	slli	r23,r23,16
 80099d8:	20a1c83a 	sub	r16,r4,r2
 80099dc:	1dc6b03a 	or	r3,r3,r23
 80099e0:	003f4006 	br	80096e4 <__alt_data_end+0xfc0096e4>
 80099e4:	2005883a 	mov	r2,r4
 80099e8:	003f6606 	br	8009784 <__alt_data_end+0xfc009784>
 80099ec:	1805883a 	mov	r2,r3
 80099f0:	003f0a06 	br	800961c <__alt_data_end+0xfc00961c>
 80099f4:	2006943a 	slli	r3,r4,16
 80099f8:	9c88983a 	sll	r4,r19,r18
 80099fc:	4a7fffcc 	andi	r9,r9,65535
 8009a00:	1a47883a 	add	r3,r3,r9
 8009a04:	20ffc22e 	bgeu	r4,r3,8009910 <__alt_data_end+0xfc009910>
 8009a08:	10bfffc4 	addi	r2,r2,-1
 8009a0c:	003fc006 	br	8009910 <__alt_data_end+0xfc009910>
 8009a10:	00c00404 	movi	r3,16
 8009a14:	180b883a 	mov	r5,r3
 8009a18:	003f0c06 	br	800964c <__alt_data_end+0xfc00964c>
 8009a1c:	0007883a 	mov	r3,zero
 8009a20:	000b883a 	mov	r5,zero
 8009a24:	003f0906 	br	800964c <__alt_data_end+0xfc00964c>
 8009a28:	00800404 	movi	r2,16
 8009a2c:	1007883a 	mov	r3,r2
 8009a30:	003ec606 	br	800954c <__alt_data_end+0xfc00954c>
 8009a34:	00800404 	movi	r2,16
 8009a38:	1007883a 	mov	r3,r2
 8009a3c:	003f1c06 	br	80096b0 <__alt_data_end+0xfc0096b0>
 8009a40:	0005883a 	mov	r2,zero
 8009a44:	0007883a 	mov	r3,zero
 8009a48:	003f1906 	br	80096b0 <__alt_data_end+0xfc0096b0>
 8009a4c:	0005883a 	mov	r2,zero
 8009a50:	0007883a 	mov	r3,zero
 8009a54:	003ebd06 	br	800954c <__alt_data_end+0xfc00954c>
 8009a58:	0007883a 	mov	r3,zero
 8009a5c:	00800044 	movi	r2,1
 8009a60:	003f4d06 	br	8009798 <__alt_data_end+0xfc009798>
 8009a64:	197f942e 	bgeu	r3,r5,80098b8 <__alt_data_end+0xfc0098b8>
 8009a68:	10bfff84 	addi	r2,r2,-2
 8009a6c:	1dc7883a 	add	r3,r3,r23
 8009a70:	003f9206 	br	80098bc <__alt_data_end+0xfc0098bc>
 8009a74:	15bf7e2e 	bgeu	r2,r22,8009870 <__alt_data_end+0xfc009870>
 8009a78:	843fff84 	addi	r16,r16,-2
 8009a7c:	15c5883a 	add	r2,r2,r23
 8009a80:	003f7c06 	br	8009874 <__alt_data_end+0xfc009874>
 8009a84:	2807883a 	mov	r3,r5
 8009a88:	003fd206 	br	80099d4 <__alt_data_end+0xfc0099d4>
 8009a8c:	102f883a 	mov	r23,r2
 8009a90:	003fbc06 	br	8009984 <__alt_data_end+0xfc009984>
 8009a94:	843fff84 	addi	r16,r16,-2
 8009a98:	2489883a 	add	r4,r4,r18
 8009a9c:	003f2506 	br	8009734 <__alt_data_end+0xfc009734>
 8009aa0:	843fff84 	addi	r16,r16,-2
 8009aa4:	1485883a 	add	r2,r2,r18
 8009aa8:	003eca06 	br	80095d4 <__alt_data_end+0xfc0095d4>

08009aac <__umoddi3>:
 8009aac:	defff404 	addi	sp,sp,-48
 8009ab0:	ddc00915 	stw	r23,36(sp)
 8009ab4:	dc400315 	stw	r17,12(sp)
 8009ab8:	dc000215 	stw	r16,8(sp)
 8009abc:	dfc00b15 	stw	ra,44(sp)
 8009ac0:	df000a15 	stw	fp,40(sp)
 8009ac4:	dd800815 	stw	r22,32(sp)
 8009ac8:	dd400715 	stw	r21,28(sp)
 8009acc:	dd000615 	stw	r20,24(sp)
 8009ad0:	dcc00515 	stw	r19,20(sp)
 8009ad4:	dc800415 	stw	r18,16(sp)
 8009ad8:	2021883a 	mov	r16,r4
 8009adc:	2823883a 	mov	r17,r5
 8009ae0:	282f883a 	mov	r23,r5
 8009ae4:	3800381e 	bne	r7,zero,8009bc8 <__umoddi3+0x11c>
 8009ae8:	3027883a 	mov	r19,r6
 8009aec:	2029883a 	mov	r20,r4
 8009af0:	29804e2e 	bgeu	r5,r6,8009c2c <__umoddi3+0x180>
 8009af4:	00bfffd4 	movui	r2,65535
 8009af8:	11809c36 	bltu	r2,r6,8009d6c <__umoddi3+0x2c0>
 8009afc:	00803fc4 	movi	r2,255
 8009b00:	11813b2e 	bgeu	r2,r6,8009ff0 <__umoddi3+0x544>
 8009b04:	01400204 	movi	r5,8
 8009b08:	2805883a 	mov	r2,r5
 8009b0c:	314ad83a 	srl	r5,r6,r5
 8009b10:	00c20074 	movhi	r3,2049
 8009b14:	18fd9504 	addi	r3,r3,-2476
 8009b18:	194b883a 	add	r5,r3,r5
 8009b1c:	29000003 	ldbu	r4,0(r5)
 8009b20:	2089883a 	add	r4,r4,r2
 8009b24:	00800804 	movi	r2,32
 8009b28:	1105c83a 	sub	r2,r2,r4
 8009b2c:	1000ec26 	beq	r2,zero,8009ee0 <__umoddi3+0x434>
 8009b30:	88a2983a 	sll	r17,r17,r2
 8009b34:	8108d83a 	srl	r4,r16,r4
 8009b38:	30a6983a 	sll	r19,r6,r2
 8009b3c:	80a8983a 	sll	r20,r16,r2
 8009b40:	1025883a 	mov	r18,r2
 8009b44:	892eb03a 	or	r23,r17,r4
 8009b48:	982cd43a 	srli	r22,r19,16
 8009b4c:	b809883a 	mov	r4,r23
 8009b50:	9d7fffcc 	andi	r21,r19,65535
 8009b54:	b00b883a 	mov	r5,r22
 8009b58:	800a1600 	call	800a160 <__umodsi3>
 8009b5c:	b809883a 	mov	r4,r23
 8009b60:	b00b883a 	mov	r5,r22
 8009b64:	1021883a 	mov	r16,r2
 8009b68:	800a1580 	call	800a158 <__udivsi3>
 8009b6c:	8020943a 	slli	r16,r16,16
 8009b70:	a00cd43a 	srli	r6,r20,16
 8009b74:	1545383a 	mul	r2,r2,r21
 8009b78:	8188b03a 	or	r4,r16,r6
 8009b7c:	2080042e 	bgeu	r4,r2,8009b90 <__umoddi3+0xe4>
 8009b80:	24c9883a 	add	r4,r4,r19
 8009b84:	24c00236 	bltu	r4,r19,8009b90 <__umoddi3+0xe4>
 8009b88:	2080012e 	bgeu	r4,r2,8009b90 <__umoddi3+0xe4>
 8009b8c:	24c9883a 	add	r4,r4,r19
 8009b90:	20a3c83a 	sub	r17,r4,r2
 8009b94:	8809883a 	mov	r4,r17
 8009b98:	b00b883a 	mov	r5,r22
 8009b9c:	800a1600 	call	800a160 <__umodsi3>
 8009ba0:	8809883a 	mov	r4,r17
 8009ba4:	b00b883a 	mov	r5,r22
 8009ba8:	1021883a 	mov	r16,r2
 8009bac:	800a1580 	call	800a158 <__udivsi3>
 8009bb0:	8006943a 	slli	r3,r16,16
 8009bb4:	1545383a 	mul	r2,r2,r21
 8009bb8:	a13fffcc 	andi	r4,r20,65535
 8009bbc:	1906b03a 	or	r3,r3,r4
 8009bc0:	1880532e 	bgeu	r3,r2,8009d10 <__umoddi3+0x264>
 8009bc4:	00004e06 	br	8009d00 <__umoddi3+0x254>
 8009bc8:	29c05536 	bltu	r5,r7,8009d20 <__umoddi3+0x274>
 8009bcc:	00bfffd4 	movui	r2,65535
 8009bd0:	11c0612e 	bgeu	r2,r7,8009d58 <__umoddi3+0x2ac>
 8009bd4:	00804034 	movhi	r2,256
 8009bd8:	10bfffc4 	addi	r2,r2,-1
 8009bdc:	11c0f82e 	bgeu	r2,r7,8009fc0 <__umoddi3+0x514>
 8009be0:	01400604 	movi	r5,24
 8009be4:	282b883a 	mov	r21,r5
 8009be8:	394ad83a 	srl	r5,r7,r5
 8009bec:	00c20074 	movhi	r3,2049
 8009bf0:	18fd9504 	addi	r3,r3,-2476
 8009bf4:	194b883a 	add	r5,r3,r5
 8009bf8:	28800003 	ldbu	r2,0(r5)
 8009bfc:	00c00804 	movi	r3,32
 8009c00:	156b883a 	add	r21,r2,r21
 8009c04:	1d69c83a 	sub	r20,r3,r21
 8009c08:	a000631e 	bne	r20,zero,8009d98 <__umoddi3+0x2ec>
 8009c0c:	3c400136 	bltu	r7,r17,8009c14 <__umoddi3+0x168>
 8009c10:	81810436 	bltu	r16,r6,800a024 <__umoddi3+0x578>
 8009c14:	8185c83a 	sub	r2,r16,r6
 8009c18:	89e3c83a 	sub	r17,r17,r7
 8009c1c:	8087803a 	cmpltu	r3,r16,r2
 8009c20:	88efc83a 	sub	r23,r17,r3
 8009c24:	b807883a 	mov	r3,r23
 8009c28:	00003f06 	br	8009d28 <__umoddi3+0x27c>
 8009c2c:	3000041e 	bne	r6,zero,8009c40 <__umoddi3+0x194>
 8009c30:	01000044 	movi	r4,1
 8009c34:	000b883a 	mov	r5,zero
 8009c38:	800a1580 	call	800a158 <__udivsi3>
 8009c3c:	1027883a 	mov	r19,r2
 8009c40:	00bfffd4 	movui	r2,65535
 8009c44:	14c04f2e 	bgeu	r2,r19,8009d84 <__umoddi3+0x2d8>
 8009c48:	00804034 	movhi	r2,256
 8009c4c:	10bfffc4 	addi	r2,r2,-1
 8009c50:	14c0e42e 	bgeu	r2,r19,8009fe4 <__umoddi3+0x538>
 8009c54:	00800604 	movi	r2,24
 8009c58:	1007883a 	mov	r3,r2
 8009c5c:	9884d83a 	srl	r2,r19,r2
 8009c60:	01020074 	movhi	r4,2049
 8009c64:	213d9504 	addi	r4,r4,-2476
 8009c68:	2085883a 	add	r2,r4,r2
 8009c6c:	11000003 	ldbu	r4,0(r2)
 8009c70:	00800804 	movi	r2,32
 8009c74:	20c7883a 	add	r3,r4,r3
 8009c78:	10c5c83a 	sub	r2,r2,r3
 8009c7c:	10009a1e 	bne	r2,zero,8009ee8 <__umoddi3+0x43c>
 8009c80:	982cd43a 	srli	r22,r19,16
 8009c84:	8ce3c83a 	sub	r17,r17,r19
 8009c88:	9c3fffcc 	andi	r16,r19,65535
 8009c8c:	0025883a 	mov	r18,zero
 8009c90:	8809883a 	mov	r4,r17
 8009c94:	b00b883a 	mov	r5,r22
 8009c98:	800a1600 	call	800a160 <__umodsi3>
 8009c9c:	8809883a 	mov	r4,r17
 8009ca0:	b00b883a 	mov	r5,r22
 8009ca4:	102b883a 	mov	r21,r2
 8009ca8:	800a1580 	call	800a158 <__udivsi3>
 8009cac:	a806943a 	slli	r3,r21,16
 8009cb0:	a008d43a 	srli	r4,r20,16
 8009cb4:	1405383a 	mul	r2,r2,r16
 8009cb8:	190cb03a 	or	r6,r3,r4
 8009cbc:	3080032e 	bgeu	r6,r2,8009ccc <__umoddi3+0x220>
 8009cc0:	34cd883a 	add	r6,r6,r19
 8009cc4:	34c00136 	bltu	r6,r19,8009ccc <__umoddi3+0x220>
 8009cc8:	3080d436 	bltu	r6,r2,800a01c <__umoddi3+0x570>
 8009ccc:	30abc83a 	sub	r21,r6,r2
 8009cd0:	a809883a 	mov	r4,r21
 8009cd4:	b00b883a 	mov	r5,r22
 8009cd8:	800a1600 	call	800a160 <__umodsi3>
 8009cdc:	1023883a 	mov	r17,r2
 8009ce0:	a809883a 	mov	r4,r21
 8009ce4:	b00b883a 	mov	r5,r22
 8009ce8:	800a1580 	call	800a158 <__udivsi3>
 8009cec:	8822943a 	slli	r17,r17,16
 8009cf0:	1405383a 	mul	r2,r2,r16
 8009cf4:	a13fffcc 	andi	r4,r20,65535
 8009cf8:	8906b03a 	or	r3,r17,r4
 8009cfc:	1880042e 	bgeu	r3,r2,8009d10 <__umoddi3+0x264>
 8009d00:	1cc7883a 	add	r3,r3,r19
 8009d04:	1cc00236 	bltu	r3,r19,8009d10 <__umoddi3+0x264>
 8009d08:	1880012e 	bgeu	r3,r2,8009d10 <__umoddi3+0x264>
 8009d0c:	1cc7883a 	add	r3,r3,r19
 8009d10:	1887c83a 	sub	r3,r3,r2
 8009d14:	1c84d83a 	srl	r2,r3,r18
 8009d18:	0007883a 	mov	r3,zero
 8009d1c:	00000206 	br	8009d28 <__umoddi3+0x27c>
 8009d20:	2005883a 	mov	r2,r4
 8009d24:	2807883a 	mov	r3,r5
 8009d28:	dfc00b17 	ldw	ra,44(sp)
 8009d2c:	df000a17 	ldw	fp,40(sp)
 8009d30:	ddc00917 	ldw	r23,36(sp)
 8009d34:	dd800817 	ldw	r22,32(sp)
 8009d38:	dd400717 	ldw	r21,28(sp)
 8009d3c:	dd000617 	ldw	r20,24(sp)
 8009d40:	dcc00517 	ldw	r19,20(sp)
 8009d44:	dc800417 	ldw	r18,16(sp)
 8009d48:	dc400317 	ldw	r17,12(sp)
 8009d4c:	dc000217 	ldw	r16,8(sp)
 8009d50:	dec00c04 	addi	sp,sp,48
 8009d54:	f800283a 	ret
 8009d58:	00803fc4 	movi	r2,255
 8009d5c:	11c0952e 	bgeu	r2,r7,8009fb4 <__umoddi3+0x508>
 8009d60:	01400204 	movi	r5,8
 8009d64:	282b883a 	mov	r21,r5
 8009d68:	003f9f06 	br	8009be8 <__alt_data_end+0xfc009be8>
 8009d6c:	00804034 	movhi	r2,256
 8009d70:	10bfffc4 	addi	r2,r2,-1
 8009d74:	1180952e 	bgeu	r2,r6,8009fcc <__umoddi3+0x520>
 8009d78:	01400604 	movi	r5,24
 8009d7c:	2805883a 	mov	r2,r5
 8009d80:	003f6206 	br	8009b0c <__alt_data_end+0xfc009b0c>
 8009d84:	00803fc4 	movi	r2,255
 8009d88:	14c0932e 	bgeu	r2,r19,8009fd8 <__umoddi3+0x52c>
 8009d8c:	00800204 	movi	r2,8
 8009d90:	1007883a 	mov	r3,r2
 8009d94:	003fb106 	br	8009c5c <__alt_data_end+0xfc009c5c>
 8009d98:	3548d83a 	srl	r4,r6,r21
 8009d9c:	3d0e983a 	sll	r7,r7,r20
 8009da0:	8d10983a 	sll	r8,r17,r20
 8009da4:	8d6cd83a 	srl	r22,r17,r21
 8009da8:	3922b03a 	or	r17,r7,r4
 8009dac:	882ed43a 	srli	r23,r17,16
 8009db0:	8564d83a 	srl	r18,r16,r21
 8009db4:	b009883a 	mov	r4,r22
 8009db8:	b80b883a 	mov	r5,r23
 8009dbc:	44a4b03a 	or	r18,r8,r18
 8009dc0:	3526983a 	sll	r19,r6,r20
 8009dc4:	800a1600 	call	800a160 <__umodsi3>
 8009dc8:	b009883a 	mov	r4,r22
 8009dcc:	b80b883a 	mov	r5,r23
 8009dd0:	1039883a 	mov	fp,r2
 8009dd4:	800a1580 	call	800a158 <__udivsi3>
 8009dd8:	102d883a 	mov	r22,r2
 8009ddc:	8a3fffcc 	andi	r8,r17,65535
 8009de0:	e004943a 	slli	r2,fp,16
 8009de4:	900cd43a 	srli	r6,r18,16
 8009de8:	b239383a 	mul	fp,r22,r8
 8009dec:	8520983a 	sll	r16,r16,r20
 8009df0:	118ab03a 	or	r5,r2,r6
 8009df4:	2f00042e 	bgeu	r5,fp,8009e08 <__umoddi3+0x35c>
 8009df8:	2c4b883a 	add	r5,r5,r17
 8009dfc:	b0bfffc4 	addi	r2,r22,-1
 8009e00:	2c40822e 	bgeu	r5,r17,800a00c <__umoddi3+0x560>
 8009e04:	102d883a 	mov	r22,r2
 8009e08:	2f39c83a 	sub	fp,r5,fp
 8009e0c:	e009883a 	mov	r4,fp
 8009e10:	b80b883a 	mov	r5,r23
 8009e14:	da000115 	stw	r8,4(sp)
 8009e18:	800a1600 	call	800a160 <__umodsi3>
 8009e1c:	e009883a 	mov	r4,fp
 8009e20:	b80b883a 	mov	r5,r23
 8009e24:	d8800015 	stw	r2,0(sp)
 8009e28:	800a1580 	call	800a158 <__udivsi3>
 8009e2c:	d9800017 	ldw	r6,0(sp)
 8009e30:	da000117 	ldw	r8,4(sp)
 8009e34:	94bfffcc 	andi	r18,r18,65535
 8009e38:	300c943a 	slli	r6,r6,16
 8009e3c:	1209383a 	mul	r4,r2,r8
 8009e40:	3490b03a 	or	r8,r6,r18
 8009e44:	4100042e 	bgeu	r8,r4,8009e58 <__umoddi3+0x3ac>
 8009e48:	4451883a 	add	r8,r8,r17
 8009e4c:	10ffffc4 	addi	r3,r2,-1
 8009e50:	44406a2e 	bgeu	r8,r17,8009ffc <__umoddi3+0x550>
 8009e54:	1805883a 	mov	r2,r3
 8009e58:	b012943a 	slli	r9,r22,16
 8009e5c:	9abfffcc 	andi	r10,r19,65535
 8009e60:	980ed43a 	srli	r7,r19,16
 8009e64:	124ab03a 	or	r5,r2,r9
 8009e68:	2a7fffcc 	andi	r9,r5,65535
 8009e6c:	280ad43a 	srli	r5,r5,16
 8009e70:	4a8d383a 	mul	r6,r9,r10
 8009e74:	49d3383a 	mul	r9,r9,r7
 8009e78:	2a95383a 	mul	r10,r5,r10
 8009e7c:	3004d43a 	srli	r2,r6,16
 8009e80:	4111c83a 	sub	r8,r8,r4
 8009e84:	5253883a 	add	r9,r10,r9
 8009e88:	4893883a 	add	r9,r9,r2
 8009e8c:	29cb383a 	mul	r5,r5,r7
 8009e90:	4a80022e 	bgeu	r9,r10,8009e9c <__umoddi3+0x3f0>
 8009e94:	00800074 	movhi	r2,1
 8009e98:	288b883a 	add	r5,r5,r2
 8009e9c:	4808d43a 	srli	r4,r9,16
 8009ea0:	4812943a 	slli	r9,r9,16
 8009ea4:	31bfffcc 	andi	r6,r6,65535
 8009ea8:	290b883a 	add	r5,r5,r4
 8009eac:	498d883a 	add	r6,r9,r6
 8009eb0:	41403a36 	bltu	r8,r5,8009f9c <__umoddi3+0x4f0>
 8009eb4:	41405d26 	beq	r8,r5,800a02c <__umoddi3+0x580>
 8009eb8:	4149c83a 	sub	r4,r8,r5
 8009ebc:	300f883a 	mov	r7,r6
 8009ec0:	81cfc83a 	sub	r7,r16,r7
 8009ec4:	81c7803a 	cmpltu	r3,r16,r7
 8009ec8:	20c7c83a 	sub	r3,r4,r3
 8009ecc:	1d44983a 	sll	r2,r3,r21
 8009ed0:	3d0ed83a 	srl	r7,r7,r20
 8009ed4:	1d06d83a 	srl	r3,r3,r20
 8009ed8:	11c4b03a 	or	r2,r2,r7
 8009edc:	003f9206 	br	8009d28 <__alt_data_end+0xfc009d28>
 8009ee0:	0025883a 	mov	r18,zero
 8009ee4:	003f1806 	br	8009b48 <__alt_data_end+0xfc009b48>
 8009ee8:	98a6983a 	sll	r19,r19,r2
 8009eec:	88e8d83a 	srl	r20,r17,r3
 8009ef0:	80c6d83a 	srl	r3,r16,r3
 8009ef4:	982cd43a 	srli	r22,r19,16
 8009ef8:	88a2983a 	sll	r17,r17,r2
 8009efc:	a009883a 	mov	r4,r20
 8009f00:	b00b883a 	mov	r5,r22
 8009f04:	88eab03a 	or	r21,r17,r3
 8009f08:	1025883a 	mov	r18,r2
 8009f0c:	800a1600 	call	800a160 <__umodsi3>
 8009f10:	a009883a 	mov	r4,r20
 8009f14:	b00b883a 	mov	r5,r22
 8009f18:	1023883a 	mov	r17,r2
 8009f1c:	800a1580 	call	800a158 <__udivsi3>
 8009f20:	9f3fffcc 	andi	fp,r19,65535
 8009f24:	8822943a 	slli	r17,r17,16
 8009f28:	a80ad43a 	srli	r5,r21,16
 8009f2c:	1705383a 	mul	r2,r2,fp
 8009f30:	84a8983a 	sll	r20,r16,r18
 8009f34:	8948b03a 	or	r4,r17,r5
 8009f38:	2080042e 	bgeu	r4,r2,8009f4c <__umoddi3+0x4a0>
 8009f3c:	24c9883a 	add	r4,r4,r19
 8009f40:	24c00236 	bltu	r4,r19,8009f4c <__umoddi3+0x4a0>
 8009f44:	2080012e 	bgeu	r4,r2,8009f4c <__umoddi3+0x4a0>
 8009f48:	24c9883a 	add	r4,r4,r19
 8009f4c:	20afc83a 	sub	r23,r4,r2
 8009f50:	b809883a 	mov	r4,r23
 8009f54:	b00b883a 	mov	r5,r22
 8009f58:	800a1600 	call	800a160 <__umodsi3>
 8009f5c:	1023883a 	mov	r17,r2
 8009f60:	b809883a 	mov	r4,r23
 8009f64:	b00b883a 	mov	r5,r22
 8009f68:	800a1580 	call	800a158 <__udivsi3>
 8009f6c:	8822943a 	slli	r17,r17,16
 8009f70:	1705383a 	mul	r2,r2,fp
 8009f74:	a93fffcc 	andi	r4,r21,65535
 8009f78:	8908b03a 	or	r4,r17,r4
 8009f7c:	2080042e 	bgeu	r4,r2,8009f90 <__umoddi3+0x4e4>
 8009f80:	24c9883a 	add	r4,r4,r19
 8009f84:	24c00236 	bltu	r4,r19,8009f90 <__umoddi3+0x4e4>
 8009f88:	2080012e 	bgeu	r4,r2,8009f90 <__umoddi3+0x4e4>
 8009f8c:	24c9883a 	add	r4,r4,r19
 8009f90:	20a3c83a 	sub	r17,r4,r2
 8009f94:	e021883a 	mov	r16,fp
 8009f98:	003f3d06 	br	8009c90 <__alt_data_end+0xfc009c90>
 8009f9c:	34cfc83a 	sub	r7,r6,r19
 8009fa0:	2c4bc83a 	sub	r5,r5,r17
 8009fa4:	31cd803a 	cmpltu	r6,r6,r7
 8009fa8:	298dc83a 	sub	r6,r5,r6
 8009fac:	4189c83a 	sub	r4,r8,r6
 8009fb0:	003fc306 	br	8009ec0 <__alt_data_end+0xfc009ec0>
 8009fb4:	000b883a 	mov	r5,zero
 8009fb8:	002b883a 	mov	r21,zero
 8009fbc:	003f0a06 	br	8009be8 <__alt_data_end+0xfc009be8>
 8009fc0:	01400404 	movi	r5,16
 8009fc4:	282b883a 	mov	r21,r5
 8009fc8:	003f0706 	br	8009be8 <__alt_data_end+0xfc009be8>
 8009fcc:	01400404 	movi	r5,16
 8009fd0:	2805883a 	mov	r2,r5
 8009fd4:	003ecd06 	br	8009b0c <__alt_data_end+0xfc009b0c>
 8009fd8:	0005883a 	mov	r2,zero
 8009fdc:	0007883a 	mov	r3,zero
 8009fe0:	003f1e06 	br	8009c5c <__alt_data_end+0xfc009c5c>
 8009fe4:	00800404 	movi	r2,16
 8009fe8:	1007883a 	mov	r3,r2
 8009fec:	003f1b06 	br	8009c5c <__alt_data_end+0xfc009c5c>
 8009ff0:	000b883a 	mov	r5,zero
 8009ff4:	0005883a 	mov	r2,zero
 8009ff8:	003ec406 	br	8009b0c <__alt_data_end+0xfc009b0c>
 8009ffc:	413f952e 	bgeu	r8,r4,8009e54 <__alt_data_end+0xfc009e54>
 800a000:	10bfff84 	addi	r2,r2,-2
 800a004:	4451883a 	add	r8,r8,r17
 800a008:	003f9306 	br	8009e58 <__alt_data_end+0xfc009e58>
 800a00c:	2f3f7d2e 	bgeu	r5,fp,8009e04 <__alt_data_end+0xfc009e04>
 800a010:	b5bfff84 	addi	r22,r22,-2
 800a014:	2c4b883a 	add	r5,r5,r17
 800a018:	003f7b06 	br	8009e08 <__alt_data_end+0xfc009e08>
 800a01c:	34cd883a 	add	r6,r6,r19
 800a020:	003f2a06 	br	8009ccc <__alt_data_end+0xfc009ccc>
 800a024:	8005883a 	mov	r2,r16
 800a028:	003efe06 	br	8009c24 <__alt_data_end+0xfc009c24>
 800a02c:	81bfdb36 	bltu	r16,r6,8009f9c <__alt_data_end+0xfc009f9c>
 800a030:	300f883a 	mov	r7,r6
 800a034:	0009883a 	mov	r4,zero
 800a038:	003fa106 	br	8009ec0 <__alt_data_end+0xfc009ec0>

0800a03c <udivmodsi4>:
 800a03c:	2900182e 	bgeu	r5,r4,800a0a0 <udivmodsi4+0x64>
 800a040:	28001716 	blt	r5,zero,800a0a0 <udivmodsi4+0x64>
 800a044:	00800804 	movi	r2,32
 800a048:	00c00044 	movi	r3,1
 800a04c:	00000206 	br	800a058 <udivmodsi4+0x1c>
 800a050:	10001126 	beq	r2,zero,800a098 <udivmodsi4+0x5c>
 800a054:	28000516 	blt	r5,zero,800a06c <udivmodsi4+0x30>
 800a058:	294b883a 	add	r5,r5,r5
 800a05c:	10bfffc4 	addi	r2,r2,-1
 800a060:	18c7883a 	add	r3,r3,r3
 800a064:	293ffa36 	bltu	r5,r4,800a050 <__alt_data_end+0xfc00a050>
 800a068:	18000b26 	beq	r3,zero,800a098 <udivmodsi4+0x5c>
 800a06c:	0005883a 	mov	r2,zero
 800a070:	21400236 	bltu	r4,r5,800a07c <udivmodsi4+0x40>
 800a074:	2149c83a 	sub	r4,r4,r5
 800a078:	10c4b03a 	or	r2,r2,r3
 800a07c:	1806d07a 	srli	r3,r3,1
 800a080:	280ad07a 	srli	r5,r5,1
 800a084:	183ffa1e 	bne	r3,zero,800a070 <__alt_data_end+0xfc00a070>
 800a088:	3000011e 	bne	r6,zero,800a090 <udivmodsi4+0x54>
 800a08c:	f800283a 	ret
 800a090:	2005883a 	mov	r2,r4
 800a094:	f800283a 	ret
 800a098:	0005883a 	mov	r2,zero
 800a09c:	003ffa06 	br	800a088 <__alt_data_end+0xfc00a088>
 800a0a0:	00c00044 	movi	r3,1
 800a0a4:	003ff106 	br	800a06c <__alt_data_end+0xfc00a06c>

0800a0a8 <__divsi3>:
 800a0a8:	defffe04 	addi	sp,sp,-8
 800a0ac:	dfc00115 	stw	ra,4(sp)
 800a0b0:	dc000015 	stw	r16,0(sp)
 800a0b4:	20000b16 	blt	r4,zero,800a0e4 <__divsi3+0x3c>
 800a0b8:	0021883a 	mov	r16,zero
 800a0bc:	28000c16 	blt	r5,zero,800a0f0 <__divsi3+0x48>
 800a0c0:	000d883a 	mov	r6,zero
 800a0c4:	800a03c0 	call	800a03c <udivmodsi4>
 800a0c8:	0407c83a 	sub	r3,zero,r16
 800a0cc:	1884f03a 	xor	r2,r3,r2
 800a0d0:	1405883a 	add	r2,r2,r16
 800a0d4:	dfc00117 	ldw	ra,4(sp)
 800a0d8:	dc000017 	ldw	r16,0(sp)
 800a0dc:	dec00204 	addi	sp,sp,8
 800a0e0:	f800283a 	ret
 800a0e4:	0109c83a 	sub	r4,zero,r4
 800a0e8:	04000044 	movi	r16,1
 800a0ec:	283ff40e 	bge	r5,zero,800a0c0 <__alt_data_end+0xfc00a0c0>
 800a0f0:	014bc83a 	sub	r5,zero,r5
 800a0f4:	8400005c 	xori	r16,r16,1
 800a0f8:	003ff106 	br	800a0c0 <__alt_data_end+0xfc00a0c0>

0800a0fc <__modsi3>:
 800a0fc:	defffd04 	addi	sp,sp,-12
 800a100:	dfc00215 	stw	ra,8(sp)
 800a104:	dc400115 	stw	r17,4(sp)
 800a108:	dc000015 	stw	r16,0(sp)
 800a10c:	20000c16 	blt	r4,zero,800a140 <__modsi3+0x44>
 800a110:	0023883a 	mov	r17,zero
 800a114:	0021883a 	mov	r16,zero
 800a118:	28000d16 	blt	r5,zero,800a150 <__modsi3+0x54>
 800a11c:	01800044 	movi	r6,1
 800a120:	800a03c0 	call	800a03c <udivmodsi4>
 800a124:	1404f03a 	xor	r2,r2,r16
 800a128:	8885883a 	add	r2,r17,r2
 800a12c:	dfc00217 	ldw	ra,8(sp)
 800a130:	dc400117 	ldw	r17,4(sp)
 800a134:	dc000017 	ldw	r16,0(sp)
 800a138:	dec00304 	addi	sp,sp,12
 800a13c:	f800283a 	ret
 800a140:	0109c83a 	sub	r4,zero,r4
 800a144:	04400044 	movi	r17,1
 800a148:	043fffc4 	movi	r16,-1
 800a14c:	283ff30e 	bge	r5,zero,800a11c <__alt_data_end+0xfc00a11c>
 800a150:	014bc83a 	sub	r5,zero,r5
 800a154:	003ff106 	br	800a11c <__alt_data_end+0xfc00a11c>

0800a158 <__udivsi3>:
 800a158:	000d883a 	mov	r6,zero
 800a15c:	800a03c1 	jmpi	800a03c <udivmodsi4>

0800a160 <__umodsi3>:
 800a160:	01800044 	movi	r6,1
 800a164:	800a03c1 	jmpi	800a03c <udivmodsi4>

0800a168 <__adddf3>:
 800a168:	02000434 	movhi	r8,16
 800a16c:	423fffc4 	addi	r8,r8,-1
 800a170:	defffb04 	addi	sp,sp,-20
 800a174:	2a12703a 	and	r9,r5,r8
 800a178:	2806d7fa 	srli	r3,r5,31
 800a17c:	3a10703a 	and	r8,r7,r8
 800a180:	3804d53a 	srli	r2,r7,20
 800a184:	3014d77a 	srli	r10,r6,29
 800a188:	dc000015 	stw	r16,0(sp)
 800a18c:	481290fa 	slli	r9,r9,3
 800a190:	2820d53a 	srli	r16,r5,20
 800a194:	401090fa 	slli	r8,r8,3
 800a198:	200ad77a 	srli	r5,r4,29
 800a19c:	380ed7fa 	srli	r7,r7,31
 800a1a0:	dc800215 	stw	r18,8(sp)
 800a1a4:	dc400115 	stw	r17,4(sp)
 800a1a8:	dfc00415 	stw	ra,16(sp)
 800a1ac:	dcc00315 	stw	r19,12(sp)
 800a1b0:	1c803fcc 	andi	r18,r3,255
 800a1b4:	8401ffcc 	andi	r16,r16,2047
 800a1b8:	494ab03a 	or	r5,r9,r5
 800a1bc:	202290fa 	slli	r17,r4,3
 800a1c0:	1081ffcc 	andi	r2,r2,2047
 800a1c4:	4290b03a 	or	r8,r8,r10
 800a1c8:	300c90fa 	slli	r6,r6,3
 800a1cc:	91c07026 	beq	r18,r7,800a390 <__adddf3+0x228>
 800a1d0:	8087c83a 	sub	r3,r16,r2
 800a1d4:	00c0b30e 	bge	zero,r3,800a4a4 <__adddf3+0x33c>
 800a1d8:	10002a1e 	bne	r2,zero,800a284 <__adddf3+0x11c>
 800a1dc:	4184b03a 	or	r2,r8,r6
 800a1e0:	1000991e 	bne	r2,zero,800a448 <__adddf3+0x2e0>
 800a1e4:	888001cc 	andi	r2,r17,7
 800a1e8:	10005b26 	beq	r2,zero,800a358 <__adddf3+0x1f0>
 800a1ec:	88c003cc 	andi	r3,r17,15
 800a1f0:	00800104 	movi	r2,4
 800a1f4:	18805826 	beq	r3,r2,800a358 <__adddf3+0x1f0>
 800a1f8:	89800104 	addi	r6,r17,4
 800a1fc:	3463803a 	cmpltu	r17,r6,r17
 800a200:	2c4b883a 	add	r5,r5,r17
 800a204:	2880202c 	andhi	r2,r5,128
 800a208:	9007883a 	mov	r3,r18
 800a20c:	3023883a 	mov	r17,r6
 800a210:	10005426 	beq	r2,zero,800a364 <__adddf3+0x1fc>
 800a214:	84000044 	addi	r16,r16,1
 800a218:	0081ffc4 	movi	r2,2047
 800a21c:	8080c126 	beq	r16,r2,800a524 <__adddf3+0x3bc>
 800a220:	013fe034 	movhi	r4,65408
 800a224:	213fffc4 	addi	r4,r4,-1
 800a228:	290a703a 	and	r5,r5,r4
 800a22c:	2804977a 	slli	r2,r5,29
 800a230:	280a927a 	slli	r5,r5,9
 800a234:	8822d0fa 	srli	r17,r17,3
 800a238:	8401ffcc 	andi	r16,r16,2047
 800a23c:	2808d33a 	srli	r4,r5,12
 800a240:	1444b03a 	or	r2,r2,r17
 800a244:	8401ffcc 	andi	r16,r16,2047
 800a248:	800a953a 	slli	r5,r16,20
 800a24c:	18c03fcc 	andi	r3,r3,255
 800a250:	04000434 	movhi	r16,16
 800a254:	180697fa 	slli	r3,r3,31
 800a258:	843fffc4 	addi	r16,r16,-1
 800a25c:	2420703a 	and	r16,r4,r16
 800a260:	8160b03a 	or	r16,r16,r5
 800a264:	80c6b03a 	or	r3,r16,r3
 800a268:	dfc00417 	ldw	ra,16(sp)
 800a26c:	dcc00317 	ldw	r19,12(sp)
 800a270:	dc800217 	ldw	r18,8(sp)
 800a274:	dc400117 	ldw	r17,4(sp)
 800a278:	dc000017 	ldw	r16,0(sp)
 800a27c:	dec00504 	addi	sp,sp,20
 800a280:	f800283a 	ret
 800a284:	0081ffc4 	movi	r2,2047
 800a288:	80bfd626 	beq	r16,r2,800a1e4 <__alt_data_end+0xfc00a1e4>
 800a28c:	42002034 	orhi	r8,r8,128
 800a290:	00800e04 	movi	r2,56
 800a294:	10c0a616 	blt	r2,r3,800a530 <__adddf3+0x3c8>
 800a298:	008007c4 	movi	r2,31
 800a29c:	10c0c916 	blt	r2,r3,800a5c4 <__adddf3+0x45c>
 800a2a0:	00800804 	movi	r2,32
 800a2a4:	10c5c83a 	sub	r2,r2,r3
 800a2a8:	408e983a 	sll	r7,r8,r2
 800a2ac:	30c8d83a 	srl	r4,r6,r3
 800a2b0:	3084983a 	sll	r2,r6,r2
 800a2b4:	40c6d83a 	srl	r3,r8,r3
 800a2b8:	390cb03a 	or	r6,r7,r4
 800a2bc:	1004c03a 	cmpne	r2,r2,zero
 800a2c0:	308cb03a 	or	r6,r6,r2
 800a2c4:	898dc83a 	sub	r6,r17,r6
 800a2c8:	89a3803a 	cmpltu	r17,r17,r6
 800a2cc:	28cbc83a 	sub	r5,r5,r3
 800a2d0:	2c4bc83a 	sub	r5,r5,r17
 800a2d4:	3023883a 	mov	r17,r6
 800a2d8:	2880202c 	andhi	r2,r5,128
 800a2dc:	10006d26 	beq	r2,zero,800a494 <__adddf3+0x32c>
 800a2e0:	04c02034 	movhi	r19,128
 800a2e4:	9cffffc4 	addi	r19,r19,-1
 800a2e8:	2ce6703a 	and	r19,r5,r19
 800a2ec:	98007e26 	beq	r19,zero,800a4e8 <__adddf3+0x380>
 800a2f0:	9809883a 	mov	r4,r19
 800a2f4:	800c7040 	call	800c704 <__clzsi2>
 800a2f8:	10fffe04 	addi	r3,r2,-8
 800a2fc:	010007c4 	movi	r4,31
 800a300:	20c07f16 	blt	r4,r3,800a500 <__adddf3+0x398>
 800a304:	01400a04 	movi	r5,40
 800a308:	2885c83a 	sub	r2,r5,r2
 800a30c:	888ad83a 	srl	r5,r17,r2
 800a310:	98e6983a 	sll	r19,r19,r3
 800a314:	88e2983a 	sll	r17,r17,r3
 800a318:	2ce6b03a 	or	r19,r5,r19
 800a31c:	1c007c16 	blt	r3,r16,800a510 <__adddf3+0x3a8>
 800a320:	1c21c83a 	sub	r16,r3,r16
 800a324:	81400044 	addi	r5,r16,1
 800a328:	00c007c4 	movi	r3,31
 800a32c:	19409816 	blt	r3,r5,800a590 <__adddf3+0x428>
 800a330:	1c21c83a 	sub	r16,r3,r16
 800a334:	8c08983a 	sll	r4,r17,r16
 800a338:	8946d83a 	srl	r3,r17,r5
 800a33c:	9c20983a 	sll	r16,r19,r16
 800a340:	2008c03a 	cmpne	r4,r4,zero
 800a344:	994ad83a 	srl	r5,r19,r5
 800a348:	1c06b03a 	or	r3,r3,r16
 800a34c:	1922b03a 	or	r17,r3,r4
 800a350:	0021883a 	mov	r16,zero
 800a354:	003fa306 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a358:	2880202c 	andhi	r2,r5,128
 800a35c:	9007883a 	mov	r3,r18
 800a360:	103fac1e 	bne	r2,zero,800a214 <__alt_data_end+0xfc00a214>
 800a364:	2804977a 	slli	r2,r5,29
 800a368:	8822d0fa 	srli	r17,r17,3
 800a36c:	0101ffc4 	movi	r4,2047
 800a370:	280ad0fa 	srli	r5,r5,3
 800a374:	1444b03a 	or	r2,r2,r17
 800a378:	81002c26 	beq	r16,r4,800a42c <__adddf3+0x2c4>
 800a37c:	8120703a 	and	r16,r16,r4
 800a380:	01000434 	movhi	r4,16
 800a384:	213fffc4 	addi	r4,r4,-1
 800a388:	2908703a 	and	r4,r5,r4
 800a38c:	003fad06 	br	800a244 <__alt_data_end+0xfc00a244>
 800a390:	8089c83a 	sub	r4,r16,r2
 800a394:	01006a0e 	bge	zero,r4,800a540 <__adddf3+0x3d8>
 800a398:	10003326 	beq	r2,zero,800a468 <__adddf3+0x300>
 800a39c:	0081ffc4 	movi	r2,2047
 800a3a0:	80bf9026 	beq	r16,r2,800a1e4 <__alt_data_end+0xfc00a1e4>
 800a3a4:	42002034 	orhi	r8,r8,128
 800a3a8:	00800e04 	movi	r2,56
 800a3ac:	1100b116 	blt	r2,r4,800a674 <__adddf3+0x50c>
 800a3b0:	008007c4 	movi	r2,31
 800a3b4:	1100e216 	blt	r2,r4,800a740 <__adddf3+0x5d8>
 800a3b8:	00800804 	movi	r2,32
 800a3bc:	1105c83a 	sub	r2,r2,r4
 800a3c0:	4092983a 	sll	r9,r8,r2
 800a3c4:	310ed83a 	srl	r7,r6,r4
 800a3c8:	3084983a 	sll	r2,r6,r2
 800a3cc:	4110d83a 	srl	r8,r8,r4
 800a3d0:	49ccb03a 	or	r6,r9,r7
 800a3d4:	1004c03a 	cmpne	r2,r2,zero
 800a3d8:	308cb03a 	or	r6,r6,r2
 800a3dc:	344d883a 	add	r6,r6,r17
 800a3e0:	3463803a 	cmpltu	r17,r6,r17
 800a3e4:	414b883a 	add	r5,r8,r5
 800a3e8:	2c4b883a 	add	r5,r5,r17
 800a3ec:	3023883a 	mov	r17,r6
 800a3f0:	2880202c 	andhi	r2,r5,128
 800a3f4:	10002726 	beq	r2,zero,800a494 <__adddf3+0x32c>
 800a3f8:	84000044 	addi	r16,r16,1
 800a3fc:	0081ffc4 	movi	r2,2047
 800a400:	8080ae26 	beq	r16,r2,800a6bc <__adddf3+0x554>
 800a404:	00bfe034 	movhi	r2,65408
 800a408:	10bfffc4 	addi	r2,r2,-1
 800a40c:	288a703a 	and	r5,r5,r2
 800a410:	880cd07a 	srli	r6,r17,1
 800a414:	280897fa 	slli	r4,r5,31
 800a418:	88c0004c 	andi	r3,r17,1
 800a41c:	30e2b03a 	or	r17,r6,r3
 800a420:	280ad07a 	srli	r5,r5,1
 800a424:	8922b03a 	or	r17,r17,r4
 800a428:	003f6e06 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a42c:	1148b03a 	or	r4,r2,r5
 800a430:	20003c26 	beq	r4,zero,800a524 <__adddf3+0x3bc>
 800a434:	29000234 	orhi	r4,r5,8
 800a438:	01400434 	movhi	r5,16
 800a43c:	297fffc4 	addi	r5,r5,-1
 800a440:	2148703a 	and	r4,r4,r5
 800a444:	003f7f06 	br	800a244 <__alt_data_end+0xfc00a244>
 800a448:	18ffffc4 	addi	r3,r3,-1
 800a44c:	18004d1e 	bne	r3,zero,800a584 <__adddf3+0x41c>
 800a450:	898dc83a 	sub	r6,r17,r6
 800a454:	89a3803a 	cmpltu	r17,r17,r6
 800a458:	2a0bc83a 	sub	r5,r5,r8
 800a45c:	2c4bc83a 	sub	r5,r5,r17
 800a460:	3023883a 	mov	r17,r6
 800a464:	003f9c06 	br	800a2d8 <__alt_data_end+0xfc00a2d8>
 800a468:	4184b03a 	or	r2,r8,r6
 800a46c:	103f5d26 	beq	r2,zero,800a1e4 <__alt_data_end+0xfc00a1e4>
 800a470:	213fffc4 	addi	r4,r4,-1
 800a474:	203fd926 	beq	r4,zero,800a3dc <__alt_data_end+0xfc00a3dc>
 800a478:	0081ffc4 	movi	r2,2047
 800a47c:	80bfca1e 	bne	r16,r2,800a3a8 <__alt_data_end+0xfc00a3a8>
 800a480:	003f5806 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a484:	10c8b03a 	or	r4,r2,r3
 800a488:	20008b26 	beq	r4,zero,800a6b8 <__adddf3+0x550>
 800a48c:	100b883a 	mov	r5,r2
 800a490:	1823883a 	mov	r17,r3
 800a494:	888001cc 	andi	r2,r17,7
 800a498:	103f541e 	bne	r2,zero,800a1ec <__alt_data_end+0xfc00a1ec>
 800a49c:	9007883a 	mov	r3,r18
 800a4a0:	003fb006 	br	800a364 <__alt_data_end+0xfc00a364>
 800a4a4:	1800531e 	bne	r3,zero,800a5f4 <__adddf3+0x48c>
 800a4a8:	80800044 	addi	r2,r16,1
 800a4ac:	1081ffcc 	andi	r2,r2,2047
 800a4b0:	00c00044 	movi	r3,1
 800a4b4:	1880990e 	bge	r3,r2,800a71c <__adddf3+0x5b4>
 800a4b8:	8985c83a 	sub	r2,r17,r6
 800a4bc:	8887803a 	cmpltu	r3,r17,r2
 800a4c0:	2a27c83a 	sub	r19,r5,r8
 800a4c4:	98e7c83a 	sub	r19,r19,r3
 800a4c8:	98c0202c 	andhi	r3,r19,128
 800a4cc:	18006226 	beq	r3,zero,800a658 <__adddf3+0x4f0>
 800a4d0:	3463c83a 	sub	r17,r6,r17
 800a4d4:	4151c83a 	sub	r8,r8,r5
 800a4d8:	344d803a 	cmpltu	r6,r6,r17
 800a4dc:	41a7c83a 	sub	r19,r8,r6
 800a4e0:	3825883a 	mov	r18,r7
 800a4e4:	983f821e 	bne	r19,zero,800a2f0 <__alt_data_end+0xfc00a2f0>
 800a4e8:	8809883a 	mov	r4,r17
 800a4ec:	800c7040 	call	800c704 <__clzsi2>
 800a4f0:	10800804 	addi	r2,r2,32
 800a4f4:	10fffe04 	addi	r3,r2,-8
 800a4f8:	010007c4 	movi	r4,31
 800a4fc:	20ff810e 	bge	r4,r3,800a304 <__alt_data_end+0xfc00a304>
 800a500:	14fff604 	addi	r19,r2,-40
 800a504:	8ce6983a 	sll	r19,r17,r19
 800a508:	0023883a 	mov	r17,zero
 800a50c:	1c3f840e 	bge	r3,r16,800a320 <__alt_data_end+0xfc00a320>
 800a510:	017fe034 	movhi	r5,65408
 800a514:	297fffc4 	addi	r5,r5,-1
 800a518:	80e1c83a 	sub	r16,r16,r3
 800a51c:	994a703a 	and	r5,r19,r5
 800a520:	003f3006 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a524:	0009883a 	mov	r4,zero
 800a528:	0005883a 	mov	r2,zero
 800a52c:	003f4506 	br	800a244 <__alt_data_end+0xfc00a244>
 800a530:	418cb03a 	or	r6,r8,r6
 800a534:	300cc03a 	cmpne	r6,r6,zero
 800a538:	0007883a 	mov	r3,zero
 800a53c:	003f6106 	br	800a2c4 <__alt_data_end+0xfc00a2c4>
 800a540:	2000921e 	bne	r4,zero,800a78c <__adddf3+0x624>
 800a544:	80800044 	addi	r2,r16,1
 800a548:	11c1ffcc 	andi	r7,r2,2047
 800a54c:	01000044 	movi	r4,1
 800a550:	21c0610e 	bge	r4,r7,800a6d8 <__adddf3+0x570>
 800a554:	0101ffc4 	movi	r4,2047
 800a558:	1100a326 	beq	r2,r4,800a7e8 <__adddf3+0x680>
 800a55c:	344d883a 	add	r6,r6,r17
 800a560:	3463803a 	cmpltu	r17,r6,r17
 800a564:	414b883a 	add	r5,r8,r5
 800a568:	2c4b883a 	add	r5,r5,r17
 800a56c:	282297fa 	slli	r17,r5,31
 800a570:	300cd07a 	srli	r6,r6,1
 800a574:	280ad07a 	srli	r5,r5,1
 800a578:	1021883a 	mov	r16,r2
 800a57c:	89a2b03a 	or	r17,r17,r6
 800a580:	003f1806 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a584:	0081ffc4 	movi	r2,2047
 800a588:	80bf411e 	bne	r16,r2,800a290 <__alt_data_end+0xfc00a290>
 800a58c:	003f1506 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a590:	80bff844 	addi	r2,r16,-31
 800a594:	00c00804 	movi	r3,32
 800a598:	9884d83a 	srl	r2,r19,r2
 800a59c:	28c04a26 	beq	r5,r3,800a6c8 <__adddf3+0x560>
 800a5a0:	00c00fc4 	movi	r3,63
 800a5a4:	1c21c83a 	sub	r16,r3,r16
 800a5a8:	9c26983a 	sll	r19,r19,r16
 800a5ac:	9c62b03a 	or	r17,r19,r17
 800a5b0:	8822c03a 	cmpne	r17,r17,zero
 800a5b4:	88a2b03a 	or	r17,r17,r2
 800a5b8:	000b883a 	mov	r5,zero
 800a5bc:	0021883a 	mov	r16,zero
 800a5c0:	003fb406 	br	800a494 <__alt_data_end+0xfc00a494>
 800a5c4:	18bff804 	addi	r2,r3,-32
 800a5c8:	01000804 	movi	r4,32
 800a5cc:	4084d83a 	srl	r2,r8,r2
 800a5d0:	19003f26 	beq	r3,r4,800a6d0 <__adddf3+0x568>
 800a5d4:	01001004 	movi	r4,64
 800a5d8:	20c7c83a 	sub	r3,r4,r3
 800a5dc:	40d0983a 	sll	r8,r8,r3
 800a5e0:	418cb03a 	or	r6,r8,r6
 800a5e4:	300cc03a 	cmpne	r6,r6,zero
 800a5e8:	308cb03a 	or	r6,r6,r2
 800a5ec:	0007883a 	mov	r3,zero
 800a5f0:	003f3406 	br	800a2c4 <__alt_data_end+0xfc00a2c4>
 800a5f4:	80002326 	beq	r16,zero,800a684 <__adddf3+0x51c>
 800a5f8:	0101ffc4 	movi	r4,2047
 800a5fc:	11005e26 	beq	r2,r4,800a778 <__adddf3+0x610>
 800a600:	00c7c83a 	sub	r3,zero,r3
 800a604:	29402034 	orhi	r5,r5,128
 800a608:	01000e04 	movi	r4,56
 800a60c:	20c07216 	blt	r4,r3,800a7d8 <__adddf3+0x670>
 800a610:	010007c4 	movi	r4,31
 800a614:	20c0ce16 	blt	r4,r3,800a950 <__adddf3+0x7e8>
 800a618:	01000804 	movi	r4,32
 800a61c:	20c9c83a 	sub	r4,r4,r3
 800a620:	2914983a 	sll	r10,r5,r4
 800a624:	88d2d83a 	srl	r9,r17,r3
 800a628:	8908983a 	sll	r4,r17,r4
 800a62c:	28c6d83a 	srl	r3,r5,r3
 800a630:	5262b03a 	or	r17,r10,r9
 800a634:	2008c03a 	cmpne	r4,r4,zero
 800a638:	8922b03a 	or	r17,r17,r4
 800a63c:	3463c83a 	sub	r17,r6,r17
 800a640:	40c7c83a 	sub	r3,r8,r3
 800a644:	344d803a 	cmpltu	r6,r6,r17
 800a648:	198bc83a 	sub	r5,r3,r6
 800a64c:	1021883a 	mov	r16,r2
 800a650:	3825883a 	mov	r18,r7
 800a654:	003f2006 	br	800a2d8 <__alt_data_end+0xfc00a2d8>
 800a658:	9886b03a 	or	r3,r19,r2
 800a65c:	1800141e 	bne	r3,zero,800a6b0 <__adddf3+0x548>
 800a660:	0007883a 	mov	r3,zero
 800a664:	000b883a 	mov	r5,zero
 800a668:	0023883a 	mov	r17,zero
 800a66c:	0021883a 	mov	r16,zero
 800a670:	003f3c06 	br	800a364 <__alt_data_end+0xfc00a364>
 800a674:	418cb03a 	or	r6,r8,r6
 800a678:	300cc03a 	cmpne	r6,r6,zero
 800a67c:	0011883a 	mov	r8,zero
 800a680:	003f5606 	br	800a3dc <__alt_data_end+0xfc00a3dc>
 800a684:	2c48b03a 	or	r4,r5,r17
 800a688:	20003b26 	beq	r4,zero,800a778 <__adddf3+0x610>
 800a68c:	00c6303a 	nor	r3,zero,r3
 800a690:	1800371e 	bne	r3,zero,800a770 <__adddf3+0x608>
 800a694:	3463c83a 	sub	r17,r6,r17
 800a698:	414bc83a 	sub	r5,r8,r5
 800a69c:	344d803a 	cmpltu	r6,r6,r17
 800a6a0:	298bc83a 	sub	r5,r5,r6
 800a6a4:	1021883a 	mov	r16,r2
 800a6a8:	3825883a 	mov	r18,r7
 800a6ac:	003f0a06 	br	800a2d8 <__alt_data_end+0xfc00a2d8>
 800a6b0:	1023883a 	mov	r17,r2
 800a6b4:	003f0d06 	br	800a2ec <__alt_data_end+0xfc00a2ec>
 800a6b8:	0007883a 	mov	r3,zero
 800a6bc:	000b883a 	mov	r5,zero
 800a6c0:	0023883a 	mov	r17,zero
 800a6c4:	003f2706 	br	800a364 <__alt_data_end+0xfc00a364>
 800a6c8:	0027883a 	mov	r19,zero
 800a6cc:	003fb706 	br	800a5ac <__alt_data_end+0xfc00a5ac>
 800a6d0:	0011883a 	mov	r8,zero
 800a6d4:	003fc206 	br	800a5e0 <__alt_data_end+0xfc00a5e0>
 800a6d8:	2c44b03a 	or	r2,r5,r17
 800a6dc:	8000871e 	bne	r16,zero,800a8fc <__adddf3+0x794>
 800a6e0:	1000b126 	beq	r2,zero,800a9a8 <__adddf3+0x840>
 800a6e4:	4184b03a 	or	r2,r8,r6
 800a6e8:	103ebe26 	beq	r2,zero,800a1e4 <__alt_data_end+0xfc00a1e4>
 800a6ec:	3445883a 	add	r2,r6,r17
 800a6f0:	1463803a 	cmpltu	r17,r2,r17
 800a6f4:	414b883a 	add	r5,r8,r5
 800a6f8:	2c4b883a 	add	r5,r5,r17
 800a6fc:	28c0202c 	andhi	r3,r5,128
 800a700:	1023883a 	mov	r17,r2
 800a704:	183f6326 	beq	r3,zero,800a494 <__alt_data_end+0xfc00a494>
 800a708:	00bfe034 	movhi	r2,65408
 800a70c:	10bfffc4 	addi	r2,r2,-1
 800a710:	2021883a 	mov	r16,r4
 800a714:	288a703a 	and	r5,r5,r2
 800a718:	003eb206 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a71c:	2c44b03a 	or	r2,r5,r17
 800a720:	8000251e 	bne	r16,zero,800a7b8 <__adddf3+0x650>
 800a724:	10004b1e 	bne	r2,zero,800a854 <__adddf3+0x6ec>
 800a728:	4184b03a 	or	r2,r8,r6
 800a72c:	103fe226 	beq	r2,zero,800a6b8 <__alt_data_end+0xfc00a6b8>
 800a730:	400b883a 	mov	r5,r8
 800a734:	3023883a 	mov	r17,r6
 800a738:	3825883a 	mov	r18,r7
 800a73c:	003ea906 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a740:	20bff804 	addi	r2,r4,-32
 800a744:	01c00804 	movi	r7,32
 800a748:	4084d83a 	srl	r2,r8,r2
 800a74c:	21c07e26 	beq	r4,r7,800a948 <__adddf3+0x7e0>
 800a750:	01c01004 	movi	r7,64
 800a754:	3909c83a 	sub	r4,r7,r4
 800a758:	4110983a 	sll	r8,r8,r4
 800a75c:	418cb03a 	or	r6,r8,r6
 800a760:	300cc03a 	cmpne	r6,r6,zero
 800a764:	308cb03a 	or	r6,r6,r2
 800a768:	0011883a 	mov	r8,zero
 800a76c:	003f1b06 	br	800a3dc <__alt_data_end+0xfc00a3dc>
 800a770:	0101ffc4 	movi	r4,2047
 800a774:	113fa41e 	bne	r2,r4,800a608 <__alt_data_end+0xfc00a608>
 800a778:	400b883a 	mov	r5,r8
 800a77c:	3023883a 	mov	r17,r6
 800a780:	1021883a 	mov	r16,r2
 800a784:	3825883a 	mov	r18,r7
 800a788:	003e9606 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a78c:	80001a1e 	bne	r16,zero,800a7f8 <__adddf3+0x690>
 800a790:	2c4eb03a 	or	r7,r5,r17
 800a794:	38005526 	beq	r7,zero,800a8ec <__adddf3+0x784>
 800a798:	0108303a 	nor	r4,zero,r4
 800a79c:	2000511e 	bne	r4,zero,800a8e4 <__adddf3+0x77c>
 800a7a0:	89a3883a 	add	r17,r17,r6
 800a7a4:	414b883a 	add	r5,r8,r5
 800a7a8:	898d803a 	cmpltu	r6,r17,r6
 800a7ac:	298b883a 	add	r5,r5,r6
 800a7b0:	1021883a 	mov	r16,r2
 800a7b4:	003f0e06 	br	800a3f0 <__alt_data_end+0xfc00a3f0>
 800a7b8:	1000341e 	bne	r2,zero,800a88c <__adddf3+0x724>
 800a7bc:	4184b03a 	or	r2,r8,r6
 800a7c0:	10006f26 	beq	r2,zero,800a980 <__adddf3+0x818>
 800a7c4:	400b883a 	mov	r5,r8
 800a7c8:	3023883a 	mov	r17,r6
 800a7cc:	3825883a 	mov	r18,r7
 800a7d0:	0401ffc4 	movi	r16,2047
 800a7d4:	003e8306 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a7d8:	2c62b03a 	or	r17,r5,r17
 800a7dc:	8822c03a 	cmpne	r17,r17,zero
 800a7e0:	0007883a 	mov	r3,zero
 800a7e4:	003f9506 	br	800a63c <__alt_data_end+0xfc00a63c>
 800a7e8:	1021883a 	mov	r16,r2
 800a7ec:	000b883a 	mov	r5,zero
 800a7f0:	0023883a 	mov	r17,zero
 800a7f4:	003edb06 	br	800a364 <__alt_data_end+0xfc00a364>
 800a7f8:	01c1ffc4 	movi	r7,2047
 800a7fc:	11c03b26 	beq	r2,r7,800a8ec <__adddf3+0x784>
 800a800:	0109c83a 	sub	r4,zero,r4
 800a804:	29402034 	orhi	r5,r5,128
 800a808:	01c00e04 	movi	r7,56
 800a80c:	39006216 	blt	r7,r4,800a998 <__adddf3+0x830>
 800a810:	01c007c4 	movi	r7,31
 800a814:	39006b16 	blt	r7,r4,800a9c4 <__adddf3+0x85c>
 800a818:	01c00804 	movi	r7,32
 800a81c:	390fc83a 	sub	r7,r7,r4
 800a820:	29d4983a 	sll	r10,r5,r7
 800a824:	8912d83a 	srl	r9,r17,r4
 800a828:	89ce983a 	sll	r7,r17,r7
 800a82c:	2908d83a 	srl	r4,r5,r4
 800a830:	5262b03a 	or	r17,r10,r9
 800a834:	380ac03a 	cmpne	r5,r7,zero
 800a838:	8962b03a 	or	r17,r17,r5
 800a83c:	89a3883a 	add	r17,r17,r6
 800a840:	2211883a 	add	r8,r4,r8
 800a844:	898d803a 	cmpltu	r6,r17,r6
 800a848:	418b883a 	add	r5,r8,r6
 800a84c:	1021883a 	mov	r16,r2
 800a850:	003ee706 	br	800a3f0 <__alt_data_end+0xfc00a3f0>
 800a854:	4184b03a 	or	r2,r8,r6
 800a858:	103e6226 	beq	r2,zero,800a1e4 <__alt_data_end+0xfc00a1e4>
 800a85c:	8987c83a 	sub	r3,r17,r6
 800a860:	88c9803a 	cmpltu	r4,r17,r3
 800a864:	2a05c83a 	sub	r2,r5,r8
 800a868:	1105c83a 	sub	r2,r2,r4
 800a86c:	1100202c 	andhi	r4,r2,128
 800a870:	203f0426 	beq	r4,zero,800a484 <__alt_data_end+0xfc00a484>
 800a874:	3463c83a 	sub	r17,r6,r17
 800a878:	414bc83a 	sub	r5,r8,r5
 800a87c:	344d803a 	cmpltu	r6,r6,r17
 800a880:	298bc83a 	sub	r5,r5,r6
 800a884:	3825883a 	mov	r18,r7
 800a888:	003e5606 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a88c:	4184b03a 	or	r2,r8,r6
 800a890:	10002b26 	beq	r2,zero,800a940 <__adddf3+0x7d8>
 800a894:	2804d0fa 	srli	r2,r5,3
 800a898:	8822d0fa 	srli	r17,r17,3
 800a89c:	280a977a 	slli	r5,r5,29
 800a8a0:	10c0022c 	andhi	r3,r2,8
 800a8a4:	2c62b03a 	or	r17,r5,r17
 800a8a8:	18000826 	beq	r3,zero,800a8cc <__adddf3+0x764>
 800a8ac:	4008d0fa 	srli	r4,r8,3
 800a8b0:	20c0022c 	andhi	r3,r4,8
 800a8b4:	1800051e 	bne	r3,zero,800a8cc <__adddf3+0x764>
 800a8b8:	300cd0fa 	srli	r6,r6,3
 800a8bc:	4010977a 	slli	r8,r8,29
 800a8c0:	2005883a 	mov	r2,r4
 800a8c4:	3825883a 	mov	r18,r7
 800a8c8:	41a2b03a 	or	r17,r8,r6
 800a8cc:	880ad77a 	srli	r5,r17,29
 800a8d0:	100490fa 	slli	r2,r2,3
 800a8d4:	882290fa 	slli	r17,r17,3
 800a8d8:	0401ffc4 	movi	r16,2047
 800a8dc:	288ab03a 	or	r5,r5,r2
 800a8e0:	003e4006 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a8e4:	01c1ffc4 	movi	r7,2047
 800a8e8:	11ffc71e 	bne	r2,r7,800a808 <__alt_data_end+0xfc00a808>
 800a8ec:	400b883a 	mov	r5,r8
 800a8f0:	3023883a 	mov	r17,r6
 800a8f4:	1021883a 	mov	r16,r2
 800a8f8:	003e3a06 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a8fc:	10002d26 	beq	r2,zero,800a9b4 <__adddf3+0x84c>
 800a900:	4184b03a 	or	r2,r8,r6
 800a904:	10000e26 	beq	r2,zero,800a940 <__adddf3+0x7d8>
 800a908:	2804d0fa 	srli	r2,r5,3
 800a90c:	8822d0fa 	srli	r17,r17,3
 800a910:	280a977a 	slli	r5,r5,29
 800a914:	10c0022c 	andhi	r3,r2,8
 800a918:	2c62b03a 	or	r17,r5,r17
 800a91c:	183feb26 	beq	r3,zero,800a8cc <__alt_data_end+0xfc00a8cc>
 800a920:	4008d0fa 	srli	r4,r8,3
 800a924:	20c0022c 	andhi	r3,r4,8
 800a928:	183fe81e 	bne	r3,zero,800a8cc <__alt_data_end+0xfc00a8cc>
 800a92c:	300cd0fa 	srli	r6,r6,3
 800a930:	4010977a 	slli	r8,r8,29
 800a934:	2005883a 	mov	r2,r4
 800a938:	41a2b03a 	or	r17,r8,r6
 800a93c:	003fe306 	br	800a8cc <__alt_data_end+0xfc00a8cc>
 800a940:	0401ffc4 	movi	r16,2047
 800a944:	003e2706 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a948:	0011883a 	mov	r8,zero
 800a94c:	003f8306 	br	800a75c <__alt_data_end+0xfc00a75c>
 800a950:	193ff804 	addi	r4,r3,-32
 800a954:	02400804 	movi	r9,32
 800a958:	2908d83a 	srl	r4,r5,r4
 800a95c:	1a402526 	beq	r3,r9,800a9f4 <__adddf3+0x88c>
 800a960:	02401004 	movi	r9,64
 800a964:	48c7c83a 	sub	r3,r9,r3
 800a968:	28ca983a 	sll	r5,r5,r3
 800a96c:	2c62b03a 	or	r17,r5,r17
 800a970:	8822c03a 	cmpne	r17,r17,zero
 800a974:	8922b03a 	or	r17,r17,r4
 800a978:	0007883a 	mov	r3,zero
 800a97c:	003f2f06 	br	800a63c <__alt_data_end+0xfc00a63c>
 800a980:	01402034 	movhi	r5,128
 800a984:	0007883a 	mov	r3,zero
 800a988:	297fffc4 	addi	r5,r5,-1
 800a98c:	047ffe04 	movi	r17,-8
 800a990:	0401ffc4 	movi	r16,2047
 800a994:	003e7306 	br	800a364 <__alt_data_end+0xfc00a364>
 800a998:	2c62b03a 	or	r17,r5,r17
 800a99c:	8822c03a 	cmpne	r17,r17,zero
 800a9a0:	0009883a 	mov	r4,zero
 800a9a4:	003fa506 	br	800a83c <__alt_data_end+0xfc00a83c>
 800a9a8:	400b883a 	mov	r5,r8
 800a9ac:	3023883a 	mov	r17,r6
 800a9b0:	003e0c06 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a9b4:	400b883a 	mov	r5,r8
 800a9b8:	3023883a 	mov	r17,r6
 800a9bc:	0401ffc4 	movi	r16,2047
 800a9c0:	003e0806 	br	800a1e4 <__alt_data_end+0xfc00a1e4>
 800a9c4:	21fff804 	addi	r7,r4,-32
 800a9c8:	02400804 	movi	r9,32
 800a9cc:	29ced83a 	srl	r7,r5,r7
 800a9d0:	22400a26 	beq	r4,r9,800a9fc <__adddf3+0x894>
 800a9d4:	02401004 	movi	r9,64
 800a9d8:	4909c83a 	sub	r4,r9,r4
 800a9dc:	290a983a 	sll	r5,r5,r4
 800a9e0:	2c62b03a 	or	r17,r5,r17
 800a9e4:	8822c03a 	cmpne	r17,r17,zero
 800a9e8:	89e2b03a 	or	r17,r17,r7
 800a9ec:	0009883a 	mov	r4,zero
 800a9f0:	003f9206 	br	800a83c <__alt_data_end+0xfc00a83c>
 800a9f4:	000b883a 	mov	r5,zero
 800a9f8:	003fdc06 	br	800a96c <__alt_data_end+0xfc00a96c>
 800a9fc:	000b883a 	mov	r5,zero
 800aa00:	003ff706 	br	800a9e0 <__alt_data_end+0xfc00a9e0>

0800aa04 <__divdf3>:
 800aa04:	defff204 	addi	sp,sp,-56
 800aa08:	dd000815 	stw	r20,32(sp)
 800aa0c:	2828d53a 	srli	r20,r5,20
 800aa10:	dd800a15 	stw	r22,40(sp)
 800aa14:	282cd7fa 	srli	r22,r5,31
 800aa18:	dc000415 	stw	r16,16(sp)
 800aa1c:	04000434 	movhi	r16,16
 800aa20:	df000c15 	stw	fp,48(sp)
 800aa24:	dcc00715 	stw	r19,28(sp)
 800aa28:	dc800615 	stw	r18,24(sp)
 800aa2c:	dc400515 	stw	r17,20(sp)
 800aa30:	843fffc4 	addi	r16,r16,-1
 800aa34:	dfc00d15 	stw	ra,52(sp)
 800aa38:	ddc00b15 	stw	r23,44(sp)
 800aa3c:	dd400915 	stw	r21,36(sp)
 800aa40:	a501ffcc 	andi	r20,r20,2047
 800aa44:	2025883a 	mov	r18,r4
 800aa48:	2027883a 	mov	r19,r4
 800aa4c:	2c22703a 	and	r17,r5,r16
 800aa50:	b7003fcc 	andi	fp,r22,255
 800aa54:	a0005e26 	beq	r20,zero,800abd0 <__divdf3+0x1cc>
 800aa58:	0081ffc4 	movi	r2,2047
 800aa5c:	a0803526 	beq	r20,r2,800ab34 <__divdf3+0x130>
 800aa60:	8c000434 	orhi	r16,r17,16
 800aa64:	2004d77a 	srli	r2,r4,29
 800aa68:	802090fa 	slli	r16,r16,3
 800aa6c:	202690fa 	slli	r19,r4,3
 800aa70:	a53f0044 	addi	r20,r20,-1023
 800aa74:	80a2b03a 	or	r17,r16,r2
 800aa78:	0025883a 	mov	r18,zero
 800aa7c:	0011883a 	mov	r8,zero
 800aa80:	380ad53a 	srli	r5,r7,20
 800aa84:	382ed7fa 	srli	r23,r7,31
 800aa88:	04000434 	movhi	r16,16
 800aa8c:	843fffc4 	addi	r16,r16,-1
 800aa90:	2941ffcc 	andi	r5,r5,2047
 800aa94:	302b883a 	mov	r21,r6
 800aa98:	3c20703a 	and	r16,r7,r16
 800aa9c:	ba403fcc 	andi	r9,r23,255
 800aaa0:	28006726 	beq	r5,zero,800ac40 <__divdf3+0x23c>
 800aaa4:	0081ffc4 	movi	r2,2047
 800aaa8:	28805f26 	beq	r5,r2,800ac28 <__divdf3+0x224>
 800aaac:	84000434 	orhi	r16,r16,16
 800aab0:	3004d77a 	srli	r2,r6,29
 800aab4:	802090fa 	slli	r16,r16,3
 800aab8:	302a90fa 	slli	r21,r6,3
 800aabc:	297f0044 	addi	r5,r5,-1023
 800aac0:	80a0b03a 	or	r16,r16,r2
 800aac4:	000f883a 	mov	r7,zero
 800aac8:	3c86b03a 	or	r3,r7,r18
 800aacc:	180690ba 	slli	r3,r3,2
 800aad0:	00820074 	movhi	r2,2049
 800aad4:	10aabd04 	addi	r2,r2,-21772
 800aad8:	1887883a 	add	r3,r3,r2
 800aadc:	18c00017 	ldw	r3,0(r3)
 800aae0:	b5c8f03a 	xor	r4,r22,r23
 800aae4:	200d883a 	mov	r6,r4
 800aae8:	24803fcc 	andi	r18,r4,255
 800aaec:	a169c83a 	sub	r20,r20,r5
 800aaf0:	1800683a 	jmp	r3
 800aaf4:	0800ad3c 	xorhi	zero,at,692
 800aaf8:	0800ab6c 	andhi	zero,at,685
 800aafc:	0800ad00 	call	800ad0 <__alt_mem_sdram-0x77ff530>
 800ab00:	0800ab50 	cmplti	zero,at,685
 800ab04:	0800ad00 	call	800ad0 <__alt_mem_sdram-0x77ff530>
 800ab08:	0800acd4 	ori	zero,at,691
 800ab0c:	0800ad00 	call	800ad0 <__alt_mem_sdram-0x77ff530>
 800ab10:	0800ab50 	cmplti	zero,at,685
 800ab14:	0800ab6c 	andhi	zero,at,685
 800ab18:	0800ab6c 	andhi	zero,at,685
 800ab1c:	0800acd4 	ori	zero,at,691
 800ab20:	0800ab50 	cmplti	zero,at,685
 800ab24:	0800ab60 	cmpeqi	zero,at,685
 800ab28:	0800ab60 	cmpeqi	zero,at,685
 800ab2c:	0800ab60 	cmpeqi	zero,at,685
 800ab30:	0800ad10 	cmplti	zero,at,692
 800ab34:	8904b03a 	or	r2,r17,r4
 800ab38:	1000631e 	bne	r2,zero,800acc8 <__divdf3+0x2c4>
 800ab3c:	04800204 	movi	r18,8
 800ab40:	0023883a 	mov	r17,zero
 800ab44:	0027883a 	mov	r19,zero
 800ab48:	02000084 	movi	r8,2
 800ab4c:	003fcc06 	br	800aa80 <__alt_data_end+0xfc00aa80>
 800ab50:	8023883a 	mov	r17,r16
 800ab54:	a827883a 	mov	r19,r21
 800ab58:	4839883a 	mov	fp,r9
 800ab5c:	3811883a 	mov	r8,r7
 800ab60:	00800084 	movi	r2,2
 800ab64:	40812a1e 	bne	r8,r2,800b010 <__divdf3+0x60c>
 800ab68:	e025883a 	mov	r18,fp
 800ab6c:	9180004c 	andi	r6,r18,1
 800ab70:	0101ffc4 	movi	r4,2047
 800ab74:	000b883a 	mov	r5,zero
 800ab78:	0027883a 	mov	r19,zero
 800ab7c:	2008953a 	slli	r4,r4,20
 800ab80:	30c03fcc 	andi	r3,r6,255
 800ab84:	04000434 	movhi	r16,16
 800ab88:	180697fa 	slli	r3,r3,31
 800ab8c:	843fffc4 	addi	r16,r16,-1
 800ab90:	2c20703a 	and	r16,r5,r16
 800ab94:	8120b03a 	or	r16,r16,r4
 800ab98:	80c6b03a 	or	r3,r16,r3
 800ab9c:	9805883a 	mov	r2,r19
 800aba0:	dfc00d17 	ldw	ra,52(sp)
 800aba4:	df000c17 	ldw	fp,48(sp)
 800aba8:	ddc00b17 	ldw	r23,44(sp)
 800abac:	dd800a17 	ldw	r22,40(sp)
 800abb0:	dd400917 	ldw	r21,36(sp)
 800abb4:	dd000817 	ldw	r20,32(sp)
 800abb8:	dcc00717 	ldw	r19,28(sp)
 800abbc:	dc800617 	ldw	r18,24(sp)
 800abc0:	dc400517 	ldw	r17,20(sp)
 800abc4:	dc000417 	ldw	r16,16(sp)
 800abc8:	dec00e04 	addi	sp,sp,56
 800abcc:	f800283a 	ret
 800abd0:	8904b03a 	or	r2,r17,r4
 800abd4:	10003726 	beq	r2,zero,800acb4 <__divdf3+0x2b0>
 800abd8:	88011c26 	beq	r17,zero,800b04c <__divdf3+0x648>
 800abdc:	8809883a 	mov	r4,r17
 800abe0:	d9800315 	stw	r6,12(sp)
 800abe4:	d9c00115 	stw	r7,4(sp)
 800abe8:	800c7040 	call	800c704 <__clzsi2>
 800abec:	d9800317 	ldw	r6,12(sp)
 800abf0:	d9c00117 	ldw	r7,4(sp)
 800abf4:	1007883a 	mov	r3,r2
 800abf8:	01000a04 	movi	r4,40
 800abfc:	1cfffe04 	addi	r19,r3,-8
 800ac00:	20c9c83a 	sub	r4,r4,r3
 800ac04:	8cca983a 	sll	r5,r17,r19
 800ac08:	9108d83a 	srl	r4,r18,r4
 800ac0c:	94e6983a 	sll	r19,r18,r19
 800ac10:	2162b03a 	or	r17,r4,r5
 800ac14:	053f0344 	movi	r20,-1011
 800ac18:	a0e9c83a 	sub	r20,r20,r3
 800ac1c:	0025883a 	mov	r18,zero
 800ac20:	0011883a 	mov	r8,zero
 800ac24:	003f9606 	br	800aa80 <__alt_data_end+0xfc00aa80>
 800ac28:	8184b03a 	or	r2,r16,r6
 800ac2c:	10001f1e 	bne	r2,zero,800acac <__divdf3+0x2a8>
 800ac30:	0021883a 	mov	r16,zero
 800ac34:	002b883a 	mov	r21,zero
 800ac38:	01c00084 	movi	r7,2
 800ac3c:	003fa206 	br	800aac8 <__alt_data_end+0xfc00aac8>
 800ac40:	8184b03a 	or	r2,r16,r6
 800ac44:	10001526 	beq	r2,zero,800ac9c <__divdf3+0x298>
 800ac48:	80010c26 	beq	r16,zero,800b07c <__divdf3+0x678>
 800ac4c:	8009883a 	mov	r4,r16
 800ac50:	d9800315 	stw	r6,12(sp)
 800ac54:	da000215 	stw	r8,8(sp)
 800ac58:	da400015 	stw	r9,0(sp)
 800ac5c:	800c7040 	call	800c704 <__clzsi2>
 800ac60:	d9800317 	ldw	r6,12(sp)
 800ac64:	da000217 	ldw	r8,8(sp)
 800ac68:	da400017 	ldw	r9,0(sp)
 800ac6c:	1007883a 	mov	r3,r2
 800ac70:	01000a04 	movi	r4,40
 800ac74:	1d7ffe04 	addi	r21,r3,-8
 800ac78:	20c9c83a 	sub	r4,r4,r3
 800ac7c:	8560983a 	sll	r16,r16,r21
 800ac80:	3108d83a 	srl	r4,r6,r4
 800ac84:	356a983a 	sll	r21,r6,r21
 800ac88:	2420b03a 	or	r16,r4,r16
 800ac8c:	017f0344 	movi	r5,-1011
 800ac90:	28cbc83a 	sub	r5,r5,r3
 800ac94:	000f883a 	mov	r7,zero
 800ac98:	003f8b06 	br	800aac8 <__alt_data_end+0xfc00aac8>
 800ac9c:	0021883a 	mov	r16,zero
 800aca0:	002b883a 	mov	r21,zero
 800aca4:	01c00044 	movi	r7,1
 800aca8:	003f8706 	br	800aac8 <__alt_data_end+0xfc00aac8>
 800acac:	01c000c4 	movi	r7,3
 800acb0:	003f8506 	br	800aac8 <__alt_data_end+0xfc00aac8>
 800acb4:	04800104 	movi	r18,4
 800acb8:	0023883a 	mov	r17,zero
 800acbc:	0027883a 	mov	r19,zero
 800acc0:	02000044 	movi	r8,1
 800acc4:	003f6e06 	br	800aa80 <__alt_data_end+0xfc00aa80>
 800acc8:	04800304 	movi	r18,12
 800accc:	020000c4 	movi	r8,3
 800acd0:	003f6b06 	br	800aa80 <__alt_data_end+0xfc00aa80>
 800acd4:	01400434 	movhi	r5,16
 800acd8:	000d883a 	mov	r6,zero
 800acdc:	297fffc4 	addi	r5,r5,-1
 800ace0:	04ffffc4 	movi	r19,-1
 800ace4:	0101ffc4 	movi	r4,2047
 800ace8:	003fa406 	br	800ab7c <__alt_data_end+0xfc00ab7c>
 800acec:	043f0084 	movi	r16,-1022
 800acf0:	8521c83a 	sub	r16,r16,r20
 800acf4:	00800e04 	movi	r2,56
 800acf8:	1401200e 	bge	r2,r16,800b17c <__divdf3+0x778>
 800acfc:	9180004c 	andi	r6,r18,1
 800ad00:	0009883a 	mov	r4,zero
 800ad04:	000b883a 	mov	r5,zero
 800ad08:	0027883a 	mov	r19,zero
 800ad0c:	003f9b06 	br	800ab7c <__alt_data_end+0xfc00ab7c>
 800ad10:	8880022c 	andhi	r2,r17,8
 800ad14:	1000c726 	beq	r2,zero,800b034 <__divdf3+0x630>
 800ad18:	8080022c 	andhi	r2,r16,8
 800ad1c:	1000c51e 	bne	r2,zero,800b034 <__divdf3+0x630>
 800ad20:	00800434 	movhi	r2,16
 800ad24:	81400234 	orhi	r5,r16,8
 800ad28:	10bfffc4 	addi	r2,r2,-1
 800ad2c:	b80d883a 	mov	r6,r23
 800ad30:	288a703a 	and	r5,r5,r2
 800ad34:	a827883a 	mov	r19,r21
 800ad38:	003fea06 	br	800ace4 <__alt_data_end+0xfc00ace4>
 800ad3c:	8440ea36 	bltu	r16,r17,800b0e8 <__divdf3+0x6e4>
 800ad40:	8c00e826 	beq	r17,r16,800b0e4 <__divdf3+0x6e0>
 800ad44:	a53fffc4 	addi	r20,r20,-1
 800ad48:	882d883a 	mov	r22,r17
 800ad4c:	000d883a 	mov	r6,zero
 800ad50:	a804d63a 	srli	r2,r21,24
 800ad54:	8020923a 	slli	r16,r16,8
 800ad58:	b009883a 	mov	r4,r22
 800ad5c:	d9800315 	stw	r6,12(sp)
 800ad60:	1420b03a 	or	r16,r2,r16
 800ad64:	802ed43a 	srli	r23,r16,16
 800ad68:	873fffcc 	andi	fp,r16,65535
 800ad6c:	a82a923a 	slli	r21,r21,8
 800ad70:	b80b883a 	mov	r5,r23
 800ad74:	800a1580 	call	800a158 <__udivsi3>
 800ad78:	b009883a 	mov	r4,r22
 800ad7c:	b80b883a 	mov	r5,r23
 800ad80:	1023883a 	mov	r17,r2
 800ad84:	800a1600 	call	800a160 <__umodsi3>
 800ad88:	1004943a 	slli	r2,r2,16
 800ad8c:	9808d43a 	srli	r4,r19,16
 800ad90:	8f2d383a 	mul	r22,r17,fp
 800ad94:	d9800317 	ldw	r6,12(sp)
 800ad98:	1106b03a 	or	r3,r2,r4
 800ad9c:	1d80062e 	bgeu	r3,r22,800adb8 <__divdf3+0x3b4>
 800ada0:	1c07883a 	add	r3,r3,r16
 800ada4:	88bfffc4 	addi	r2,r17,-1
 800ada8:	1c00dc36 	bltu	r3,r16,800b11c <__divdf3+0x718>
 800adac:	1d80db2e 	bgeu	r3,r22,800b11c <__divdf3+0x718>
 800adb0:	8c7fff84 	addi	r17,r17,-2
 800adb4:	1c07883a 	add	r3,r3,r16
 800adb8:	1dadc83a 	sub	r22,r3,r22
 800adbc:	b009883a 	mov	r4,r22
 800adc0:	b80b883a 	mov	r5,r23
 800adc4:	d9800315 	stw	r6,12(sp)
 800adc8:	800a1580 	call	800a158 <__udivsi3>
 800adcc:	b009883a 	mov	r4,r22
 800add0:	b80b883a 	mov	r5,r23
 800add4:	d8800015 	stw	r2,0(sp)
 800add8:	800a1600 	call	800a160 <__umodsi3>
 800addc:	da400017 	ldw	r9,0(sp)
 800ade0:	1004943a 	slli	r2,r2,16
 800ade4:	9cffffcc 	andi	r19,r19,65535
 800ade8:	4f07383a 	mul	r3,r9,fp
 800adec:	14c8b03a 	or	r4,r2,r19
 800adf0:	d9800317 	ldw	r6,12(sp)
 800adf4:	20c0062e 	bgeu	r4,r3,800ae10 <__divdf3+0x40c>
 800adf8:	2409883a 	add	r4,r4,r16
 800adfc:	48bfffc4 	addi	r2,r9,-1
 800ae00:	2400c436 	bltu	r4,r16,800b114 <__divdf3+0x710>
 800ae04:	20c0c32e 	bgeu	r4,r3,800b114 <__divdf3+0x710>
 800ae08:	4a7fff84 	addi	r9,r9,-2
 800ae0c:	2409883a 	add	r4,r4,r16
 800ae10:	8822943a 	slli	r17,r17,16
 800ae14:	a80ed43a 	srli	r7,r21,16
 800ae18:	aa3fffcc 	andi	r8,r21,65535
 800ae1c:	4c62b03a 	or	r17,r9,r17
 800ae20:	8816d43a 	srli	r11,r17,16
 800ae24:	897fffcc 	andi	r5,r17,65535
 800ae28:	2a15383a 	mul	r10,r5,r8
 800ae2c:	5a19383a 	mul	r12,r11,r8
 800ae30:	29cb383a 	mul	r5,r5,r7
 800ae34:	5012d43a 	srli	r9,r10,16
 800ae38:	20c5c83a 	sub	r2,r4,r3
 800ae3c:	614b883a 	add	r5,r12,r5
 800ae40:	2a4b883a 	add	r5,r5,r9
 800ae44:	59c7383a 	mul	r3,r11,r7
 800ae48:	2b00022e 	bgeu	r5,r12,800ae54 <__divdf3+0x450>
 800ae4c:	01000074 	movhi	r4,1
 800ae50:	1907883a 	add	r3,r3,r4
 800ae54:	2808d43a 	srli	r4,r5,16
 800ae58:	280a943a 	slli	r5,r5,16
 800ae5c:	54ffffcc 	andi	r19,r10,65535
 800ae60:	1907883a 	add	r3,r3,r4
 800ae64:	2ccb883a 	add	r5,r5,r19
 800ae68:	10c09336 	bltu	r2,r3,800b0b8 <__divdf3+0x6b4>
 800ae6c:	10c0ad26 	beq	r2,r3,800b124 <__divdf3+0x720>
 800ae70:	10c7c83a 	sub	r3,r2,r3
 800ae74:	3167c83a 	sub	r19,r6,r5
 800ae78:	34ed803a 	cmpltu	r22,r6,r19
 800ae7c:	1dadc83a 	sub	r22,r3,r22
 800ae80:	b400b226 	beq	r22,r16,800b14c <__divdf3+0x748>
 800ae84:	b009883a 	mov	r4,r22
 800ae88:	b80b883a 	mov	r5,r23
 800ae8c:	d9c00115 	stw	r7,4(sp)
 800ae90:	da000215 	stw	r8,8(sp)
 800ae94:	800a1580 	call	800a158 <__udivsi3>
 800ae98:	b009883a 	mov	r4,r22
 800ae9c:	b80b883a 	mov	r5,r23
 800aea0:	d8800315 	stw	r2,12(sp)
 800aea4:	800a1600 	call	800a160 <__umodsi3>
 800aea8:	d9800317 	ldw	r6,12(sp)
 800aeac:	1004943a 	slli	r2,r2,16
 800aeb0:	9808d43a 	srli	r4,r19,16
 800aeb4:	372d383a 	mul	r22,r6,fp
 800aeb8:	d9c00117 	ldw	r7,4(sp)
 800aebc:	1106b03a 	or	r3,r2,r4
 800aec0:	da000217 	ldw	r8,8(sp)
 800aec4:	1d80062e 	bgeu	r3,r22,800aee0 <__divdf3+0x4dc>
 800aec8:	1c07883a 	add	r3,r3,r16
 800aecc:	30bfffc4 	addi	r2,r6,-1
 800aed0:	1c00a036 	bltu	r3,r16,800b154 <__divdf3+0x750>
 800aed4:	1d809f2e 	bgeu	r3,r22,800b154 <__divdf3+0x750>
 800aed8:	31bfff84 	addi	r6,r6,-2
 800aedc:	1c07883a 	add	r3,r3,r16
 800aee0:	1dadc83a 	sub	r22,r3,r22
 800aee4:	b009883a 	mov	r4,r22
 800aee8:	b80b883a 	mov	r5,r23
 800aeec:	d9800315 	stw	r6,12(sp)
 800aef0:	d9c00115 	stw	r7,4(sp)
 800aef4:	da000215 	stw	r8,8(sp)
 800aef8:	800a1580 	call	800a158 <__udivsi3>
 800aefc:	b009883a 	mov	r4,r22
 800af00:	b80b883a 	mov	r5,r23
 800af04:	d8800015 	stw	r2,0(sp)
 800af08:	800a1600 	call	800a160 <__umodsi3>
 800af0c:	da400017 	ldw	r9,0(sp)
 800af10:	1004943a 	slli	r2,r2,16
 800af14:	993fffcc 	andi	r4,r19,65535
 800af18:	4f39383a 	mul	fp,r9,fp
 800af1c:	1106b03a 	or	r3,r2,r4
 800af20:	d9800317 	ldw	r6,12(sp)
 800af24:	d9c00117 	ldw	r7,4(sp)
 800af28:	da000217 	ldw	r8,8(sp)
 800af2c:	1f00062e 	bgeu	r3,fp,800af48 <__divdf3+0x544>
 800af30:	1c07883a 	add	r3,r3,r16
 800af34:	48bfffc4 	addi	r2,r9,-1
 800af38:	1c008836 	bltu	r3,r16,800b15c <__divdf3+0x758>
 800af3c:	1f00872e 	bgeu	r3,fp,800b15c <__divdf3+0x758>
 800af40:	4a7fff84 	addi	r9,r9,-2
 800af44:	1c07883a 	add	r3,r3,r16
 800af48:	3008943a 	slli	r4,r6,16
 800af4c:	1f07c83a 	sub	r3,r3,fp
 800af50:	4926b03a 	or	r19,r9,r4
 800af54:	993fffcc 	andi	r4,r19,65535
 800af58:	980cd43a 	srli	r6,r19,16
 800af5c:	220b383a 	mul	r5,r4,r8
 800af60:	21c5383a 	mul	r2,r4,r7
 800af64:	3211383a 	mul	r8,r6,r8
 800af68:	2808d43a 	srli	r4,r5,16
 800af6c:	31cf383a 	mul	r7,r6,r7
 800af70:	4085883a 	add	r2,r8,r2
 800af74:	1105883a 	add	r2,r2,r4
 800af78:	1200022e 	bgeu	r2,r8,800af84 <__divdf3+0x580>
 800af7c:	01000074 	movhi	r4,1
 800af80:	390f883a 	add	r7,r7,r4
 800af84:	1008d43a 	srli	r4,r2,16
 800af88:	1004943a 	slli	r2,r2,16
 800af8c:	297fffcc 	andi	r5,r5,65535
 800af90:	390f883a 	add	r7,r7,r4
 800af94:	1145883a 	add	r2,r2,r5
 800af98:	19c06536 	bltu	r3,r7,800b130 <__divdf3+0x72c>
 800af9c:	19c09f26 	beq	r3,r7,800b21c <__divdf3+0x818>
 800afa0:	9cc00054 	ori	r19,r19,1
 800afa4:	a100ffc4 	addi	r4,r20,1023
 800afa8:	013f500e 	bge	zero,r4,800acec <__alt_data_end+0xfc00acec>
 800afac:	988001cc 	andi	r2,r19,7
 800afb0:	10000726 	beq	r2,zero,800afd0 <__divdf3+0x5cc>
 800afb4:	98c003cc 	andi	r3,r19,15
 800afb8:	00800104 	movi	r2,4
 800afbc:	18800426 	beq	r3,r2,800afd0 <__divdf3+0x5cc>
 800afc0:	9885883a 	add	r2,r19,r2
 800afc4:	14e1803a 	cmpltu	r16,r2,r19
 800afc8:	8c23883a 	add	r17,r17,r16
 800afcc:	1027883a 	mov	r19,r2
 800afd0:	8880402c 	andhi	r2,r17,256
 800afd4:	10000426 	beq	r2,zero,800afe8 <__divdf3+0x5e4>
 800afd8:	00bfc034 	movhi	r2,65280
 800afdc:	10bfffc4 	addi	r2,r2,-1
 800afe0:	a1010004 	addi	r4,r20,1024
 800afe4:	88a2703a 	and	r17,r17,r2
 800afe8:	0081ff84 	movi	r2,2046
 800afec:	113edf16 	blt	r2,r4,800ab6c <__alt_data_end+0xfc00ab6c>
 800aff0:	9826d0fa 	srli	r19,r19,3
 800aff4:	8804977a 	slli	r2,r17,29
 800aff8:	8820927a 	slli	r16,r17,9
 800affc:	2101ffcc 	andi	r4,r4,2047
 800b000:	14e6b03a 	or	r19,r2,r19
 800b004:	800ad33a 	srli	r5,r16,12
 800b008:	9180004c 	andi	r6,r18,1
 800b00c:	003edb06 	br	800ab7c <__alt_data_end+0xfc00ab7c>
 800b010:	008000c4 	movi	r2,3
 800b014:	4080a826 	beq	r8,r2,800b2b8 <__divdf3+0x8b4>
 800b018:	00800044 	movi	r2,1
 800b01c:	4080551e 	bne	r8,r2,800b174 <__divdf3+0x770>
 800b020:	e00d883a 	mov	r6,fp
 800b024:	0009883a 	mov	r4,zero
 800b028:	000b883a 	mov	r5,zero
 800b02c:	0027883a 	mov	r19,zero
 800b030:	003ed206 	br	800ab7c <__alt_data_end+0xfc00ab7c>
 800b034:	00800434 	movhi	r2,16
 800b038:	89400234 	orhi	r5,r17,8
 800b03c:	10bfffc4 	addi	r2,r2,-1
 800b040:	b00d883a 	mov	r6,r22
 800b044:	288a703a 	and	r5,r5,r2
 800b048:	003f2606 	br	800ace4 <__alt_data_end+0xfc00ace4>
 800b04c:	d9800315 	stw	r6,12(sp)
 800b050:	d9c00115 	stw	r7,4(sp)
 800b054:	800c7040 	call	800c704 <__clzsi2>
 800b058:	10c00804 	addi	r3,r2,32
 800b05c:	010009c4 	movi	r4,39
 800b060:	d9800317 	ldw	r6,12(sp)
 800b064:	d9c00117 	ldw	r7,4(sp)
 800b068:	20fee30e 	bge	r4,r3,800abf8 <__alt_data_end+0xfc00abf8>
 800b06c:	117ffe04 	addi	r5,r2,-8
 800b070:	9162983a 	sll	r17,r18,r5
 800b074:	0027883a 	mov	r19,zero
 800b078:	003ee606 	br	800ac14 <__alt_data_end+0xfc00ac14>
 800b07c:	3009883a 	mov	r4,r6
 800b080:	d9800315 	stw	r6,12(sp)
 800b084:	da000215 	stw	r8,8(sp)
 800b088:	da400015 	stw	r9,0(sp)
 800b08c:	800c7040 	call	800c704 <__clzsi2>
 800b090:	10c00804 	addi	r3,r2,32
 800b094:	010009c4 	movi	r4,39
 800b098:	d9800317 	ldw	r6,12(sp)
 800b09c:	da000217 	ldw	r8,8(sp)
 800b0a0:	da400017 	ldw	r9,0(sp)
 800b0a4:	20fef20e 	bge	r4,r3,800ac70 <__alt_data_end+0xfc00ac70>
 800b0a8:	10bffe04 	addi	r2,r2,-8
 800b0ac:	a8a0983a 	sll	r16,r21,r2
 800b0b0:	002b883a 	mov	r21,zero
 800b0b4:	003ef506 	br	800ac8c <__alt_data_end+0xfc00ac8c>
 800b0b8:	354d883a 	add	r6,r6,r21
 800b0bc:	3549803a 	cmpltu	r4,r6,r21
 800b0c0:	2409883a 	add	r4,r4,r16
 800b0c4:	2089883a 	add	r4,r4,r2
 800b0c8:	88bfffc4 	addi	r2,r17,-1
 800b0cc:	81000c2e 	bgeu	r16,r4,800b100 <__divdf3+0x6fc>
 800b0d0:	20c04436 	bltu	r4,r3,800b1e4 <__divdf3+0x7e0>
 800b0d4:	19006f26 	beq	r3,r4,800b294 <__divdf3+0x890>
 800b0d8:	20c7c83a 	sub	r3,r4,r3
 800b0dc:	1023883a 	mov	r17,r2
 800b0e0:	003f6406 	br	800ae74 <__alt_data_end+0xfc00ae74>
 800b0e4:	9d7f1736 	bltu	r19,r21,800ad44 <__alt_data_end+0xfc00ad44>
 800b0e8:	9806d07a 	srli	r3,r19,1
 800b0ec:	880497fa 	slli	r2,r17,31
 800b0f0:	980c97fa 	slli	r6,r19,31
 800b0f4:	882cd07a 	srli	r22,r17,1
 800b0f8:	18a6b03a 	or	r19,r3,r2
 800b0fc:	003f1406 	br	800ad50 <__alt_data_end+0xfc00ad50>
 800b100:	243ff51e 	bne	r4,r16,800b0d8 <__alt_data_end+0xfc00b0d8>
 800b104:	357ff22e 	bgeu	r6,r21,800b0d0 <__alt_data_end+0xfc00b0d0>
 800b108:	80c7c83a 	sub	r3,r16,r3
 800b10c:	1023883a 	mov	r17,r2
 800b110:	003f5806 	br	800ae74 <__alt_data_end+0xfc00ae74>
 800b114:	1013883a 	mov	r9,r2
 800b118:	003f3d06 	br	800ae10 <__alt_data_end+0xfc00ae10>
 800b11c:	1023883a 	mov	r17,r2
 800b120:	003f2506 	br	800adb8 <__alt_data_end+0xfc00adb8>
 800b124:	317fe436 	bltu	r6,r5,800b0b8 <__alt_data_end+0xfc00b0b8>
 800b128:	0007883a 	mov	r3,zero
 800b12c:	003f5106 	br	800ae74 <__alt_data_end+0xfc00ae74>
 800b130:	1c07883a 	add	r3,r3,r16
 800b134:	993fffc4 	addi	r4,r19,-1
 800b138:	1c000a2e 	bgeu	r3,r16,800b164 <__divdf3+0x760>
 800b13c:	2027883a 	mov	r19,r4
 800b140:	19ff971e 	bne	r3,r7,800afa0 <__alt_data_end+0xfc00afa0>
 800b144:	a8bf961e 	bne	r21,r2,800afa0 <__alt_data_end+0xfc00afa0>
 800b148:	003f9606 	br	800afa4 <__alt_data_end+0xfc00afa4>
 800b14c:	04ffffc4 	movi	r19,-1
 800b150:	003f9406 	br	800afa4 <__alt_data_end+0xfc00afa4>
 800b154:	100d883a 	mov	r6,r2
 800b158:	003f6106 	br	800aee0 <__alt_data_end+0xfc00aee0>
 800b15c:	1013883a 	mov	r9,r2
 800b160:	003f7906 	br	800af48 <__alt_data_end+0xfc00af48>
 800b164:	19c02636 	bltu	r3,r7,800b200 <__divdf3+0x7fc>
 800b168:	38c04d26 	beq	r7,r3,800b2a0 <__divdf3+0x89c>
 800b16c:	2027883a 	mov	r19,r4
 800b170:	003f8b06 	br	800afa0 <__alt_data_end+0xfc00afa0>
 800b174:	e025883a 	mov	r18,fp
 800b178:	003f8a06 	br	800afa4 <__alt_data_end+0xfc00afa4>
 800b17c:	008007c4 	movi	r2,31
 800b180:	14002a16 	blt	r2,r16,800b22c <__divdf3+0x828>
 800b184:	a5010784 	addi	r20,r20,1054
 800b188:	8d04983a 	sll	r2,r17,r20
 800b18c:	9c06d83a 	srl	r3,r19,r16
 800b190:	9d28983a 	sll	r20,r19,r20
 800b194:	8c20d83a 	srl	r16,r17,r16
 800b198:	1886b03a 	or	r3,r3,r2
 800b19c:	a004c03a 	cmpne	r2,r20,zero
 800b1a0:	1884b03a 	or	r2,r3,r2
 800b1a4:	10c001cc 	andi	r3,r2,7
 800b1a8:	18000726 	beq	r3,zero,800b1c8 <__divdf3+0x7c4>
 800b1ac:	110003cc 	andi	r4,r2,15
 800b1b0:	00c00104 	movi	r3,4
 800b1b4:	20c00426 	beq	r4,r3,800b1c8 <__divdf3+0x7c4>
 800b1b8:	10c00104 	addi	r3,r2,4
 800b1bc:	1885803a 	cmpltu	r2,r3,r2
 800b1c0:	80a1883a 	add	r16,r16,r2
 800b1c4:	1805883a 	mov	r2,r3
 800b1c8:	80c0202c 	andhi	r3,r16,128
 800b1cc:	18002d26 	beq	r3,zero,800b284 <__divdf3+0x880>
 800b1d0:	9180004c 	andi	r6,r18,1
 800b1d4:	01000044 	movi	r4,1
 800b1d8:	000b883a 	mov	r5,zero
 800b1dc:	0027883a 	mov	r19,zero
 800b1e0:	003e6606 	br	800ab7c <__alt_data_end+0xfc00ab7c>
 800b1e4:	354d883a 	add	r6,r6,r21
 800b1e8:	356d803a 	cmpltu	r22,r6,r21
 800b1ec:	b42d883a 	add	r22,r22,r16
 800b1f0:	b12d883a 	add	r22,r22,r4
 800b1f4:	8c7fff84 	addi	r17,r17,-2
 800b1f8:	b0c7c83a 	sub	r3,r22,r3
 800b1fc:	003f1d06 	br	800ae74 <__alt_data_end+0xfc00ae74>
 800b200:	ad4b883a 	add	r5,r21,r21
 800b204:	2d6b803a 	cmpltu	r21,r5,r21
 800b208:	ac2b883a 	add	r21,r21,r16
 800b20c:	1d47883a 	add	r3,r3,r21
 800b210:	993fff84 	addi	r4,r19,-2
 800b214:	282b883a 	mov	r21,r5
 800b218:	003fc806 	br	800b13c <__alt_data_end+0xfc00b13c>
 800b21c:	103fc41e 	bne	r2,zero,800b130 <__alt_data_end+0xfc00b130>
 800b220:	002b883a 	mov	r21,zero
 800b224:	a8bf5e1e 	bne	r21,r2,800afa0 <__alt_data_end+0xfc00afa0>
 800b228:	003f5e06 	br	800afa4 <__alt_data_end+0xfc00afa4>
 800b22c:	00bef884 	movi	r2,-1054
 800b230:	1505c83a 	sub	r2,r2,r20
 800b234:	00c00804 	movi	r3,32
 800b238:	8884d83a 	srl	r2,r17,r2
 800b23c:	80c01c26 	beq	r16,r3,800b2b0 <__divdf3+0x8ac>
 800b240:	a0c10f84 	addi	r3,r20,1086
 800b244:	88c6983a 	sll	r3,r17,r3
 800b248:	1cc6b03a 	or	r3,r3,r19
 800b24c:	1806c03a 	cmpne	r3,r3,zero
 800b250:	1884b03a 	or	r2,r3,r2
 800b254:	140001cc 	andi	r16,r2,7
 800b258:	8000061e 	bne	r16,zero,800b274 <__divdf3+0x870>
 800b25c:	000b883a 	mov	r5,zero
 800b260:	1004d0fa 	srli	r2,r2,3
 800b264:	9180004c 	andi	r6,r18,1
 800b268:	0009883a 	mov	r4,zero
 800b26c:	1426b03a 	or	r19,r2,r16
 800b270:	003e4206 	br	800ab7c <__alt_data_end+0xfc00ab7c>
 800b274:	110003cc 	andi	r4,r2,15
 800b278:	00c00104 	movi	r3,4
 800b27c:	0021883a 	mov	r16,zero
 800b280:	20ffcd1e 	bne	r4,r3,800b1b8 <__alt_data_end+0xfc00b1b8>
 800b284:	800a927a 	slli	r5,r16,9
 800b288:	8020977a 	slli	r16,r16,29
 800b28c:	280ad33a 	srli	r5,r5,12
 800b290:	003ff306 	br	800b260 <__alt_data_end+0xfc00b260>
 800b294:	317fd336 	bltu	r6,r5,800b1e4 <__alt_data_end+0xfc00b1e4>
 800b298:	1023883a 	mov	r17,r2
 800b29c:	003fa206 	br	800b128 <__alt_data_end+0xfc00b128>
 800b2a0:	a8bfd736 	bltu	r21,r2,800b200 <__alt_data_end+0xfc00b200>
 800b2a4:	2027883a 	mov	r19,r4
 800b2a8:	a8bf3d1e 	bne	r21,r2,800afa0 <__alt_data_end+0xfc00afa0>
 800b2ac:	003f3d06 	br	800afa4 <__alt_data_end+0xfc00afa4>
 800b2b0:	0007883a 	mov	r3,zero
 800b2b4:	003fe406 	br	800b248 <__alt_data_end+0xfc00b248>
 800b2b8:	00800434 	movhi	r2,16
 800b2bc:	89400234 	orhi	r5,r17,8
 800b2c0:	10bfffc4 	addi	r2,r2,-1
 800b2c4:	e00d883a 	mov	r6,fp
 800b2c8:	288a703a 	and	r5,r5,r2
 800b2cc:	003e8506 	br	800ace4 <__alt_data_end+0xfc00ace4>

0800b2d0 <__eqdf2>:
 800b2d0:	2804d53a 	srli	r2,r5,20
 800b2d4:	3806d53a 	srli	r3,r7,20
 800b2d8:	02000434 	movhi	r8,16
 800b2dc:	423fffc4 	addi	r8,r8,-1
 800b2e0:	1081ffcc 	andi	r2,r2,2047
 800b2e4:	0241ffc4 	movi	r9,2047
 800b2e8:	2a14703a 	and	r10,r5,r8
 800b2ec:	18c1ffcc 	andi	r3,r3,2047
 800b2f0:	3a10703a 	and	r8,r7,r8
 800b2f4:	280ad7fa 	srli	r5,r5,31
 800b2f8:	380ed7fa 	srli	r7,r7,31
 800b2fc:	12400f26 	beq	r2,r9,800b33c <__eqdf2+0x6c>
 800b300:	0241ffc4 	movi	r9,2047
 800b304:	1a400326 	beq	r3,r9,800b314 <__eqdf2+0x44>
 800b308:	10c00526 	beq	r2,r3,800b320 <__eqdf2+0x50>
 800b30c:	00800044 	movi	r2,1
 800b310:	f800283a 	ret
 800b314:	4192b03a 	or	r9,r8,r6
 800b318:	483ffc1e 	bne	r9,zero,800b30c <__alt_data_end+0xfc00b30c>
 800b31c:	10fffb1e 	bne	r2,r3,800b30c <__alt_data_end+0xfc00b30c>
 800b320:	523ffa1e 	bne	r10,r8,800b30c <__alt_data_end+0xfc00b30c>
 800b324:	21bff91e 	bne	r4,r6,800b30c <__alt_data_end+0xfc00b30c>
 800b328:	29c00826 	beq	r5,r7,800b34c <__eqdf2+0x7c>
 800b32c:	103ff71e 	bne	r2,zero,800b30c <__alt_data_end+0xfc00b30c>
 800b330:	5104b03a 	or	r2,r10,r4
 800b334:	1004c03a 	cmpne	r2,r2,zero
 800b338:	f800283a 	ret
 800b33c:	5112b03a 	or	r9,r10,r4
 800b340:	483fef26 	beq	r9,zero,800b300 <__alt_data_end+0xfc00b300>
 800b344:	00800044 	movi	r2,1
 800b348:	f800283a 	ret
 800b34c:	0005883a 	mov	r2,zero
 800b350:	f800283a 	ret

0800b354 <__gedf2>:
 800b354:	2804d53a 	srli	r2,r5,20
 800b358:	3806d53a 	srli	r3,r7,20
 800b35c:	02000434 	movhi	r8,16
 800b360:	423fffc4 	addi	r8,r8,-1
 800b364:	0241ffc4 	movi	r9,2047
 800b368:	1081ffcc 	andi	r2,r2,2047
 800b36c:	2a14703a 	and	r10,r5,r8
 800b370:	1a46703a 	and	r3,r3,r9
 800b374:	3a10703a 	and	r8,r7,r8
 800b378:	280ad7fa 	srli	r5,r5,31
 800b37c:	380ed7fa 	srli	r7,r7,31
 800b380:	12400b26 	beq	r2,r9,800b3b0 <__gedf2+0x5c>
 800b384:	1a401626 	beq	r3,r9,800b3e0 <__gedf2+0x8c>
 800b388:	10000c1e 	bne	r2,zero,800b3bc <__gedf2+0x68>
 800b38c:	5112b03a 	or	r9,r10,r4
 800b390:	4813003a 	cmpeq	r9,r9,zero
 800b394:	4817883a 	mov	r11,r9
 800b398:	18000c1e 	bne	r3,zero,800b3cc <__gedf2+0x78>
 800b39c:	4198b03a 	or	r12,r8,r6
 800b3a0:	60000a1e 	bne	r12,zero,800b3cc <__gedf2+0x78>
 800b3a4:	48001326 	beq	r9,zero,800b3f4 <__gedf2+0xa0>
 800b3a8:	0005883a 	mov	r2,zero
 800b3ac:	f800283a 	ret
 800b3b0:	5112b03a 	or	r9,r10,r4
 800b3b4:	4800191e 	bne	r9,zero,800b41c <__gedf2+0xc8>
 800b3b8:	18800926 	beq	r3,r2,800b3e0 <__gedf2+0x8c>
 800b3bc:	18000b1e 	bne	r3,zero,800b3ec <__gedf2+0x98>
 800b3c0:	4192b03a 	or	r9,r8,r6
 800b3c4:	0017883a 	mov	r11,zero
 800b3c8:	48000a26 	beq	r9,zero,800b3f4 <__gedf2+0xa0>
 800b3cc:	39c03fcc 	andi	r7,r7,255
 800b3d0:	58000726 	beq	r11,zero,800b3f0 <__gedf2+0x9c>
 800b3d4:	3800081e 	bne	r7,zero,800b3f8 <__gedf2+0xa4>
 800b3d8:	00bfffc4 	movi	r2,-1
 800b3dc:	f800283a 	ret
 800b3e0:	4192b03a 	or	r9,r8,r6
 800b3e4:	48000d1e 	bne	r9,zero,800b41c <__gedf2+0xc8>
 800b3e8:	103fe826 	beq	r2,zero,800b38c <__alt_data_end+0xfc00b38c>
 800b3ec:	39c03fcc 	andi	r7,r7,255
 800b3f0:	29c00326 	beq	r5,r7,800b400 <__gedf2+0xac>
 800b3f4:	283ff81e 	bne	r5,zero,800b3d8 <__alt_data_end+0xfc00b3d8>
 800b3f8:	00800044 	movi	r2,1
 800b3fc:	f800283a 	ret
 800b400:	18bffc16 	blt	r3,r2,800b3f4 <__alt_data_end+0xfc00b3f4>
 800b404:	10c00316 	blt	r2,r3,800b414 <__gedf2+0xc0>
 800b408:	42bffa36 	bltu	r8,r10,800b3f4 <__alt_data_end+0xfc00b3f4>
 800b40c:	52000526 	beq	r10,r8,800b424 <__gedf2+0xd0>
 800b410:	523fe52e 	bgeu	r10,r8,800b3a8 <__alt_data_end+0xfc00b3a8>
 800b414:	283ff026 	beq	r5,zero,800b3d8 <__alt_data_end+0xfc00b3d8>
 800b418:	003ff706 	br	800b3f8 <__alt_data_end+0xfc00b3f8>
 800b41c:	00bfff84 	movi	r2,-2
 800b420:	f800283a 	ret
 800b424:	313ff336 	bltu	r6,r4,800b3f4 <__alt_data_end+0xfc00b3f4>
 800b428:	21bfdf2e 	bgeu	r4,r6,800b3a8 <__alt_data_end+0xfc00b3a8>
 800b42c:	283fea26 	beq	r5,zero,800b3d8 <__alt_data_end+0xfc00b3d8>
 800b430:	003ff106 	br	800b3f8 <__alt_data_end+0xfc00b3f8>

0800b434 <__ledf2>:
 800b434:	2804d53a 	srli	r2,r5,20
 800b438:	3810d53a 	srli	r8,r7,20
 800b43c:	00c00434 	movhi	r3,16
 800b440:	18ffffc4 	addi	r3,r3,-1
 800b444:	0241ffc4 	movi	r9,2047
 800b448:	1081ffcc 	andi	r2,r2,2047
 800b44c:	28d4703a 	and	r10,r5,r3
 800b450:	4250703a 	and	r8,r8,r9
 800b454:	38c6703a 	and	r3,r7,r3
 800b458:	280ad7fa 	srli	r5,r5,31
 800b45c:	380ed7fa 	srli	r7,r7,31
 800b460:	12400b26 	beq	r2,r9,800b490 <__ledf2+0x5c>
 800b464:	42401926 	beq	r8,r9,800b4cc <__ledf2+0x98>
 800b468:	10000c1e 	bne	r2,zero,800b49c <__ledf2+0x68>
 800b46c:	5112b03a 	or	r9,r10,r4
 800b470:	4813003a 	cmpeq	r9,r9,zero
 800b474:	4817883a 	mov	r11,r9
 800b478:	40000f26 	beq	r8,zero,800b4b8 <__ledf2+0x84>
 800b47c:	39c03fcc 	andi	r7,r7,255
 800b480:	58001826 	beq	r11,zero,800b4e4 <__ledf2+0xb0>
 800b484:	38000a1e 	bne	r7,zero,800b4b0 <__ledf2+0x7c>
 800b488:	00bfffc4 	movi	r2,-1
 800b48c:	f800283a 	ret
 800b490:	5112b03a 	or	r9,r10,r4
 800b494:	48000f1e 	bne	r9,zero,800b4d4 <__ledf2+0xa0>
 800b498:	40800c26 	beq	r8,r2,800b4cc <__ledf2+0x98>
 800b49c:	4000101e 	bne	r8,zero,800b4e0 <__ledf2+0xac>
 800b4a0:	1992b03a 	or	r9,r3,r6
 800b4a4:	0017883a 	mov	r11,zero
 800b4a8:	483ff41e 	bne	r9,zero,800b47c <__alt_data_end+0xfc00b47c>
 800b4ac:	283ff61e 	bne	r5,zero,800b488 <__alt_data_end+0xfc00b488>
 800b4b0:	00800044 	movi	r2,1
 800b4b4:	f800283a 	ret
 800b4b8:	1998b03a 	or	r12,r3,r6
 800b4bc:	603fef1e 	bne	r12,zero,800b47c <__alt_data_end+0xfc00b47c>
 800b4c0:	483ffa26 	beq	r9,zero,800b4ac <__alt_data_end+0xfc00b4ac>
 800b4c4:	0005883a 	mov	r2,zero
 800b4c8:	f800283a 	ret
 800b4cc:	1992b03a 	or	r9,r3,r6
 800b4d0:	48000226 	beq	r9,zero,800b4dc <__ledf2+0xa8>
 800b4d4:	00800084 	movi	r2,2
 800b4d8:	f800283a 	ret
 800b4dc:	103fe326 	beq	r2,zero,800b46c <__alt_data_end+0xfc00b46c>
 800b4e0:	39c03fcc 	andi	r7,r7,255
 800b4e4:	29fff11e 	bne	r5,r7,800b4ac <__alt_data_end+0xfc00b4ac>
 800b4e8:	40bff016 	blt	r8,r2,800b4ac <__alt_data_end+0xfc00b4ac>
 800b4ec:	12000316 	blt	r2,r8,800b4fc <__ledf2+0xc8>
 800b4f0:	1abfee36 	bltu	r3,r10,800b4ac <__alt_data_end+0xfc00b4ac>
 800b4f4:	50c00326 	beq	r10,r3,800b504 <__ledf2+0xd0>
 800b4f8:	50fff22e 	bgeu	r10,r3,800b4c4 <__alt_data_end+0xfc00b4c4>
 800b4fc:	283fe226 	beq	r5,zero,800b488 <__alt_data_end+0xfc00b488>
 800b500:	003feb06 	br	800b4b0 <__alt_data_end+0xfc00b4b0>
 800b504:	313fe936 	bltu	r6,r4,800b4ac <__alt_data_end+0xfc00b4ac>
 800b508:	21bfee2e 	bgeu	r4,r6,800b4c4 <__alt_data_end+0xfc00b4c4>
 800b50c:	283fde26 	beq	r5,zero,800b488 <__alt_data_end+0xfc00b488>
 800b510:	003fe706 	br	800b4b0 <__alt_data_end+0xfc00b4b0>

0800b514 <__muldf3>:
 800b514:	defff204 	addi	sp,sp,-56
 800b518:	2804d53a 	srli	r2,r5,20
 800b51c:	dd800a15 	stw	r22,40(sp)
 800b520:	282cd7fa 	srli	r22,r5,31
 800b524:	dc000415 	stw	r16,16(sp)
 800b528:	04000434 	movhi	r16,16
 800b52c:	df000c15 	stw	fp,48(sp)
 800b530:	dd000815 	stw	r20,32(sp)
 800b534:	dcc00715 	stw	r19,28(sp)
 800b538:	dc800615 	stw	r18,24(sp)
 800b53c:	dc400515 	stw	r17,20(sp)
 800b540:	843fffc4 	addi	r16,r16,-1
 800b544:	dfc00d15 	stw	ra,52(sp)
 800b548:	ddc00b15 	stw	r23,44(sp)
 800b54c:	dd400915 	stw	r21,36(sp)
 800b550:	1501ffcc 	andi	r20,r2,2047
 800b554:	2023883a 	mov	r17,r4
 800b558:	2025883a 	mov	r18,r4
 800b55c:	2c20703a 	and	r16,r5,r16
 800b560:	b027883a 	mov	r19,r22
 800b564:	b7003fcc 	andi	fp,r22,255
 800b568:	a0005926 	beq	r20,zero,800b6d0 <__muldf3+0x1bc>
 800b56c:	0081ffc4 	movi	r2,2047
 800b570:	a0803426 	beq	r20,r2,800b644 <__muldf3+0x130>
 800b574:	84000434 	orhi	r16,r16,16
 800b578:	2004d77a 	srli	r2,r4,29
 800b57c:	802090fa 	slli	r16,r16,3
 800b580:	202490fa 	slli	r18,r4,3
 800b584:	a53f0044 	addi	r20,r20,-1023
 800b588:	80a0b03a 	or	r16,r16,r2
 800b58c:	002b883a 	mov	r21,zero
 800b590:	0015883a 	mov	r10,zero
 800b594:	3812d53a 	srli	r9,r7,20
 800b598:	3806d7fa 	srli	r3,r7,31
 800b59c:	02000434 	movhi	r8,16
 800b5a0:	423fffc4 	addi	r8,r8,-1
 800b5a4:	4941ffcc 	andi	r5,r9,2047
 800b5a8:	302f883a 	mov	r23,r6
 800b5ac:	3a22703a 	and	r17,r7,r8
 800b5b0:	1ac03fcc 	andi	r11,r3,255
 800b5b4:	28006226 	beq	r5,zero,800b740 <__muldf3+0x22c>
 800b5b8:	0081ffc4 	movi	r2,2047
 800b5bc:	28805a26 	beq	r5,r2,800b728 <__muldf3+0x214>
 800b5c0:	8a000434 	orhi	r8,r17,16
 800b5c4:	3004d77a 	srli	r2,r6,29
 800b5c8:	401090fa 	slli	r8,r8,3
 800b5cc:	302e90fa 	slli	r23,r6,3
 800b5d0:	297f0044 	addi	r5,r5,-1023
 800b5d4:	40a2b03a 	or	r17,r8,r2
 800b5d8:	0013883a 	mov	r9,zero
 800b5dc:	4d4cb03a 	or	r6,r9,r21
 800b5e0:	300c90ba 	slli	r6,r6,2
 800b5e4:	02020074 	movhi	r8,2049
 800b5e8:	422d8104 	addi	r8,r8,-18940
 800b5ec:	320d883a 	add	r6,r6,r8
 800b5f0:	31800017 	ldw	r6,0(r6)
 800b5f4:	a14b883a 	add	r5,r20,r5
 800b5f8:	1dacf03a 	xor	r22,r3,r22
 800b5fc:	2b000044 	addi	r12,r5,1
 800b600:	3000683a 	jmp	r6
 800b604:	0800b840 	call	800b84 <__alt_mem_sdram-0x77ff47c>
 800b608:	0800b82c 	andhi	zero,at,736
 800b60c:	0800b82c 	andhi	zero,at,736
 800b610:	0800b818 	cmpnei	zero,at,736
 800b614:	0800b660 	cmpeqi	zero,at,729
 800b618:	0800b660 	cmpeqi	zero,at,729
 800b61c:	0800b800 	call	800b80 <__alt_mem_sdram-0x77ff480>
 800b620:	0800b818 	cmpnei	zero,at,736
 800b624:	0800b660 	cmpeqi	zero,at,729
 800b628:	0800b800 	call	800b80 <__alt_mem_sdram-0x77ff480>
 800b62c:	0800b660 	cmpeqi	zero,at,729
 800b630:	0800b818 	cmpnei	zero,at,736
 800b634:	0800b664 	muli	zero,at,729
 800b638:	0800b664 	muli	zero,at,729
 800b63c:	0800b664 	muli	zero,at,729
 800b640:	0800ba3c 	xorhi	zero,at,744
 800b644:	8104b03a 	or	r2,r16,r4
 800b648:	10006a1e 	bne	r2,zero,800b7f4 <__muldf3+0x2e0>
 800b64c:	05400204 	movi	r21,8
 800b650:	0021883a 	mov	r16,zero
 800b654:	0025883a 	mov	r18,zero
 800b658:	02800084 	movi	r10,2
 800b65c:	003fcd06 	br	800b594 <__alt_data_end+0xfc00b594>
 800b660:	b039883a 	mov	fp,r22
 800b664:	00800084 	movi	r2,2
 800b668:	50804e1e 	bne	r10,r2,800b7a4 <__muldf3+0x290>
 800b66c:	e4c0004c 	andi	r19,fp,1
 800b670:	0101ffc4 	movi	r4,2047
 800b674:	0021883a 	mov	r16,zero
 800b678:	0025883a 	mov	r18,zero
 800b67c:	2008953a 	slli	r4,r4,20
 800b680:	98c03fcc 	andi	r3,r19,255
 800b684:	01400434 	movhi	r5,16
 800b688:	297fffc4 	addi	r5,r5,-1
 800b68c:	180697fa 	slli	r3,r3,31
 800b690:	8160703a 	and	r16,r16,r5
 800b694:	8120b03a 	or	r16,r16,r4
 800b698:	80c6b03a 	or	r3,r16,r3
 800b69c:	9005883a 	mov	r2,r18
 800b6a0:	dfc00d17 	ldw	ra,52(sp)
 800b6a4:	df000c17 	ldw	fp,48(sp)
 800b6a8:	ddc00b17 	ldw	r23,44(sp)
 800b6ac:	dd800a17 	ldw	r22,40(sp)
 800b6b0:	dd400917 	ldw	r21,36(sp)
 800b6b4:	dd000817 	ldw	r20,32(sp)
 800b6b8:	dcc00717 	ldw	r19,28(sp)
 800b6bc:	dc800617 	ldw	r18,24(sp)
 800b6c0:	dc400517 	ldw	r17,20(sp)
 800b6c4:	dc000417 	ldw	r16,16(sp)
 800b6c8:	dec00e04 	addi	sp,sp,56
 800b6cc:	f800283a 	ret
 800b6d0:	8104b03a 	or	r2,r16,r4
 800b6d4:	10004226 	beq	r2,zero,800b7e0 <__muldf3+0x2cc>
 800b6d8:	8000f926 	beq	r16,zero,800bac0 <__muldf3+0x5ac>
 800b6dc:	8009883a 	mov	r4,r16
 800b6e0:	d9800315 	stw	r6,12(sp)
 800b6e4:	d9c00015 	stw	r7,0(sp)
 800b6e8:	800c7040 	call	800c704 <__clzsi2>
 800b6ec:	d9800317 	ldw	r6,12(sp)
 800b6f0:	d9c00017 	ldw	r7,0(sp)
 800b6f4:	1007883a 	mov	r3,r2
 800b6f8:	01000a04 	movi	r4,40
 800b6fc:	18bffe04 	addi	r2,r3,-8
 800b700:	20c9c83a 	sub	r4,r4,r3
 800b704:	80a0983a 	sll	r16,r16,r2
 800b708:	8908d83a 	srl	r4,r17,r4
 800b70c:	88a4983a 	sll	r18,r17,r2
 800b710:	2420b03a 	or	r16,r4,r16
 800b714:	017f0344 	movi	r5,-1011
 800b718:	28e9c83a 	sub	r20,r5,r3
 800b71c:	002b883a 	mov	r21,zero
 800b720:	0015883a 	mov	r10,zero
 800b724:	003f9b06 	br	800b594 <__alt_data_end+0xfc00b594>
 800b728:	8984b03a 	or	r2,r17,r6
 800b72c:	10002a1e 	bne	r2,zero,800b7d8 <__muldf3+0x2c4>
 800b730:	0023883a 	mov	r17,zero
 800b734:	002f883a 	mov	r23,zero
 800b738:	02400084 	movi	r9,2
 800b73c:	003fa706 	br	800b5dc <__alt_data_end+0xfc00b5dc>
 800b740:	8984b03a 	or	r2,r17,r6
 800b744:	10002026 	beq	r2,zero,800b7c8 <__muldf3+0x2b4>
 800b748:	8800cc26 	beq	r17,zero,800ba7c <__muldf3+0x568>
 800b74c:	8809883a 	mov	r4,r17
 800b750:	d8c00215 	stw	r3,8(sp)
 800b754:	d9800315 	stw	r6,12(sp)
 800b758:	da800015 	stw	r10,0(sp)
 800b75c:	dac00115 	stw	r11,4(sp)
 800b760:	800c7040 	call	800c704 <__clzsi2>
 800b764:	d8c00217 	ldw	r3,8(sp)
 800b768:	d9800317 	ldw	r6,12(sp)
 800b76c:	da800017 	ldw	r10,0(sp)
 800b770:	dac00117 	ldw	r11,4(sp)
 800b774:	1009883a 	mov	r4,r2
 800b778:	01400a04 	movi	r5,40
 800b77c:	25fffe04 	addi	r23,r4,-8
 800b780:	290bc83a 	sub	r5,r5,r4
 800b784:	8dd0983a 	sll	r8,r17,r23
 800b788:	314ad83a 	srl	r5,r6,r5
 800b78c:	35ee983a 	sll	r23,r6,r23
 800b790:	2a22b03a 	or	r17,r5,r8
 800b794:	017f0344 	movi	r5,-1011
 800b798:	290bc83a 	sub	r5,r5,r4
 800b79c:	0013883a 	mov	r9,zero
 800b7a0:	003f8e06 	br	800b5dc <__alt_data_end+0xfc00b5dc>
 800b7a4:	008000c4 	movi	r2,3
 800b7a8:	50811d26 	beq	r10,r2,800bc20 <__muldf3+0x70c>
 800b7ac:	00800044 	movi	r2,1
 800b7b0:	5080e01e 	bne	r10,r2,800bb34 <__muldf3+0x620>
 800b7b4:	e0a6703a 	and	r19,fp,r2
 800b7b8:	0009883a 	mov	r4,zero
 800b7bc:	0021883a 	mov	r16,zero
 800b7c0:	0025883a 	mov	r18,zero
 800b7c4:	003fad06 	br	800b67c <__alt_data_end+0xfc00b67c>
 800b7c8:	0023883a 	mov	r17,zero
 800b7cc:	002f883a 	mov	r23,zero
 800b7d0:	02400044 	movi	r9,1
 800b7d4:	003f8106 	br	800b5dc <__alt_data_end+0xfc00b5dc>
 800b7d8:	024000c4 	movi	r9,3
 800b7dc:	003f7f06 	br	800b5dc <__alt_data_end+0xfc00b5dc>
 800b7e0:	05400104 	movi	r21,4
 800b7e4:	0021883a 	mov	r16,zero
 800b7e8:	0025883a 	mov	r18,zero
 800b7ec:	02800044 	movi	r10,1
 800b7f0:	003f6806 	br	800b594 <__alt_data_end+0xfc00b594>
 800b7f4:	05400304 	movi	r21,12
 800b7f8:	028000c4 	movi	r10,3
 800b7fc:	003f6506 	br	800b594 <__alt_data_end+0xfc00b594>
 800b800:	04000434 	movhi	r16,16
 800b804:	0027883a 	mov	r19,zero
 800b808:	843fffc4 	addi	r16,r16,-1
 800b80c:	04bfffc4 	movi	r18,-1
 800b810:	0101ffc4 	movi	r4,2047
 800b814:	003f9906 	br	800b67c <__alt_data_end+0xfc00b67c>
 800b818:	8821883a 	mov	r16,r17
 800b81c:	b825883a 	mov	r18,r23
 800b820:	5839883a 	mov	fp,r11
 800b824:	4815883a 	mov	r10,r9
 800b828:	003f8e06 	br	800b664 <__alt_data_end+0xfc00b664>
 800b82c:	8821883a 	mov	r16,r17
 800b830:	b825883a 	mov	r18,r23
 800b834:	b039883a 	mov	fp,r22
 800b838:	4815883a 	mov	r10,r9
 800b83c:	003f8906 	br	800b664 <__alt_data_end+0xfc00b664>
 800b840:	b80cd43a 	srli	r6,r23,16
 800b844:	9006d43a 	srli	r3,r18,16
 800b848:	90bfffcc 	andi	r2,r18,65535
 800b84c:	bdffffcc 	andi	r23,r23,65535
 800b850:	b891383a 	mul	r8,r23,r2
 800b854:	b8c9383a 	mul	r4,r23,r3
 800b858:	309b383a 	mul	r13,r6,r2
 800b85c:	400ed43a 	srli	r7,r8,16
 800b860:	30df383a 	mul	r15,r6,r3
 800b864:	235b883a 	add	r13,r4,r13
 800b868:	69db883a 	add	r13,r13,r7
 800b86c:	6900022e 	bgeu	r13,r4,800b878 <__muldf3+0x364>
 800b870:	01000074 	movhi	r4,1
 800b874:	791f883a 	add	r15,r15,r4
 800b878:	8828d43a 	srli	r20,r17,16
 800b87c:	8c7fffcc 	andi	r17,r17,65535
 800b880:	888f383a 	mul	r7,r17,r2
 800b884:	88d3383a 	mul	r9,r17,r3
 800b888:	a0a5383a 	mul	r18,r20,r2
 800b88c:	3816d43a 	srli	r11,r7,16
 800b890:	6814943a 	slli	r10,r13,16
 800b894:	4ca5883a 	add	r18,r9,r18
 800b898:	423fffcc 	andi	r8,r8,65535
 800b89c:	92e5883a 	add	r18,r18,r11
 800b8a0:	6808d43a 	srli	r4,r13,16
 800b8a4:	5215883a 	add	r10,r10,r8
 800b8a8:	a0c7383a 	mul	r3,r20,r3
 800b8ac:	9240022e 	bgeu	r18,r9,800b8b8 <__muldf3+0x3a4>
 800b8b0:	00800074 	movhi	r2,1
 800b8b4:	1887883a 	add	r3,r3,r2
 800b8b8:	802ad43a 	srli	r21,r16,16
 800b8bc:	80bfffcc 	andi	r2,r16,65535
 800b8c0:	b893383a 	mul	r9,r23,r2
 800b8c4:	3091383a 	mul	r8,r6,r2
 800b8c8:	bd6f383a 	mul	r23,r23,r21
 800b8cc:	9026943a 	slli	r19,r18,16
 800b8d0:	481ad43a 	srli	r13,r9,16
 800b8d4:	9024d43a 	srli	r18,r18,16
 800b8d8:	39ffffcc 	andi	r7,r7,65535
 800b8dc:	ba11883a 	add	r8,r23,r8
 800b8e0:	99e7883a 	add	r19,r19,r7
 800b8e4:	4351883a 	add	r8,r8,r13
 800b8e8:	1c97883a 	add	r11,r3,r18
 800b8ec:	354d383a 	mul	r6,r6,r21
 800b8f0:	9925883a 	add	r18,r19,r4
 800b8f4:	45c0022e 	bgeu	r8,r23,800b900 <__muldf3+0x3ec>
 800b8f8:	00c00074 	movhi	r3,1
 800b8fc:	30cd883a 	add	r6,r6,r3
 800b900:	8889383a 	mul	r4,r17,r2
 800b904:	8d63383a 	mul	r17,r17,r21
 800b908:	a085383a 	mul	r2,r20,r2
 800b90c:	200ed43a 	srli	r7,r4,16
 800b910:	401cd43a 	srli	r14,r8,16
 800b914:	401a943a 	slli	r13,r8,16
 800b918:	8885883a 	add	r2,r17,r2
 800b91c:	4a3fffcc 	andi	r8,r9,65535
 800b920:	11c5883a 	add	r2,r2,r7
 800b924:	339d883a 	add	r14,r6,r14
 800b928:	6a11883a 	add	r8,r13,r8
 800b92c:	a561383a 	mul	r16,r20,r21
 800b930:	1440022e 	bgeu	r2,r17,800b93c <__muldf3+0x428>
 800b934:	00c00074 	movhi	r3,1
 800b938:	80e1883a 	add	r16,r16,r3
 800b93c:	1006943a 	slli	r3,r2,16
 800b940:	213fffcc 	andi	r4,r4,65535
 800b944:	93db883a 	add	r13,r18,r15
 800b948:	1909883a 	add	r4,r3,r4
 800b94c:	22c7883a 	add	r3,r4,r11
 800b950:	6cd3803a 	cmpltu	r9,r13,r19
 800b954:	6a09883a 	add	r4,r13,r8
 800b958:	1a5b883a 	add	r13,r3,r9
 800b95c:	2211803a 	cmpltu	r8,r4,r8
 800b960:	734d883a 	add	r6,r14,r13
 800b964:	100ed43a 	srli	r7,r2,16
 800b968:	6a53803a 	cmpltu	r9,r13,r9
 800b96c:	3205883a 	add	r2,r6,r8
 800b970:	1ac7803a 	cmpltu	r3,r3,r11
 800b974:	1211803a 	cmpltu	r8,r2,r8
 800b978:	48c6b03a 	or	r3,r9,r3
 800b97c:	338d803a 	cmpltu	r6,r6,r14
 800b980:	19c7883a 	add	r3,r3,r7
 800b984:	418cb03a 	or	r6,r8,r6
 800b988:	1987883a 	add	r3,r3,r6
 800b98c:	2024927a 	slli	r18,r4,9
 800b990:	1c07883a 	add	r3,r3,r16
 800b994:	1806927a 	slli	r3,r3,9
 800b998:	1020d5fa 	srli	r16,r2,23
 800b99c:	2008d5fa 	srli	r4,r4,23
 800b9a0:	9294b03a 	or	r10,r18,r10
 800b9a4:	1004927a 	slli	r2,r2,9
 800b9a8:	5024c03a 	cmpne	r18,r10,zero
 800b9ac:	1c20b03a 	or	r16,r3,r16
 800b9b0:	9108b03a 	or	r4,r18,r4
 800b9b4:	80c0402c 	andhi	r3,r16,256
 800b9b8:	20a4b03a 	or	r18,r4,r2
 800b9bc:	18000726 	beq	r3,zero,800b9dc <__muldf3+0x4c8>
 800b9c0:	9006d07a 	srli	r3,r18,1
 800b9c4:	800897fa 	slli	r4,r16,31
 800b9c8:	9080004c 	andi	r2,r18,1
 800b9cc:	8020d07a 	srli	r16,r16,1
 800b9d0:	10c4b03a 	or	r2,r2,r3
 800b9d4:	1124b03a 	or	r18,r2,r4
 800b9d8:	600b883a 	mov	r5,r12
 800b9dc:	2900ffc4 	addi	r4,r5,1023
 800b9e0:	01004b0e 	bge	zero,r4,800bb10 <__muldf3+0x5fc>
 800b9e4:	908001cc 	andi	r2,r18,7
 800b9e8:	10000726 	beq	r2,zero,800ba08 <__muldf3+0x4f4>
 800b9ec:	90c003cc 	andi	r3,r18,15
 800b9f0:	00800104 	movi	r2,4
 800b9f4:	18800426 	beq	r3,r2,800ba08 <__muldf3+0x4f4>
 800b9f8:	9087883a 	add	r3,r18,r2
 800b9fc:	1c85803a 	cmpltu	r2,r3,r18
 800ba00:	80a1883a 	add	r16,r16,r2
 800ba04:	1825883a 	mov	r18,r3
 800ba08:	8080402c 	andhi	r2,r16,256
 800ba0c:	10000426 	beq	r2,zero,800ba20 <__muldf3+0x50c>
 800ba10:	00bfc034 	movhi	r2,65280
 800ba14:	10bfffc4 	addi	r2,r2,-1
 800ba18:	29010004 	addi	r4,r5,1024
 800ba1c:	80a0703a 	and	r16,r16,r2
 800ba20:	0081ff84 	movi	r2,2046
 800ba24:	1100320e 	bge	r2,r4,800baf0 <__muldf3+0x5dc>
 800ba28:	b4c0004c 	andi	r19,r22,1
 800ba2c:	0101ffc4 	movi	r4,2047
 800ba30:	0021883a 	mov	r16,zero
 800ba34:	0025883a 	mov	r18,zero
 800ba38:	003f1006 	br	800b67c <__alt_data_end+0xfc00b67c>
 800ba3c:	8080022c 	andhi	r2,r16,8
 800ba40:	10000926 	beq	r2,zero,800ba68 <__muldf3+0x554>
 800ba44:	8880022c 	andhi	r2,r17,8
 800ba48:	1000071e 	bne	r2,zero,800ba68 <__muldf3+0x554>
 800ba4c:	00800434 	movhi	r2,16
 800ba50:	8c000234 	orhi	r16,r17,8
 800ba54:	10bfffc4 	addi	r2,r2,-1
 800ba58:	1827883a 	mov	r19,r3
 800ba5c:	80a0703a 	and	r16,r16,r2
 800ba60:	b825883a 	mov	r18,r23
 800ba64:	003f6a06 	br	800b810 <__alt_data_end+0xfc00b810>
 800ba68:	00800434 	movhi	r2,16
 800ba6c:	84000234 	orhi	r16,r16,8
 800ba70:	10bfffc4 	addi	r2,r2,-1
 800ba74:	80a0703a 	and	r16,r16,r2
 800ba78:	003f6506 	br	800b810 <__alt_data_end+0xfc00b810>
 800ba7c:	3009883a 	mov	r4,r6
 800ba80:	d8c00215 	stw	r3,8(sp)
 800ba84:	d9800315 	stw	r6,12(sp)
 800ba88:	da800015 	stw	r10,0(sp)
 800ba8c:	dac00115 	stw	r11,4(sp)
 800ba90:	800c7040 	call	800c704 <__clzsi2>
 800ba94:	11000804 	addi	r4,r2,32
 800ba98:	014009c4 	movi	r5,39
 800ba9c:	d8c00217 	ldw	r3,8(sp)
 800baa0:	d9800317 	ldw	r6,12(sp)
 800baa4:	da800017 	ldw	r10,0(sp)
 800baa8:	dac00117 	ldw	r11,4(sp)
 800baac:	293f320e 	bge	r5,r4,800b778 <__alt_data_end+0xfc00b778>
 800bab0:	10bffe04 	addi	r2,r2,-8
 800bab4:	b8a2983a 	sll	r17,r23,r2
 800bab8:	002f883a 	mov	r23,zero
 800babc:	003f3506 	br	800b794 <__alt_data_end+0xfc00b794>
 800bac0:	d9800315 	stw	r6,12(sp)
 800bac4:	d9c00015 	stw	r7,0(sp)
 800bac8:	800c7040 	call	800c704 <__clzsi2>
 800bacc:	10c00804 	addi	r3,r2,32
 800bad0:	010009c4 	movi	r4,39
 800bad4:	d9800317 	ldw	r6,12(sp)
 800bad8:	d9c00017 	ldw	r7,0(sp)
 800badc:	20ff060e 	bge	r4,r3,800b6f8 <__alt_data_end+0xfc00b6f8>
 800bae0:	10bffe04 	addi	r2,r2,-8
 800bae4:	88a0983a 	sll	r16,r17,r2
 800bae8:	0025883a 	mov	r18,zero
 800baec:	003f0906 	br	800b714 <__alt_data_end+0xfc00b714>
 800baf0:	9004d0fa 	srli	r2,r18,3
 800baf4:	8024977a 	slli	r18,r16,29
 800baf8:	8020927a 	slli	r16,r16,9
 800bafc:	2101ffcc 	andi	r4,r4,2047
 800bb00:	90a4b03a 	or	r18,r18,r2
 800bb04:	8020d33a 	srli	r16,r16,12
 800bb08:	b4c0004c 	andi	r19,r22,1
 800bb0c:	003edb06 	br	800b67c <__alt_data_end+0xfc00b67c>
 800bb10:	00ff0084 	movi	r3,-1022
 800bb14:	1947c83a 	sub	r3,r3,r5
 800bb18:	00800e04 	movi	r2,56
 800bb1c:	10c0080e 	bge	r2,r3,800bb40 <__muldf3+0x62c>
 800bb20:	b4c0004c 	andi	r19,r22,1
 800bb24:	0009883a 	mov	r4,zero
 800bb28:	0021883a 	mov	r16,zero
 800bb2c:	0025883a 	mov	r18,zero
 800bb30:	003ed206 	br	800b67c <__alt_data_end+0xfc00b67c>
 800bb34:	600b883a 	mov	r5,r12
 800bb38:	e02d883a 	mov	r22,fp
 800bb3c:	003fa706 	br	800b9dc <__alt_data_end+0xfc00b9dc>
 800bb40:	008007c4 	movi	r2,31
 800bb44:	10c01816 	blt	r2,r3,800bba8 <__muldf3+0x694>
 800bb48:	29410784 	addi	r5,r5,1054
 800bb4c:	8144983a 	sll	r2,r16,r5
 800bb50:	90c8d83a 	srl	r4,r18,r3
 800bb54:	914a983a 	sll	r5,r18,r5
 800bb58:	80c6d83a 	srl	r3,r16,r3
 800bb5c:	2088b03a 	or	r4,r4,r2
 800bb60:	2804c03a 	cmpne	r2,r5,zero
 800bb64:	2084b03a 	or	r2,r4,r2
 800bb68:	110001cc 	andi	r4,r2,7
 800bb6c:	20000726 	beq	r4,zero,800bb8c <__muldf3+0x678>
 800bb70:	114003cc 	andi	r5,r2,15
 800bb74:	01000104 	movi	r4,4
 800bb78:	29000426 	beq	r5,r4,800bb8c <__muldf3+0x678>
 800bb7c:	11000104 	addi	r4,r2,4
 800bb80:	2085803a 	cmpltu	r2,r4,r2
 800bb84:	1887883a 	add	r3,r3,r2
 800bb88:	2005883a 	mov	r2,r4
 800bb8c:	1900202c 	andhi	r4,r3,128
 800bb90:	20001826 	beq	r4,zero,800bbf4 <__muldf3+0x6e0>
 800bb94:	b4c0004c 	andi	r19,r22,1
 800bb98:	01000044 	movi	r4,1
 800bb9c:	0021883a 	mov	r16,zero
 800bba0:	0025883a 	mov	r18,zero
 800bba4:	003eb506 	br	800b67c <__alt_data_end+0xfc00b67c>
 800bba8:	00bef884 	movi	r2,-1054
 800bbac:	1145c83a 	sub	r2,r2,r5
 800bbb0:	8088d83a 	srl	r4,r16,r2
 800bbb4:	00800804 	movi	r2,32
 800bbb8:	18801726 	beq	r3,r2,800bc18 <__muldf3+0x704>
 800bbbc:	28810f84 	addi	r2,r5,1086
 800bbc0:	8084983a 	sll	r2,r16,r2
 800bbc4:	1484b03a 	or	r2,r2,r18
 800bbc8:	1004c03a 	cmpne	r2,r2,zero
 800bbcc:	1104b03a 	or	r2,r2,r4
 800bbd0:	10c001cc 	andi	r3,r2,7
 800bbd4:	18000b1e 	bne	r3,zero,800bc04 <__muldf3+0x6f0>
 800bbd8:	0021883a 	mov	r16,zero
 800bbdc:	1004d0fa 	srli	r2,r2,3
 800bbe0:	b4c0004c 	andi	r19,r22,1
 800bbe4:	0009883a 	mov	r4,zero
 800bbe8:	10e4b03a 	or	r18,r2,r3
 800bbec:	003ea306 	br	800b67c <__alt_data_end+0xfc00b67c>
 800bbf0:	0007883a 	mov	r3,zero
 800bbf4:	1820927a 	slli	r16,r3,9
 800bbf8:	1806977a 	slli	r3,r3,29
 800bbfc:	8020d33a 	srli	r16,r16,12
 800bc00:	003ff606 	br	800bbdc <__alt_data_end+0xfc00bbdc>
 800bc04:	110003cc 	andi	r4,r2,15
 800bc08:	00c00104 	movi	r3,4
 800bc0c:	20fff826 	beq	r4,r3,800bbf0 <__alt_data_end+0xfc00bbf0>
 800bc10:	0007883a 	mov	r3,zero
 800bc14:	003fd906 	br	800bb7c <__alt_data_end+0xfc00bb7c>
 800bc18:	0005883a 	mov	r2,zero
 800bc1c:	003fe906 	br	800bbc4 <__alt_data_end+0xfc00bbc4>
 800bc20:	00800434 	movhi	r2,16
 800bc24:	84000234 	orhi	r16,r16,8
 800bc28:	10bfffc4 	addi	r2,r2,-1
 800bc2c:	e4c0004c 	andi	r19,fp,1
 800bc30:	80a0703a 	and	r16,r16,r2
 800bc34:	003ef606 	br	800b810 <__alt_data_end+0xfc00b810>

0800bc38 <__subdf3>:
 800bc38:	00c00434 	movhi	r3,16
 800bc3c:	18ffffc4 	addi	r3,r3,-1
 800bc40:	defffb04 	addi	sp,sp,-20
 800bc44:	28d2703a 	and	r9,r5,r3
 800bc48:	3814d53a 	srli	r10,r7,20
 800bc4c:	38c6703a 	and	r3,r7,r3
 800bc50:	3004d77a 	srli	r2,r6,29
 800bc54:	dc800215 	stw	r18,8(sp)
 800bc58:	dc000015 	stw	r16,0(sp)
 800bc5c:	2824d7fa 	srli	r18,r5,31
 800bc60:	2820d53a 	srli	r16,r5,20
 800bc64:	481290fa 	slli	r9,r9,3
 800bc68:	200ad77a 	srli	r5,r4,29
 800bc6c:	180690fa 	slli	r3,r3,3
 800bc70:	dc400115 	stw	r17,4(sp)
 800bc74:	dfc00415 	stw	ra,16(sp)
 800bc78:	202290fa 	slli	r17,r4,3
 800bc7c:	dcc00315 	stw	r19,12(sp)
 800bc80:	5281ffcc 	andi	r10,r10,2047
 800bc84:	0101ffc4 	movi	r4,2047
 800bc88:	9011883a 	mov	r8,r18
 800bc8c:	8401ffcc 	andi	r16,r16,2047
 800bc90:	94803fcc 	andi	r18,r18,255
 800bc94:	494ab03a 	or	r5,r9,r5
 800bc98:	380ed7fa 	srli	r7,r7,31
 800bc9c:	1886b03a 	or	r3,r3,r2
 800bca0:	300c90fa 	slli	r6,r6,3
 800bca4:	51009026 	beq	r10,r4,800bee8 <__subdf3+0x2b0>
 800bca8:	39c0005c 	xori	r7,r7,1
 800bcac:	8285c83a 	sub	r2,r16,r10
 800bcb0:	91c06f26 	beq	r18,r7,800be70 <__subdf3+0x238>
 800bcb4:	0080b10e 	bge	zero,r2,800bf7c <__subdf3+0x344>
 800bcb8:	50002a1e 	bne	r10,zero,800bd64 <__subdf3+0x12c>
 800bcbc:	1988b03a 	or	r4,r3,r6
 800bcc0:	2000941e 	bne	r4,zero,800bf14 <__subdf3+0x2dc>
 800bcc4:	888001cc 	andi	r2,r17,7
 800bcc8:	10005b26 	beq	r2,zero,800be38 <__subdf3+0x200>
 800bccc:	88c003cc 	andi	r3,r17,15
 800bcd0:	00800104 	movi	r2,4
 800bcd4:	18805826 	beq	r3,r2,800be38 <__subdf3+0x200>
 800bcd8:	88c00104 	addi	r3,r17,4
 800bcdc:	1c63803a 	cmpltu	r17,r3,r17
 800bce0:	2c4b883a 	add	r5,r5,r17
 800bce4:	2880202c 	andhi	r2,r5,128
 800bce8:	9200004c 	andi	r8,r18,1
 800bcec:	1823883a 	mov	r17,r3
 800bcf0:	10005426 	beq	r2,zero,800be44 <__subdf3+0x20c>
 800bcf4:	84000044 	addi	r16,r16,1
 800bcf8:	0081ffc4 	movi	r2,2047
 800bcfc:	8080bf26 	beq	r16,r2,800bffc <__subdf3+0x3c4>
 800bd00:	013fe034 	movhi	r4,65408
 800bd04:	213fffc4 	addi	r4,r4,-1
 800bd08:	290a703a 	and	r5,r5,r4
 800bd0c:	2804977a 	slli	r2,r5,29
 800bd10:	280a927a 	slli	r5,r5,9
 800bd14:	8822d0fa 	srli	r17,r17,3
 800bd18:	8401ffcc 	andi	r16,r16,2047
 800bd1c:	2808d33a 	srli	r4,r5,12
 800bd20:	1444b03a 	or	r2,r2,r17
 800bd24:	8401ffcc 	andi	r16,r16,2047
 800bd28:	800a953a 	slli	r5,r16,20
 800bd2c:	40c03fcc 	andi	r3,r8,255
 800bd30:	04000434 	movhi	r16,16
 800bd34:	180697fa 	slli	r3,r3,31
 800bd38:	843fffc4 	addi	r16,r16,-1
 800bd3c:	2420703a 	and	r16,r4,r16
 800bd40:	8160b03a 	or	r16,r16,r5
 800bd44:	80c6b03a 	or	r3,r16,r3
 800bd48:	dfc00417 	ldw	ra,16(sp)
 800bd4c:	dcc00317 	ldw	r19,12(sp)
 800bd50:	dc800217 	ldw	r18,8(sp)
 800bd54:	dc400117 	ldw	r17,4(sp)
 800bd58:	dc000017 	ldw	r16,0(sp)
 800bd5c:	dec00504 	addi	sp,sp,20
 800bd60:	f800283a 	ret
 800bd64:	0101ffc4 	movi	r4,2047
 800bd68:	813fd626 	beq	r16,r4,800bcc4 <__alt_data_end+0xfc00bcc4>
 800bd6c:	18c02034 	orhi	r3,r3,128
 800bd70:	01000e04 	movi	r4,56
 800bd74:	2080a416 	blt	r4,r2,800c008 <__subdf3+0x3d0>
 800bd78:	010007c4 	movi	r4,31
 800bd7c:	2080c716 	blt	r4,r2,800c09c <__subdf3+0x464>
 800bd80:	01000804 	movi	r4,32
 800bd84:	2089c83a 	sub	r4,r4,r2
 800bd88:	1910983a 	sll	r8,r3,r4
 800bd8c:	308ed83a 	srl	r7,r6,r2
 800bd90:	3108983a 	sll	r4,r6,r4
 800bd94:	1884d83a 	srl	r2,r3,r2
 800bd98:	41ccb03a 	or	r6,r8,r7
 800bd9c:	2008c03a 	cmpne	r4,r4,zero
 800bda0:	310cb03a 	or	r6,r6,r4
 800bda4:	898dc83a 	sub	r6,r17,r6
 800bda8:	89a3803a 	cmpltu	r17,r17,r6
 800bdac:	288bc83a 	sub	r5,r5,r2
 800bdb0:	2c4bc83a 	sub	r5,r5,r17
 800bdb4:	3023883a 	mov	r17,r6
 800bdb8:	2880202c 	andhi	r2,r5,128
 800bdbc:	10006b26 	beq	r2,zero,800bf6c <__subdf3+0x334>
 800bdc0:	04c02034 	movhi	r19,128
 800bdc4:	9cffffc4 	addi	r19,r19,-1
 800bdc8:	2ce6703a 	and	r19,r5,r19
 800bdcc:	98007c26 	beq	r19,zero,800bfc0 <__subdf3+0x388>
 800bdd0:	9809883a 	mov	r4,r19
 800bdd4:	800c7040 	call	800c704 <__clzsi2>
 800bdd8:	10fffe04 	addi	r3,r2,-8
 800bddc:	010007c4 	movi	r4,31
 800bde0:	20c07d16 	blt	r4,r3,800bfd8 <__subdf3+0x3a0>
 800bde4:	01400a04 	movi	r5,40
 800bde8:	2885c83a 	sub	r2,r5,r2
 800bdec:	888ad83a 	srl	r5,r17,r2
 800bdf0:	98e6983a 	sll	r19,r19,r3
 800bdf4:	88e2983a 	sll	r17,r17,r3
 800bdf8:	2ce6b03a 	or	r19,r5,r19
 800bdfc:	1c007a16 	blt	r3,r16,800bfe8 <__subdf3+0x3b0>
 800be00:	1c21c83a 	sub	r16,r3,r16
 800be04:	81400044 	addi	r5,r16,1
 800be08:	00c007c4 	movi	r3,31
 800be0c:	19409616 	blt	r3,r5,800c068 <__subdf3+0x430>
 800be10:	1c21c83a 	sub	r16,r3,r16
 800be14:	8c08983a 	sll	r4,r17,r16
 800be18:	8946d83a 	srl	r3,r17,r5
 800be1c:	9c20983a 	sll	r16,r19,r16
 800be20:	2008c03a 	cmpne	r4,r4,zero
 800be24:	994ad83a 	srl	r5,r19,r5
 800be28:	1c06b03a 	or	r3,r3,r16
 800be2c:	1922b03a 	or	r17,r3,r4
 800be30:	0021883a 	mov	r16,zero
 800be34:	003fa306 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800be38:	2880202c 	andhi	r2,r5,128
 800be3c:	9200004c 	andi	r8,r18,1
 800be40:	103fac1e 	bne	r2,zero,800bcf4 <__alt_data_end+0xfc00bcf4>
 800be44:	2804977a 	slli	r2,r5,29
 800be48:	8822d0fa 	srli	r17,r17,3
 800be4c:	00c1ffc4 	movi	r3,2047
 800be50:	280ad0fa 	srli	r5,r5,3
 800be54:	1444b03a 	or	r2,r2,r17
 800be58:	80c02726 	beq	r16,r3,800bef8 <__subdf3+0x2c0>
 800be5c:	01000434 	movhi	r4,16
 800be60:	213fffc4 	addi	r4,r4,-1
 800be64:	80e0703a 	and	r16,r16,r3
 800be68:	2908703a 	and	r4,r5,r4
 800be6c:	003fad06 	br	800bd24 <__alt_data_end+0xfc00bd24>
 800be70:	0080690e 	bge	zero,r2,800c018 <__subdf3+0x3e0>
 800be74:	50002f26 	beq	r10,zero,800bf34 <__subdf3+0x2fc>
 800be78:	0101ffc4 	movi	r4,2047
 800be7c:	813f9126 	beq	r16,r4,800bcc4 <__alt_data_end+0xfc00bcc4>
 800be80:	18c02034 	orhi	r3,r3,128
 800be84:	01000e04 	movi	r4,56
 800be88:	2080b00e 	bge	r4,r2,800c14c <__subdf3+0x514>
 800be8c:	198cb03a 	or	r6,r3,r6
 800be90:	300ec03a 	cmpne	r7,r6,zero
 800be94:	0005883a 	mov	r2,zero
 800be98:	3c4f883a 	add	r7,r7,r17
 800be9c:	3c63803a 	cmpltu	r17,r7,r17
 800bea0:	114b883a 	add	r5,r2,r5
 800bea4:	2c4b883a 	add	r5,r5,r17
 800bea8:	3823883a 	mov	r17,r7
 800beac:	2880202c 	andhi	r2,r5,128
 800beb0:	10002e26 	beq	r2,zero,800bf6c <__subdf3+0x334>
 800beb4:	84000044 	addi	r16,r16,1
 800beb8:	0081ffc4 	movi	r2,2047
 800bebc:	8080de26 	beq	r16,r2,800c238 <__subdf3+0x600>
 800bec0:	00bfe034 	movhi	r2,65408
 800bec4:	10bfffc4 	addi	r2,r2,-1
 800bec8:	288a703a 	and	r5,r5,r2
 800becc:	880cd07a 	srli	r6,r17,1
 800bed0:	280897fa 	slli	r4,r5,31
 800bed4:	88c0004c 	andi	r3,r17,1
 800bed8:	30e2b03a 	or	r17,r6,r3
 800bedc:	280ad07a 	srli	r5,r5,1
 800bee0:	8922b03a 	or	r17,r17,r4
 800bee4:	003f7706 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800bee8:	1984b03a 	or	r2,r3,r6
 800beec:	103f6e26 	beq	r2,zero,800bca8 <__alt_data_end+0xfc00bca8>
 800bef0:	39c03fcc 	andi	r7,r7,255
 800bef4:	003f6d06 	br	800bcac <__alt_data_end+0xfc00bcac>
 800bef8:	1146b03a 	or	r3,r2,r5
 800befc:	18003f26 	beq	r3,zero,800bffc <__subdf3+0x3c4>
 800bf00:	00c00434 	movhi	r3,16
 800bf04:	29000234 	orhi	r4,r5,8
 800bf08:	18ffffc4 	addi	r3,r3,-1
 800bf0c:	20c8703a 	and	r4,r4,r3
 800bf10:	003f8406 	br	800bd24 <__alt_data_end+0xfc00bd24>
 800bf14:	10bfffc4 	addi	r2,r2,-1
 800bf18:	1000501e 	bne	r2,zero,800c05c <__subdf3+0x424>
 800bf1c:	898fc83a 	sub	r7,r17,r6
 800bf20:	89e3803a 	cmpltu	r17,r17,r7
 800bf24:	28cbc83a 	sub	r5,r5,r3
 800bf28:	2c4bc83a 	sub	r5,r5,r17
 800bf2c:	3823883a 	mov	r17,r7
 800bf30:	003fa106 	br	800bdb8 <__alt_data_end+0xfc00bdb8>
 800bf34:	1988b03a 	or	r4,r3,r6
 800bf38:	203f6226 	beq	r4,zero,800bcc4 <__alt_data_end+0xfc00bcc4>
 800bf3c:	10bfffc4 	addi	r2,r2,-1
 800bf40:	10009b1e 	bne	r2,zero,800c1b0 <__subdf3+0x578>
 800bf44:	344d883a 	add	r6,r6,r17
 800bf48:	3463803a 	cmpltu	r17,r6,r17
 800bf4c:	194b883a 	add	r5,r3,r5
 800bf50:	2c4b883a 	add	r5,r5,r17
 800bf54:	3023883a 	mov	r17,r6
 800bf58:	003fd406 	br	800beac <__alt_data_end+0xfc00beac>
 800bf5c:	1106b03a 	or	r3,r2,r4
 800bf60:	1800b426 	beq	r3,zero,800c234 <__subdf3+0x5fc>
 800bf64:	100b883a 	mov	r5,r2
 800bf68:	2023883a 	mov	r17,r4
 800bf6c:	888001cc 	andi	r2,r17,7
 800bf70:	103f561e 	bne	r2,zero,800bccc <__alt_data_end+0xfc00bccc>
 800bf74:	9200004c 	andi	r8,r18,1
 800bf78:	003fb206 	br	800be44 <__alt_data_end+0xfc00be44>
 800bf7c:	1000531e 	bne	r2,zero,800c0cc <__subdf3+0x494>
 800bf80:	80800044 	addi	r2,r16,1
 800bf84:	1081ffcc 	andi	r2,r2,2047
 800bf88:	01000044 	movi	r4,1
 800bf8c:	2080a00e 	bge	r4,r2,800c210 <__subdf3+0x5d8>
 800bf90:	8985c83a 	sub	r2,r17,r6
 800bf94:	8889803a 	cmpltu	r4,r17,r2
 800bf98:	28e7c83a 	sub	r19,r5,r3
 800bf9c:	9927c83a 	sub	r19,r19,r4
 800bfa0:	9900202c 	andhi	r4,r19,128
 800bfa4:	20006226 	beq	r4,zero,800c130 <__subdf3+0x4f8>
 800bfa8:	3463c83a 	sub	r17,r6,r17
 800bfac:	194bc83a 	sub	r5,r3,r5
 800bfb0:	344d803a 	cmpltu	r6,r6,r17
 800bfb4:	29a7c83a 	sub	r19,r5,r6
 800bfb8:	3825883a 	mov	r18,r7
 800bfbc:	983f841e 	bne	r19,zero,800bdd0 <__alt_data_end+0xfc00bdd0>
 800bfc0:	8809883a 	mov	r4,r17
 800bfc4:	800c7040 	call	800c704 <__clzsi2>
 800bfc8:	10800804 	addi	r2,r2,32
 800bfcc:	10fffe04 	addi	r3,r2,-8
 800bfd0:	010007c4 	movi	r4,31
 800bfd4:	20ff830e 	bge	r4,r3,800bde4 <__alt_data_end+0xfc00bde4>
 800bfd8:	14fff604 	addi	r19,r2,-40
 800bfdc:	8ce6983a 	sll	r19,r17,r19
 800bfe0:	0023883a 	mov	r17,zero
 800bfe4:	1c3f860e 	bge	r3,r16,800be00 <__alt_data_end+0xfc00be00>
 800bfe8:	017fe034 	movhi	r5,65408
 800bfec:	297fffc4 	addi	r5,r5,-1
 800bff0:	80e1c83a 	sub	r16,r16,r3
 800bff4:	994a703a 	and	r5,r19,r5
 800bff8:	003f3206 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800bffc:	0009883a 	mov	r4,zero
 800c000:	0005883a 	mov	r2,zero
 800c004:	003f4706 	br	800bd24 <__alt_data_end+0xfc00bd24>
 800c008:	198cb03a 	or	r6,r3,r6
 800c00c:	300cc03a 	cmpne	r6,r6,zero
 800c010:	0005883a 	mov	r2,zero
 800c014:	003f6306 	br	800bda4 <__alt_data_end+0xfc00bda4>
 800c018:	10009d1e 	bne	r2,zero,800c290 <__subdf3+0x658>
 800c01c:	81c00044 	addi	r7,r16,1
 800c020:	3881ffcc 	andi	r2,r7,2047
 800c024:	02400044 	movi	r9,1
 800c028:	4880680e 	bge	r9,r2,800c1cc <__subdf3+0x594>
 800c02c:	0081ffc4 	movi	r2,2047
 800c030:	3880ae26 	beq	r7,r2,800c2ec <__subdf3+0x6b4>
 800c034:	344d883a 	add	r6,r6,r17
 800c038:	3463803a 	cmpltu	r17,r6,r17
 800c03c:	194b883a 	add	r5,r3,r5
 800c040:	2c4b883a 	add	r5,r5,r17
 800c044:	282297fa 	slli	r17,r5,31
 800c048:	300cd07a 	srli	r6,r6,1
 800c04c:	280ad07a 	srli	r5,r5,1
 800c050:	3821883a 	mov	r16,r7
 800c054:	89a2b03a 	or	r17,r17,r6
 800c058:	003f1a06 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800c05c:	0101ffc4 	movi	r4,2047
 800c060:	813f431e 	bne	r16,r4,800bd70 <__alt_data_end+0xfc00bd70>
 800c064:	003f1706 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800c068:	80bff844 	addi	r2,r16,-31
 800c06c:	00c00804 	movi	r3,32
 800c070:	9884d83a 	srl	r2,r19,r2
 800c074:	28c05126 	beq	r5,r3,800c1bc <__subdf3+0x584>
 800c078:	00c00fc4 	movi	r3,63
 800c07c:	1c21c83a 	sub	r16,r3,r16
 800c080:	9c26983a 	sll	r19,r19,r16
 800c084:	9c62b03a 	or	r17,r19,r17
 800c088:	8822c03a 	cmpne	r17,r17,zero
 800c08c:	88a2b03a 	or	r17,r17,r2
 800c090:	000b883a 	mov	r5,zero
 800c094:	0021883a 	mov	r16,zero
 800c098:	003fb406 	br	800bf6c <__alt_data_end+0xfc00bf6c>
 800c09c:	113ff804 	addi	r4,r2,-32
 800c0a0:	01c00804 	movi	r7,32
 800c0a4:	1908d83a 	srl	r4,r3,r4
 800c0a8:	11c04626 	beq	r2,r7,800c1c4 <__subdf3+0x58c>
 800c0ac:	01c01004 	movi	r7,64
 800c0b0:	3885c83a 	sub	r2,r7,r2
 800c0b4:	1884983a 	sll	r2,r3,r2
 800c0b8:	118cb03a 	or	r6,r2,r6
 800c0bc:	300cc03a 	cmpne	r6,r6,zero
 800c0c0:	310cb03a 	or	r6,r6,r4
 800c0c4:	0005883a 	mov	r2,zero
 800c0c8:	003f3606 	br	800bda4 <__alt_data_end+0xfc00bda4>
 800c0cc:	80002b26 	beq	r16,zero,800c17c <__subdf3+0x544>
 800c0d0:	0101ffc4 	movi	r4,2047
 800c0d4:	51006926 	beq	r10,r4,800c27c <__subdf3+0x644>
 800c0d8:	0085c83a 	sub	r2,zero,r2
 800c0dc:	29402034 	orhi	r5,r5,128
 800c0e0:	01000e04 	movi	r4,56
 800c0e4:	20807d16 	blt	r4,r2,800c2dc <__subdf3+0x6a4>
 800c0e8:	010007c4 	movi	r4,31
 800c0ec:	2080d916 	blt	r4,r2,800c454 <__subdf3+0x81c>
 800c0f0:	01000804 	movi	r4,32
 800c0f4:	2089c83a 	sub	r4,r4,r2
 800c0f8:	2912983a 	sll	r9,r5,r4
 800c0fc:	8890d83a 	srl	r8,r17,r2
 800c100:	8908983a 	sll	r4,r17,r4
 800c104:	2884d83a 	srl	r2,r5,r2
 800c108:	4a22b03a 	or	r17,r9,r8
 800c10c:	2008c03a 	cmpne	r4,r4,zero
 800c110:	8922b03a 	or	r17,r17,r4
 800c114:	3463c83a 	sub	r17,r6,r17
 800c118:	1885c83a 	sub	r2,r3,r2
 800c11c:	344d803a 	cmpltu	r6,r6,r17
 800c120:	118bc83a 	sub	r5,r2,r6
 800c124:	5021883a 	mov	r16,r10
 800c128:	3825883a 	mov	r18,r7
 800c12c:	003f2206 	br	800bdb8 <__alt_data_end+0xfc00bdb8>
 800c130:	9886b03a 	or	r3,r19,r2
 800c134:	18001c1e 	bne	r3,zero,800c1a8 <__subdf3+0x570>
 800c138:	0011883a 	mov	r8,zero
 800c13c:	000b883a 	mov	r5,zero
 800c140:	0023883a 	mov	r17,zero
 800c144:	0021883a 	mov	r16,zero
 800c148:	003f3e06 	br	800be44 <__alt_data_end+0xfc00be44>
 800c14c:	010007c4 	movi	r4,31
 800c150:	20803c16 	blt	r4,r2,800c244 <__subdf3+0x60c>
 800c154:	01000804 	movi	r4,32
 800c158:	2089c83a 	sub	r4,r4,r2
 800c15c:	1912983a 	sll	r9,r3,r4
 800c160:	308ed83a 	srl	r7,r6,r2
 800c164:	3108983a 	sll	r4,r6,r4
 800c168:	1884d83a 	srl	r2,r3,r2
 800c16c:	49ceb03a 	or	r7,r9,r7
 800c170:	2008c03a 	cmpne	r4,r4,zero
 800c174:	390eb03a 	or	r7,r7,r4
 800c178:	003f4706 	br	800be98 <__alt_data_end+0xfc00be98>
 800c17c:	2c48b03a 	or	r4,r5,r17
 800c180:	20003e26 	beq	r4,zero,800c27c <__subdf3+0x644>
 800c184:	0084303a 	nor	r2,zero,r2
 800c188:	10003a1e 	bne	r2,zero,800c274 <__subdf3+0x63c>
 800c18c:	3463c83a 	sub	r17,r6,r17
 800c190:	194bc83a 	sub	r5,r3,r5
 800c194:	344d803a 	cmpltu	r6,r6,r17
 800c198:	298bc83a 	sub	r5,r5,r6
 800c19c:	5021883a 	mov	r16,r10
 800c1a0:	3825883a 	mov	r18,r7
 800c1a4:	003f0406 	br	800bdb8 <__alt_data_end+0xfc00bdb8>
 800c1a8:	1023883a 	mov	r17,r2
 800c1ac:	003f0706 	br	800bdcc <__alt_data_end+0xfc00bdcc>
 800c1b0:	0101ffc4 	movi	r4,2047
 800c1b4:	813f331e 	bne	r16,r4,800be84 <__alt_data_end+0xfc00be84>
 800c1b8:	003ec206 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800c1bc:	0027883a 	mov	r19,zero
 800c1c0:	003fb006 	br	800c084 <__alt_data_end+0xfc00c084>
 800c1c4:	0005883a 	mov	r2,zero
 800c1c8:	003fbb06 	br	800c0b8 <__alt_data_end+0xfc00c0b8>
 800c1cc:	2c44b03a 	or	r2,r5,r17
 800c1d0:	80008b1e 	bne	r16,zero,800c400 <__subdf3+0x7c8>
 800c1d4:	1000b526 	beq	r2,zero,800c4ac <__subdf3+0x874>
 800c1d8:	1984b03a 	or	r2,r3,r6
 800c1dc:	103eb926 	beq	r2,zero,800bcc4 <__alt_data_end+0xfc00bcc4>
 800c1e0:	3449883a 	add	r4,r6,r17
 800c1e4:	2463803a 	cmpltu	r17,r4,r17
 800c1e8:	194b883a 	add	r5,r3,r5
 800c1ec:	2c4b883a 	add	r5,r5,r17
 800c1f0:	2880202c 	andhi	r2,r5,128
 800c1f4:	2023883a 	mov	r17,r4
 800c1f8:	103f5c26 	beq	r2,zero,800bf6c <__alt_data_end+0xfc00bf6c>
 800c1fc:	00bfe034 	movhi	r2,65408
 800c200:	10bfffc4 	addi	r2,r2,-1
 800c204:	4821883a 	mov	r16,r9
 800c208:	288a703a 	and	r5,r5,r2
 800c20c:	003ead06 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800c210:	2c44b03a 	or	r2,r5,r17
 800c214:	8000291e 	bne	r16,zero,800c2bc <__subdf3+0x684>
 800c218:	10004f1e 	bne	r2,zero,800c358 <__subdf3+0x720>
 800c21c:	1984b03a 	or	r2,r3,r6
 800c220:	10000426 	beq	r2,zero,800c234 <__subdf3+0x5fc>
 800c224:	180b883a 	mov	r5,r3
 800c228:	3023883a 	mov	r17,r6
 800c22c:	3825883a 	mov	r18,r7
 800c230:	003ea406 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800c234:	0011883a 	mov	r8,zero
 800c238:	000b883a 	mov	r5,zero
 800c23c:	0023883a 	mov	r17,zero
 800c240:	003f0006 	br	800be44 <__alt_data_end+0xfc00be44>
 800c244:	11fff804 	addi	r7,r2,-32
 800c248:	19c8d83a 	srl	r4,r3,r7
 800c24c:	01c00804 	movi	r7,32
 800c250:	11c07e26 	beq	r2,r7,800c44c <__subdf3+0x814>
 800c254:	01c01004 	movi	r7,64
 800c258:	3885c83a 	sub	r2,r7,r2
 800c25c:	1884983a 	sll	r2,r3,r2
 800c260:	118cb03a 	or	r6,r2,r6
 800c264:	300ec03a 	cmpne	r7,r6,zero
 800c268:	390eb03a 	or	r7,r7,r4
 800c26c:	0005883a 	mov	r2,zero
 800c270:	003f0906 	br	800be98 <__alt_data_end+0xfc00be98>
 800c274:	0101ffc4 	movi	r4,2047
 800c278:	513f991e 	bne	r10,r4,800c0e0 <__alt_data_end+0xfc00c0e0>
 800c27c:	180b883a 	mov	r5,r3
 800c280:	3023883a 	mov	r17,r6
 800c284:	5021883a 	mov	r16,r10
 800c288:	3825883a 	mov	r18,r7
 800c28c:	003e8d06 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800c290:	80001a1e 	bne	r16,zero,800c2fc <__subdf3+0x6c4>
 800c294:	2c48b03a 	or	r4,r5,r17
 800c298:	20005526 	beq	r4,zero,800c3f0 <__subdf3+0x7b8>
 800c29c:	0084303a 	nor	r2,zero,r2
 800c2a0:	1000511e 	bne	r2,zero,800c3e8 <__subdf3+0x7b0>
 800c2a4:	89a3883a 	add	r17,r17,r6
 800c2a8:	194b883a 	add	r5,r3,r5
 800c2ac:	898d803a 	cmpltu	r6,r17,r6
 800c2b0:	298b883a 	add	r5,r5,r6
 800c2b4:	5021883a 	mov	r16,r10
 800c2b8:	003efc06 	br	800beac <__alt_data_end+0xfc00beac>
 800c2bc:	1000341e 	bne	r2,zero,800c390 <__subdf3+0x758>
 800c2c0:	1984b03a 	or	r2,r3,r6
 800c2c4:	10006f26 	beq	r2,zero,800c484 <__subdf3+0x84c>
 800c2c8:	180b883a 	mov	r5,r3
 800c2cc:	3023883a 	mov	r17,r6
 800c2d0:	3825883a 	mov	r18,r7
 800c2d4:	0401ffc4 	movi	r16,2047
 800c2d8:	003e7a06 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800c2dc:	2c62b03a 	or	r17,r5,r17
 800c2e0:	8822c03a 	cmpne	r17,r17,zero
 800c2e4:	0005883a 	mov	r2,zero
 800c2e8:	003f8a06 	br	800c114 <__alt_data_end+0xfc00c114>
 800c2ec:	3821883a 	mov	r16,r7
 800c2f0:	000b883a 	mov	r5,zero
 800c2f4:	0023883a 	mov	r17,zero
 800c2f8:	003ed206 	br	800be44 <__alt_data_end+0xfc00be44>
 800c2fc:	0101ffc4 	movi	r4,2047
 800c300:	51003b26 	beq	r10,r4,800c3f0 <__subdf3+0x7b8>
 800c304:	0085c83a 	sub	r2,zero,r2
 800c308:	29402034 	orhi	r5,r5,128
 800c30c:	01000e04 	movi	r4,56
 800c310:	20806216 	blt	r4,r2,800c49c <__subdf3+0x864>
 800c314:	010007c4 	movi	r4,31
 800c318:	20806b16 	blt	r4,r2,800c4c8 <__subdf3+0x890>
 800c31c:	01000804 	movi	r4,32
 800c320:	2089c83a 	sub	r4,r4,r2
 800c324:	2912983a 	sll	r9,r5,r4
 800c328:	888ed83a 	srl	r7,r17,r2
 800c32c:	8908983a 	sll	r4,r17,r4
 800c330:	2884d83a 	srl	r2,r5,r2
 800c334:	49e2b03a 	or	r17,r9,r7
 800c338:	2008c03a 	cmpne	r4,r4,zero
 800c33c:	8922b03a 	or	r17,r17,r4
 800c340:	89a3883a 	add	r17,r17,r6
 800c344:	10c5883a 	add	r2,r2,r3
 800c348:	898d803a 	cmpltu	r6,r17,r6
 800c34c:	118b883a 	add	r5,r2,r6
 800c350:	5021883a 	mov	r16,r10
 800c354:	003ed506 	br	800beac <__alt_data_end+0xfc00beac>
 800c358:	1984b03a 	or	r2,r3,r6
 800c35c:	103e5926 	beq	r2,zero,800bcc4 <__alt_data_end+0xfc00bcc4>
 800c360:	8989c83a 	sub	r4,r17,r6
 800c364:	8911803a 	cmpltu	r8,r17,r4
 800c368:	28c5c83a 	sub	r2,r5,r3
 800c36c:	1205c83a 	sub	r2,r2,r8
 800c370:	1200202c 	andhi	r8,r2,128
 800c374:	403ef926 	beq	r8,zero,800bf5c <__alt_data_end+0xfc00bf5c>
 800c378:	3463c83a 	sub	r17,r6,r17
 800c37c:	194bc83a 	sub	r5,r3,r5
 800c380:	344d803a 	cmpltu	r6,r6,r17
 800c384:	298bc83a 	sub	r5,r5,r6
 800c388:	3825883a 	mov	r18,r7
 800c38c:	003e4d06 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800c390:	1984b03a 	or	r2,r3,r6
 800c394:	10002b26 	beq	r2,zero,800c444 <__subdf3+0x80c>
 800c398:	2808d0fa 	srli	r4,r5,3
 800c39c:	8822d0fa 	srli	r17,r17,3
 800c3a0:	280a977a 	slli	r5,r5,29
 800c3a4:	2080022c 	andhi	r2,r4,8
 800c3a8:	2c62b03a 	or	r17,r5,r17
 800c3ac:	10000826 	beq	r2,zero,800c3d0 <__subdf3+0x798>
 800c3b0:	1810d0fa 	srli	r8,r3,3
 800c3b4:	4080022c 	andhi	r2,r8,8
 800c3b8:	1000051e 	bne	r2,zero,800c3d0 <__subdf3+0x798>
 800c3bc:	300cd0fa 	srli	r6,r6,3
 800c3c0:	1804977a 	slli	r2,r3,29
 800c3c4:	4009883a 	mov	r4,r8
 800c3c8:	3825883a 	mov	r18,r7
 800c3cc:	11a2b03a 	or	r17,r2,r6
 800c3d0:	880ad77a 	srli	r5,r17,29
 800c3d4:	200890fa 	slli	r4,r4,3
 800c3d8:	882290fa 	slli	r17,r17,3
 800c3dc:	0401ffc4 	movi	r16,2047
 800c3e0:	290ab03a 	or	r5,r5,r4
 800c3e4:	003e3706 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800c3e8:	0101ffc4 	movi	r4,2047
 800c3ec:	513fc71e 	bne	r10,r4,800c30c <__alt_data_end+0xfc00c30c>
 800c3f0:	180b883a 	mov	r5,r3
 800c3f4:	3023883a 	mov	r17,r6
 800c3f8:	5021883a 	mov	r16,r10
 800c3fc:	003e3106 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800c400:	10002d26 	beq	r2,zero,800c4b8 <__subdf3+0x880>
 800c404:	1984b03a 	or	r2,r3,r6
 800c408:	10000e26 	beq	r2,zero,800c444 <__subdf3+0x80c>
 800c40c:	2808d0fa 	srli	r4,r5,3
 800c410:	8822d0fa 	srli	r17,r17,3
 800c414:	280a977a 	slli	r5,r5,29
 800c418:	2080022c 	andhi	r2,r4,8
 800c41c:	2c62b03a 	or	r17,r5,r17
 800c420:	103feb26 	beq	r2,zero,800c3d0 <__alt_data_end+0xfc00c3d0>
 800c424:	180ed0fa 	srli	r7,r3,3
 800c428:	3880022c 	andhi	r2,r7,8
 800c42c:	103fe81e 	bne	r2,zero,800c3d0 <__alt_data_end+0xfc00c3d0>
 800c430:	300cd0fa 	srli	r6,r6,3
 800c434:	1804977a 	slli	r2,r3,29
 800c438:	3809883a 	mov	r4,r7
 800c43c:	11a2b03a 	or	r17,r2,r6
 800c440:	003fe306 	br	800c3d0 <__alt_data_end+0xfc00c3d0>
 800c444:	0401ffc4 	movi	r16,2047
 800c448:	003e1e06 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800c44c:	0005883a 	mov	r2,zero
 800c450:	003f8306 	br	800c260 <__alt_data_end+0xfc00c260>
 800c454:	113ff804 	addi	r4,r2,-32
 800c458:	02000804 	movi	r8,32
 800c45c:	2908d83a 	srl	r4,r5,r4
 800c460:	12002526 	beq	r2,r8,800c4f8 <__subdf3+0x8c0>
 800c464:	02001004 	movi	r8,64
 800c468:	4085c83a 	sub	r2,r8,r2
 800c46c:	288a983a 	sll	r5,r5,r2
 800c470:	2c62b03a 	or	r17,r5,r17
 800c474:	8822c03a 	cmpne	r17,r17,zero
 800c478:	8922b03a 	or	r17,r17,r4
 800c47c:	0005883a 	mov	r2,zero
 800c480:	003f2406 	br	800c114 <__alt_data_end+0xfc00c114>
 800c484:	01402034 	movhi	r5,128
 800c488:	0011883a 	mov	r8,zero
 800c48c:	297fffc4 	addi	r5,r5,-1
 800c490:	047ffe04 	movi	r17,-8
 800c494:	0401ffc4 	movi	r16,2047
 800c498:	003e6a06 	br	800be44 <__alt_data_end+0xfc00be44>
 800c49c:	2c62b03a 	or	r17,r5,r17
 800c4a0:	8822c03a 	cmpne	r17,r17,zero
 800c4a4:	0005883a 	mov	r2,zero
 800c4a8:	003fa506 	br	800c340 <__alt_data_end+0xfc00c340>
 800c4ac:	180b883a 	mov	r5,r3
 800c4b0:	3023883a 	mov	r17,r6
 800c4b4:	003e0306 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800c4b8:	180b883a 	mov	r5,r3
 800c4bc:	3023883a 	mov	r17,r6
 800c4c0:	0401ffc4 	movi	r16,2047
 800c4c4:	003dff06 	br	800bcc4 <__alt_data_end+0xfc00bcc4>
 800c4c8:	113ff804 	addi	r4,r2,-32
 800c4cc:	01c00804 	movi	r7,32
 800c4d0:	2908d83a 	srl	r4,r5,r4
 800c4d4:	11c00a26 	beq	r2,r7,800c500 <__subdf3+0x8c8>
 800c4d8:	01c01004 	movi	r7,64
 800c4dc:	3885c83a 	sub	r2,r7,r2
 800c4e0:	288a983a 	sll	r5,r5,r2
 800c4e4:	2c62b03a 	or	r17,r5,r17
 800c4e8:	8822c03a 	cmpne	r17,r17,zero
 800c4ec:	8922b03a 	or	r17,r17,r4
 800c4f0:	0005883a 	mov	r2,zero
 800c4f4:	003f9206 	br	800c340 <__alt_data_end+0xfc00c340>
 800c4f8:	000b883a 	mov	r5,zero
 800c4fc:	003fdc06 	br	800c470 <__alt_data_end+0xfc00c470>
 800c500:	000b883a 	mov	r5,zero
 800c504:	003ff706 	br	800c4e4 <__alt_data_end+0xfc00c4e4>

0800c508 <__fixdfsi>:
 800c508:	2806d53a 	srli	r3,r5,20
 800c50c:	00800434 	movhi	r2,16
 800c510:	10bfffc4 	addi	r2,r2,-1
 800c514:	18c1ffcc 	andi	r3,r3,2047
 800c518:	0180ff84 	movi	r6,1022
 800c51c:	2884703a 	and	r2,r5,r2
 800c520:	280ad7fa 	srli	r5,r5,31
 800c524:	30c0130e 	bge	r6,r3,800c574 <__fixdfsi+0x6c>
 800c528:	01810744 	movi	r6,1053
 800c52c:	30c00d16 	blt	r6,r3,800c564 <__fixdfsi+0x5c>
 800c530:	01810cc4 	movi	r6,1075
 800c534:	30cdc83a 	sub	r6,r6,r3
 800c538:	01c007c4 	movi	r7,31
 800c53c:	10800434 	orhi	r2,r2,16
 800c540:	39800e0e 	bge	r7,r6,800c57c <__fixdfsi+0x74>
 800c544:	010104c4 	movi	r4,1043
 800c548:	20c7c83a 	sub	r3,r4,r3
 800c54c:	10c6d83a 	srl	r3,r2,r3
 800c550:	29403fcc 	andi	r5,r5,255
 800c554:	0145c83a 	sub	r2,zero,r5
 800c558:	1884f03a 	xor	r2,r3,r2
 800c55c:	1145883a 	add	r2,r2,r5
 800c560:	f800283a 	ret
 800c564:	00a00034 	movhi	r2,32768
 800c568:	10bfffc4 	addi	r2,r2,-1
 800c56c:	2885883a 	add	r2,r5,r2
 800c570:	f800283a 	ret
 800c574:	0005883a 	mov	r2,zero
 800c578:	f800283a 	ret
 800c57c:	18fefb44 	addi	r3,r3,-1043
 800c580:	2188d83a 	srl	r4,r4,r6
 800c584:	10c6983a 	sll	r3,r2,r3
 800c588:	20c6b03a 	or	r3,r4,r3
 800c58c:	003ff006 	br	800c550 <__alt_data_end+0xfc00c550>

0800c590 <__floatsidf>:
 800c590:	defffd04 	addi	sp,sp,-12
 800c594:	dc400115 	stw	r17,4(sp)
 800c598:	dfc00215 	stw	ra,8(sp)
 800c59c:	dc000015 	stw	r16,0(sp)
 800c5a0:	2023883a 	mov	r17,r4
 800c5a4:	20001426 	beq	r4,zero,800c5f8 <__floatsidf+0x68>
 800c5a8:	2020d7fa 	srli	r16,r4,31
 800c5ac:	80000126 	beq	r16,zero,800c5b4 <__floatsidf+0x24>
 800c5b0:	0123c83a 	sub	r17,zero,r4
 800c5b4:	8809883a 	mov	r4,r17
 800c5b8:	800c7040 	call	800c704 <__clzsi2>
 800c5bc:	01410784 	movi	r5,1054
 800c5c0:	00c00284 	movi	r3,10
 800c5c4:	288bc83a 	sub	r5,r5,r2
 800c5c8:	18801c16 	blt	r3,r2,800c63c <__floatsidf+0xac>
 800c5cc:	00c002c4 	movi	r3,11
 800c5d0:	1887c83a 	sub	r3,r3,r2
 800c5d4:	88c8d83a 	srl	r4,r17,r3
 800c5d8:	00c00434 	movhi	r3,16
 800c5dc:	18ffffc4 	addi	r3,r3,-1
 800c5e0:	10800544 	addi	r2,r2,21
 800c5e4:	20c8703a 	and	r4,r4,r3
 800c5e8:	8884983a 	sll	r2,r17,r2
 800c5ec:	28c1ffcc 	andi	r3,r5,2047
 800c5f0:	800d883a 	mov	r6,r16
 800c5f4:	00000406 	br	800c608 <__floatsidf+0x78>
 800c5f8:	000d883a 	mov	r6,zero
 800c5fc:	0007883a 	mov	r3,zero
 800c600:	0009883a 	mov	r4,zero
 800c604:	0005883a 	mov	r2,zero
 800c608:	180a953a 	slli	r5,r3,20
 800c60c:	31803fcc 	andi	r6,r6,255
 800c610:	00c00434 	movhi	r3,16
 800c614:	300c97fa 	slli	r6,r6,31
 800c618:	18ffffc4 	addi	r3,r3,-1
 800c61c:	20c6703a 	and	r3,r4,r3
 800c620:	1946b03a 	or	r3,r3,r5
 800c624:	1986b03a 	or	r3,r3,r6
 800c628:	dfc00217 	ldw	ra,8(sp)
 800c62c:	dc400117 	ldw	r17,4(sp)
 800c630:	dc000017 	ldw	r16,0(sp)
 800c634:	dec00304 	addi	sp,sp,12
 800c638:	f800283a 	ret
 800c63c:	10fffd44 	addi	r3,r2,-11
 800c640:	88c8983a 	sll	r4,r17,r3
 800c644:	00800434 	movhi	r2,16
 800c648:	10bfffc4 	addi	r2,r2,-1
 800c64c:	2088703a 	and	r4,r4,r2
 800c650:	28c1ffcc 	andi	r3,r5,2047
 800c654:	800d883a 	mov	r6,r16
 800c658:	0005883a 	mov	r2,zero
 800c65c:	003fea06 	br	800c608 <__alt_data_end+0xfc00c608>

0800c660 <__floatunsidf>:
 800c660:	defffe04 	addi	sp,sp,-8
 800c664:	dc000015 	stw	r16,0(sp)
 800c668:	dfc00115 	stw	ra,4(sp)
 800c66c:	2021883a 	mov	r16,r4
 800c670:	20001026 	beq	r4,zero,800c6b4 <__floatunsidf+0x54>
 800c674:	800c7040 	call	800c704 <__clzsi2>
 800c678:	01410784 	movi	r5,1054
 800c67c:	100d883a 	mov	r6,r2
 800c680:	288bc83a 	sub	r5,r5,r2
 800c684:	00800284 	movi	r2,10
 800c688:	11801616 	blt	r2,r6,800c6e4 <__floatunsidf+0x84>
 800c68c:	008002c4 	movi	r2,11
 800c690:	1185c83a 	sub	r2,r2,r6
 800c694:	8084d83a 	srl	r2,r16,r2
 800c698:	00c00434 	movhi	r3,16
 800c69c:	31c00544 	addi	r7,r6,21
 800c6a0:	18ffffc4 	addi	r3,r3,-1
 800c6a4:	81e0983a 	sll	r16,r16,r7
 800c6a8:	10cc703a 	and	r6,r2,r3
 800c6ac:	2941ffcc 	andi	r5,r5,2047
 800c6b0:	00000206 	br	800c6bc <__floatunsidf+0x5c>
 800c6b4:	000b883a 	mov	r5,zero
 800c6b8:	000d883a 	mov	r6,zero
 800c6bc:	280a953a 	slli	r5,r5,20
 800c6c0:	00c00434 	movhi	r3,16
 800c6c4:	18ffffc4 	addi	r3,r3,-1
 800c6c8:	30c6703a 	and	r3,r6,r3
 800c6cc:	8005883a 	mov	r2,r16
 800c6d0:	1946b03a 	or	r3,r3,r5
 800c6d4:	dfc00117 	ldw	ra,4(sp)
 800c6d8:	dc000017 	ldw	r16,0(sp)
 800c6dc:	dec00204 	addi	sp,sp,8
 800c6e0:	f800283a 	ret
 800c6e4:	31bffd44 	addi	r6,r6,-11
 800c6e8:	818c983a 	sll	r6,r16,r6
 800c6ec:	00800434 	movhi	r2,16
 800c6f0:	10bfffc4 	addi	r2,r2,-1
 800c6f4:	2941ffcc 	andi	r5,r5,2047
 800c6f8:	0021883a 	mov	r16,zero
 800c6fc:	308c703a 	and	r6,r6,r2
 800c700:	003fee06 	br	800c6bc <__alt_data_end+0xfc00c6bc>

0800c704 <__clzsi2>:
 800c704:	00bfffd4 	movui	r2,65535
 800c708:	11000b36 	bltu	r2,r4,800c738 <__clzsi2+0x34>
 800c70c:	00803fc4 	movi	r2,255
 800c710:	1100122e 	bgeu	r2,r4,800c75c <__clzsi2+0x58>
 800c714:	00c00204 	movi	r3,8
 800c718:	01400604 	movi	r5,24
 800c71c:	20c8d83a 	srl	r4,r4,r3
 800c720:	00820074 	movhi	r2,2049
 800c724:	10bd9504 	addi	r2,r2,-2476
 800c728:	1109883a 	add	r4,r2,r4
 800c72c:	20800003 	ldbu	r2,0(r4)
 800c730:	2885c83a 	sub	r2,r5,r2
 800c734:	f800283a 	ret
 800c738:	00804034 	movhi	r2,256
 800c73c:	10bfffc4 	addi	r2,r2,-1
 800c740:	11000336 	bltu	r2,r4,800c750 <__clzsi2+0x4c>
 800c744:	00c00404 	movi	r3,16
 800c748:	180b883a 	mov	r5,r3
 800c74c:	003ff306 	br	800c71c <__alt_data_end+0xfc00c71c>
 800c750:	00c00604 	movi	r3,24
 800c754:	01400204 	movi	r5,8
 800c758:	003ff006 	br	800c71c <__alt_data_end+0xfc00c71c>
 800c75c:	0007883a 	mov	r3,zero
 800c760:	01400804 	movi	r5,32
 800c764:	003fed06 	br	800c71c <__alt_data_end+0xfc00c71c>

0800c768 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800c768:	defffe04 	addi	sp,sp,-8
 800c76c:	dfc00115 	stw	ra,4(sp)
 800c770:	df000015 	stw	fp,0(sp)
 800c774:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800c778:	00820074 	movhi	r2,2049
 800c77c:	1084a904 	addi	r2,r2,4772
 800c780:	10800017 	ldw	r2,0(r2)
 800c784:	10000526 	beq	r2,zero,800c79c <alt_get_errno+0x34>
 800c788:	00820074 	movhi	r2,2049
 800c78c:	1084a904 	addi	r2,r2,4772
 800c790:	10800017 	ldw	r2,0(r2)
 800c794:	103ee83a 	callr	r2
 800c798:	00000206 	br	800c7a4 <alt_get_errno+0x3c>
 800c79c:	00820074 	movhi	r2,2049
 800c7a0:	108b7a04 	addi	r2,r2,11752
}
 800c7a4:	e037883a 	mov	sp,fp
 800c7a8:	dfc00117 	ldw	ra,4(sp)
 800c7ac:	df000017 	ldw	fp,0(sp)
 800c7b0:	dec00204 	addi	sp,sp,8
 800c7b4:	f800283a 	ret

0800c7b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800c7b8:	defffb04 	addi	sp,sp,-20
 800c7bc:	dfc00415 	stw	ra,16(sp)
 800c7c0:	df000315 	stw	fp,12(sp)
 800c7c4:	df000304 	addi	fp,sp,12
 800c7c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800c7cc:	e0bfff17 	ldw	r2,-4(fp)
 800c7d0:	10000616 	blt	r2,zero,800c7ec <close+0x34>
 800c7d4:	e0bfff17 	ldw	r2,-4(fp)
 800c7d8:	10c00324 	muli	r3,r2,12
 800c7dc:	00820074 	movhi	r2,2049
 800c7e0:	10801b04 	addi	r2,r2,108
 800c7e4:	1885883a 	add	r2,r3,r2
 800c7e8:	00000106 	br	800c7f0 <close+0x38>
 800c7ec:	0005883a 	mov	r2,zero
 800c7f0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 800c7f4:	e0bffd17 	ldw	r2,-12(fp)
 800c7f8:	10001926 	beq	r2,zero,800c860 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800c7fc:	e0bffd17 	ldw	r2,-12(fp)
 800c800:	10800017 	ldw	r2,0(r2)
 800c804:	10800417 	ldw	r2,16(r2)
 800c808:	10000626 	beq	r2,zero,800c824 <close+0x6c>
 800c80c:	e0bffd17 	ldw	r2,-12(fp)
 800c810:	10800017 	ldw	r2,0(r2)
 800c814:	10800417 	ldw	r2,16(r2)
 800c818:	e13ffd17 	ldw	r4,-12(fp)
 800c81c:	103ee83a 	callr	r2
 800c820:	00000106 	br	800c828 <close+0x70>
 800c824:	0005883a 	mov	r2,zero
 800c828:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800c82c:	e13fff17 	ldw	r4,-4(fp)
 800c830:	800ceb40 	call	800ceb4 <alt_release_fd>
    if (rval < 0)
 800c834:	e0bffe17 	ldw	r2,-8(fp)
 800c838:	1000070e 	bge	r2,zero,800c858 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 800c83c:	800c7680 	call	800c768 <alt_get_errno>
 800c840:	1007883a 	mov	r3,r2
 800c844:	e0bffe17 	ldw	r2,-8(fp)
 800c848:	0085c83a 	sub	r2,zero,r2
 800c84c:	18800015 	stw	r2,0(r3)
      return -1;
 800c850:	00bfffc4 	movi	r2,-1
 800c854:	00000706 	br	800c874 <close+0xbc>
    }
    return 0;
 800c858:	0005883a 	mov	r2,zero
 800c85c:	00000506 	br	800c874 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800c860:	800c7680 	call	800c768 <alt_get_errno>
 800c864:	1007883a 	mov	r3,r2
 800c868:	00801444 	movi	r2,81
 800c86c:	18800015 	stw	r2,0(r3)
    return -1;
 800c870:	00bfffc4 	movi	r2,-1
  }
}
 800c874:	e037883a 	mov	sp,fp
 800c878:	dfc00117 	ldw	ra,4(sp)
 800c87c:	df000017 	ldw	fp,0(sp)
 800c880:	dec00204 	addi	sp,sp,8
 800c884:	f800283a 	ret

0800c888 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800c888:	defffc04 	addi	sp,sp,-16
 800c88c:	df000315 	stw	fp,12(sp)
 800c890:	df000304 	addi	fp,sp,12
 800c894:	e13ffd15 	stw	r4,-12(fp)
 800c898:	e17ffe15 	stw	r5,-8(fp)
 800c89c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 800c8a0:	e0bfff17 	ldw	r2,-4(fp)
}
 800c8a4:	e037883a 	mov	sp,fp
 800c8a8:	df000017 	ldw	fp,0(sp)
 800c8ac:	dec00104 	addi	sp,sp,4
 800c8b0:	f800283a 	ret

0800c8b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800c8b4:	defffe04 	addi	sp,sp,-8
 800c8b8:	dfc00115 	stw	ra,4(sp)
 800c8bc:	df000015 	stw	fp,0(sp)
 800c8c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800c8c4:	00820074 	movhi	r2,2049
 800c8c8:	1084a904 	addi	r2,r2,4772
 800c8cc:	10800017 	ldw	r2,0(r2)
 800c8d0:	10000526 	beq	r2,zero,800c8e8 <alt_get_errno+0x34>
 800c8d4:	00820074 	movhi	r2,2049
 800c8d8:	1084a904 	addi	r2,r2,4772
 800c8dc:	10800017 	ldw	r2,0(r2)
 800c8e0:	103ee83a 	callr	r2
 800c8e4:	00000206 	br	800c8f0 <alt_get_errno+0x3c>
 800c8e8:	00820074 	movhi	r2,2049
 800c8ec:	108b7a04 	addi	r2,r2,11752
}
 800c8f0:	e037883a 	mov	sp,fp
 800c8f4:	dfc00117 	ldw	ra,4(sp)
 800c8f8:	df000017 	ldw	fp,0(sp)
 800c8fc:	dec00204 	addi	sp,sp,8
 800c900:	f800283a 	ret

0800c904 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800c904:	defffb04 	addi	sp,sp,-20
 800c908:	dfc00415 	stw	ra,16(sp)
 800c90c:	df000315 	stw	fp,12(sp)
 800c910:	df000304 	addi	fp,sp,12
 800c914:	e13ffe15 	stw	r4,-8(fp)
 800c918:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800c91c:	e0bffe17 	ldw	r2,-8(fp)
 800c920:	10000616 	blt	r2,zero,800c93c <fstat+0x38>
 800c924:	e0bffe17 	ldw	r2,-8(fp)
 800c928:	10c00324 	muli	r3,r2,12
 800c92c:	00820074 	movhi	r2,2049
 800c930:	10801b04 	addi	r2,r2,108
 800c934:	1885883a 	add	r2,r3,r2
 800c938:	00000106 	br	800c940 <fstat+0x3c>
 800c93c:	0005883a 	mov	r2,zero
 800c940:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 800c944:	e0bffd17 	ldw	r2,-12(fp)
 800c948:	10001026 	beq	r2,zero,800c98c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800c94c:	e0bffd17 	ldw	r2,-12(fp)
 800c950:	10800017 	ldw	r2,0(r2)
 800c954:	10800817 	ldw	r2,32(r2)
 800c958:	10000726 	beq	r2,zero,800c978 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 800c95c:	e0bffd17 	ldw	r2,-12(fp)
 800c960:	10800017 	ldw	r2,0(r2)
 800c964:	10800817 	ldw	r2,32(r2)
 800c968:	e13ffd17 	ldw	r4,-12(fp)
 800c96c:	e17fff17 	ldw	r5,-4(fp)
 800c970:	103ee83a 	callr	r2
 800c974:	00000a06 	br	800c9a0 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800c978:	e0bfff17 	ldw	r2,-4(fp)
 800c97c:	00c80004 	movi	r3,8192
 800c980:	10c00115 	stw	r3,4(r2)
      return 0;
 800c984:	0005883a 	mov	r2,zero
 800c988:	00000506 	br	800c9a0 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800c98c:	800c8b40 	call	800c8b4 <alt_get_errno>
 800c990:	1007883a 	mov	r3,r2
 800c994:	00801444 	movi	r2,81
 800c998:	18800015 	stw	r2,0(r3)
    return -1;
 800c99c:	00bfffc4 	movi	r2,-1
  }
}
 800c9a0:	e037883a 	mov	sp,fp
 800c9a4:	dfc00117 	ldw	ra,4(sp)
 800c9a8:	df000017 	ldw	fp,0(sp)
 800c9ac:	dec00204 	addi	sp,sp,8
 800c9b0:	f800283a 	ret

0800c9b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800c9b4:	defffe04 	addi	sp,sp,-8
 800c9b8:	dfc00115 	stw	ra,4(sp)
 800c9bc:	df000015 	stw	fp,0(sp)
 800c9c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800c9c4:	00820074 	movhi	r2,2049
 800c9c8:	1084a904 	addi	r2,r2,4772
 800c9cc:	10800017 	ldw	r2,0(r2)
 800c9d0:	10000526 	beq	r2,zero,800c9e8 <alt_get_errno+0x34>
 800c9d4:	00820074 	movhi	r2,2049
 800c9d8:	1084a904 	addi	r2,r2,4772
 800c9dc:	10800017 	ldw	r2,0(r2)
 800c9e0:	103ee83a 	callr	r2
 800c9e4:	00000206 	br	800c9f0 <alt_get_errno+0x3c>
 800c9e8:	00820074 	movhi	r2,2049
 800c9ec:	108b7a04 	addi	r2,r2,11752
}
 800c9f0:	e037883a 	mov	sp,fp
 800c9f4:	dfc00117 	ldw	ra,4(sp)
 800c9f8:	df000017 	ldw	fp,0(sp)
 800c9fc:	dec00204 	addi	sp,sp,8
 800ca00:	f800283a 	ret

0800ca04 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800ca04:	deffed04 	addi	sp,sp,-76
 800ca08:	dfc01215 	stw	ra,72(sp)
 800ca0c:	df001115 	stw	fp,68(sp)
 800ca10:	df001104 	addi	fp,sp,68
 800ca14:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ca18:	e0bfff17 	ldw	r2,-4(fp)
 800ca1c:	10000616 	blt	r2,zero,800ca38 <isatty+0x34>
 800ca20:	e0bfff17 	ldw	r2,-4(fp)
 800ca24:	10c00324 	muli	r3,r2,12
 800ca28:	00820074 	movhi	r2,2049
 800ca2c:	10801b04 	addi	r2,r2,108
 800ca30:	1885883a 	add	r2,r3,r2
 800ca34:	00000106 	br	800ca3c <isatty+0x38>
 800ca38:	0005883a 	mov	r2,zero
 800ca3c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 800ca40:	e0bfef17 	ldw	r2,-68(fp)
 800ca44:	10000e26 	beq	r2,zero,800ca80 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800ca48:	e0bfef17 	ldw	r2,-68(fp)
 800ca4c:	10800017 	ldw	r2,0(r2)
 800ca50:	10800817 	ldw	r2,32(r2)
 800ca54:	1000021e 	bne	r2,zero,800ca60 <isatty+0x5c>
    {
      return 1;
 800ca58:	00800044 	movi	r2,1
 800ca5c:	00000d06 	br	800ca94 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800ca60:	e0bff004 	addi	r2,fp,-64
 800ca64:	e13fff17 	ldw	r4,-4(fp)
 800ca68:	100b883a 	mov	r5,r2
 800ca6c:	800c9040 	call	800c904 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800ca70:	e0bff117 	ldw	r2,-60(fp)
 800ca74:	10880020 	cmpeqi	r2,r2,8192
 800ca78:	10803fcc 	andi	r2,r2,255
 800ca7c:	00000506 	br	800ca94 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800ca80:	800c9b40 	call	800c9b4 <alt_get_errno>
 800ca84:	1007883a 	mov	r3,r2
 800ca88:	00801444 	movi	r2,81
 800ca8c:	18800015 	stw	r2,0(r3)
    return 0;
 800ca90:	0005883a 	mov	r2,zero
  }
}
 800ca94:	e037883a 	mov	sp,fp
 800ca98:	dfc00117 	ldw	ra,4(sp)
 800ca9c:	df000017 	ldw	fp,0(sp)
 800caa0:	dec00204 	addi	sp,sp,8
 800caa4:	f800283a 	ret

0800caa8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800caa8:	defffc04 	addi	sp,sp,-16
 800caac:	df000315 	stw	fp,12(sp)
 800cab0:	df000304 	addi	fp,sp,12
 800cab4:	e13ffd15 	stw	r4,-12(fp)
 800cab8:	e17ffe15 	stw	r5,-8(fp)
 800cabc:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 800cac0:	e0fffe17 	ldw	r3,-8(fp)
 800cac4:	e0bffd17 	ldw	r2,-12(fp)
 800cac8:	18800c26 	beq	r3,r2,800cafc <alt_load_section+0x54>
  {
    while( to != end )
 800cacc:	00000806 	br	800caf0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800cad0:	e0bffe17 	ldw	r2,-8(fp)
 800cad4:	10c00104 	addi	r3,r2,4
 800cad8:	e0fffe15 	stw	r3,-8(fp)
 800cadc:	e0fffd17 	ldw	r3,-12(fp)
 800cae0:	19000104 	addi	r4,r3,4
 800cae4:	e13ffd15 	stw	r4,-12(fp)
 800cae8:	18c00017 	ldw	r3,0(r3)
 800caec:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 800caf0:	e0fffe17 	ldw	r3,-8(fp)
 800caf4:	e0bfff17 	ldw	r2,-4(fp)
 800caf8:	18bff51e 	bne	r3,r2,800cad0 <__alt_data_end+0xfc00cad0>
    {
      *to++ = *from++;
    }
  }
}
 800cafc:	e037883a 	mov	sp,fp
 800cb00:	df000017 	ldw	fp,0(sp)
 800cb04:	dec00104 	addi	sp,sp,4
 800cb08:	f800283a 	ret

0800cb0c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800cb0c:	defffe04 	addi	sp,sp,-8
 800cb10:	dfc00115 	stw	ra,4(sp)
 800cb14:	df000015 	stw	fp,0(sp)
 800cb18:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800cb1c:	01020074 	movhi	r4,2049
 800cb20:	2104ae04 	addi	r4,r4,4792
 800cb24:	01420074 	movhi	r5,2049
 800cb28:	297de804 	addi	r5,r5,-2144
 800cb2c:	01820074 	movhi	r6,2049
 800cb30:	3184ae04 	addi	r6,r6,4792
 800cb34:	800caa80 	call	800caa8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800cb38:	01020034 	movhi	r4,2048
 800cb3c:	21000804 	addi	r4,r4,32
 800cb40:	01420034 	movhi	r5,2048
 800cb44:	29400804 	addi	r5,r5,32
 800cb48:	01820034 	movhi	r6,2048
 800cb4c:	31806f04 	addi	r6,r6,444
 800cb50:	800caa80 	call	800caa8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800cb54:	01020074 	movhi	r4,2049
 800cb58:	213d0004 	addi	r4,r4,-3072
 800cb5c:	01420074 	movhi	r5,2049
 800cb60:	297d0004 	addi	r5,r5,-3072
 800cb64:	01820074 	movhi	r6,2049
 800cb68:	31bde804 	addi	r6,r6,-2144
 800cb6c:	800caa80 	call	800caa8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800cb70:	800e3480 	call	800e348 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800cb74:	800e5a00 	call	800e5a0 <alt_icache_flush_all>
}
 800cb78:	e037883a 	mov	sp,fp
 800cb7c:	dfc00117 	ldw	ra,4(sp)
 800cb80:	df000017 	ldw	fp,0(sp)
 800cb84:	dec00204 	addi	sp,sp,8
 800cb88:	f800283a 	ret

0800cb8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cb8c:	defffe04 	addi	sp,sp,-8
 800cb90:	dfc00115 	stw	ra,4(sp)
 800cb94:	df000015 	stw	fp,0(sp)
 800cb98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cb9c:	00820074 	movhi	r2,2049
 800cba0:	1084a904 	addi	r2,r2,4772
 800cba4:	10800017 	ldw	r2,0(r2)
 800cba8:	10000526 	beq	r2,zero,800cbc0 <alt_get_errno+0x34>
 800cbac:	00820074 	movhi	r2,2049
 800cbb0:	1084a904 	addi	r2,r2,4772
 800cbb4:	10800017 	ldw	r2,0(r2)
 800cbb8:	103ee83a 	callr	r2
 800cbbc:	00000206 	br	800cbc8 <alt_get_errno+0x3c>
 800cbc0:	00820074 	movhi	r2,2049
 800cbc4:	108b7a04 	addi	r2,r2,11752
}
 800cbc8:	e037883a 	mov	sp,fp
 800cbcc:	dfc00117 	ldw	ra,4(sp)
 800cbd0:	df000017 	ldw	fp,0(sp)
 800cbd4:	dec00204 	addi	sp,sp,8
 800cbd8:	f800283a 	ret

0800cbdc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800cbdc:	defff904 	addi	sp,sp,-28
 800cbe0:	dfc00615 	stw	ra,24(sp)
 800cbe4:	df000515 	stw	fp,20(sp)
 800cbe8:	df000504 	addi	fp,sp,20
 800cbec:	e13ffd15 	stw	r4,-12(fp)
 800cbf0:	e17ffe15 	stw	r5,-8(fp)
 800cbf4:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800cbf8:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800cbfc:	e0bffd17 	ldw	r2,-12(fp)
 800cc00:	10000616 	blt	r2,zero,800cc1c <lseek+0x40>
 800cc04:	e0bffd17 	ldw	r2,-12(fp)
 800cc08:	10c00324 	muli	r3,r2,12
 800cc0c:	00820074 	movhi	r2,2049
 800cc10:	10801b04 	addi	r2,r2,108
 800cc14:	1885883a 	add	r2,r3,r2
 800cc18:	00000106 	br	800cc20 <lseek+0x44>
 800cc1c:	0005883a 	mov	r2,zero
 800cc20:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 800cc24:	e0bffc17 	ldw	r2,-16(fp)
 800cc28:	10001026 	beq	r2,zero,800cc6c <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800cc2c:	e0bffc17 	ldw	r2,-16(fp)
 800cc30:	10800017 	ldw	r2,0(r2)
 800cc34:	10800717 	ldw	r2,28(r2)
 800cc38:	10000926 	beq	r2,zero,800cc60 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800cc3c:	e0bffc17 	ldw	r2,-16(fp)
 800cc40:	10800017 	ldw	r2,0(r2)
 800cc44:	10800717 	ldw	r2,28(r2)
 800cc48:	e13ffc17 	ldw	r4,-16(fp)
 800cc4c:	e17ffe17 	ldw	r5,-8(fp)
 800cc50:	e1bfff17 	ldw	r6,-4(fp)
 800cc54:	103ee83a 	callr	r2
 800cc58:	e0bffb15 	stw	r2,-20(fp)
 800cc5c:	00000506 	br	800cc74 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800cc60:	00bfde84 	movi	r2,-134
 800cc64:	e0bffb15 	stw	r2,-20(fp)
 800cc68:	00000206 	br	800cc74 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 800cc6c:	00bfebc4 	movi	r2,-81
 800cc70:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 800cc74:	e0bffb17 	ldw	r2,-20(fp)
 800cc78:	1000070e 	bge	r2,zero,800cc98 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 800cc7c:	800cb8c0 	call	800cb8c <alt_get_errno>
 800cc80:	1007883a 	mov	r3,r2
 800cc84:	e0bffb17 	ldw	r2,-20(fp)
 800cc88:	0085c83a 	sub	r2,zero,r2
 800cc8c:	18800015 	stw	r2,0(r3)
    rc = -1;
 800cc90:	00bfffc4 	movi	r2,-1
 800cc94:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 800cc98:	e0bffb17 	ldw	r2,-20(fp)
}
 800cc9c:	e037883a 	mov	sp,fp
 800cca0:	dfc00117 	ldw	ra,4(sp)
 800cca4:	df000017 	ldw	fp,0(sp)
 800cca8:	dec00204 	addi	sp,sp,8
 800ccac:	f800283a 	ret

0800ccb0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800ccb0:	defffd04 	addi	sp,sp,-12
 800ccb4:	dfc00215 	stw	ra,8(sp)
 800ccb8:	df000115 	stw	fp,4(sp)
 800ccbc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800ccc0:	0009883a 	mov	r4,zero
 800ccc4:	800d1440 	call	800d144 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800ccc8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800cccc:	800d1780 	call	800d178 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800ccd0:	01020074 	movhi	r4,2049
 800ccd4:	213dd804 	addi	r4,r4,-2208
 800ccd8:	01420074 	movhi	r5,2049
 800ccdc:	297dd804 	addi	r5,r5,-2208
 800cce0:	01820074 	movhi	r6,2049
 800cce4:	31bdd804 	addi	r6,r6,-2208
 800cce8:	800e9600 	call	800e960 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800ccec:	800e4580 	call	800e458 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800ccf0:	01020074 	movhi	r4,2049
 800ccf4:	21392d04 	addi	r4,r4,-6988
 800ccf8:	800f05c0 	call	800f05c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800ccfc:	d126dd17 	ldw	r4,-25740(gp)
 800cd00:	d0e6de17 	ldw	r3,-25736(gp)
 800cd04:	d0a6df17 	ldw	r2,-25732(gp)
 800cd08:	180b883a 	mov	r5,r3
 800cd0c:	100d883a 	mov	r6,r2
 800cd10:	80001f80 	call	80001f8 <main>
 800cd14:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800cd18:	01000044 	movi	r4,1
 800cd1c:	800c7b80 	call	800c7b8 <close>
  exit (result);
 800cd20:	e13fff17 	ldw	r4,-4(fp)
 800cd24:	800f0700 	call	800f070 <exit>

0800cd28 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800cd28:	defffe04 	addi	sp,sp,-8
 800cd2c:	df000115 	stw	fp,4(sp)
 800cd30:	df000104 	addi	fp,sp,4
 800cd34:	e13fff15 	stw	r4,-4(fp)
}
 800cd38:	e037883a 	mov	sp,fp
 800cd3c:	df000017 	ldw	fp,0(sp)
 800cd40:	dec00104 	addi	sp,sp,4
 800cd44:	f800283a 	ret

0800cd48 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800cd48:	defffe04 	addi	sp,sp,-8
 800cd4c:	df000115 	stw	fp,4(sp)
 800cd50:	df000104 	addi	fp,sp,4
 800cd54:	e13fff15 	stw	r4,-4(fp)
}
 800cd58:	e037883a 	mov	sp,fp
 800cd5c:	df000017 	ldw	fp,0(sp)
 800cd60:	dec00104 	addi	sp,sp,4
 800cd64:	f800283a 	ret

0800cd68 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cd68:	defffe04 	addi	sp,sp,-8
 800cd6c:	dfc00115 	stw	ra,4(sp)
 800cd70:	df000015 	stw	fp,0(sp)
 800cd74:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cd78:	00820074 	movhi	r2,2049
 800cd7c:	1084a904 	addi	r2,r2,4772
 800cd80:	10800017 	ldw	r2,0(r2)
 800cd84:	10000526 	beq	r2,zero,800cd9c <alt_get_errno+0x34>
 800cd88:	00820074 	movhi	r2,2049
 800cd8c:	1084a904 	addi	r2,r2,4772
 800cd90:	10800017 	ldw	r2,0(r2)
 800cd94:	103ee83a 	callr	r2
 800cd98:	00000206 	br	800cda4 <alt_get_errno+0x3c>
 800cd9c:	00820074 	movhi	r2,2049
 800cda0:	108b7a04 	addi	r2,r2,11752
}
 800cda4:	e037883a 	mov	sp,fp
 800cda8:	dfc00117 	ldw	ra,4(sp)
 800cdac:	df000017 	ldw	fp,0(sp)
 800cdb0:	dec00204 	addi	sp,sp,8
 800cdb4:	f800283a 	ret

0800cdb8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800cdb8:	defff904 	addi	sp,sp,-28
 800cdbc:	dfc00615 	stw	ra,24(sp)
 800cdc0:	df000515 	stw	fp,20(sp)
 800cdc4:	df000504 	addi	fp,sp,20
 800cdc8:	e13ffd15 	stw	r4,-12(fp)
 800cdcc:	e17ffe15 	stw	r5,-8(fp)
 800cdd0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800cdd4:	e0bffd17 	ldw	r2,-12(fp)
 800cdd8:	10000616 	blt	r2,zero,800cdf4 <read+0x3c>
 800cddc:	e0bffd17 	ldw	r2,-12(fp)
 800cde0:	10c00324 	muli	r3,r2,12
 800cde4:	00820074 	movhi	r2,2049
 800cde8:	10801b04 	addi	r2,r2,108
 800cdec:	1885883a 	add	r2,r3,r2
 800cdf0:	00000106 	br	800cdf8 <read+0x40>
 800cdf4:	0005883a 	mov	r2,zero
 800cdf8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800cdfc:	e0bffb17 	ldw	r2,-20(fp)
 800ce00:	10002226 	beq	r2,zero,800ce8c <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800ce04:	e0bffb17 	ldw	r2,-20(fp)
 800ce08:	10800217 	ldw	r2,8(r2)
 800ce0c:	108000cc 	andi	r2,r2,3
 800ce10:	10800060 	cmpeqi	r2,r2,1
 800ce14:	1000181e 	bne	r2,zero,800ce78 <read+0xc0>
        (fd->dev->read))
 800ce18:	e0bffb17 	ldw	r2,-20(fp)
 800ce1c:	10800017 	ldw	r2,0(r2)
 800ce20:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800ce24:	10001426 	beq	r2,zero,800ce78 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800ce28:	e0bffb17 	ldw	r2,-20(fp)
 800ce2c:	10800017 	ldw	r2,0(r2)
 800ce30:	10800517 	ldw	r2,20(r2)
 800ce34:	e0ffff17 	ldw	r3,-4(fp)
 800ce38:	e13ffb17 	ldw	r4,-20(fp)
 800ce3c:	e17ffe17 	ldw	r5,-8(fp)
 800ce40:	180d883a 	mov	r6,r3
 800ce44:	103ee83a 	callr	r2
 800ce48:	e0bffc15 	stw	r2,-16(fp)
 800ce4c:	e0bffc17 	ldw	r2,-16(fp)
 800ce50:	1000070e 	bge	r2,zero,800ce70 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 800ce54:	800cd680 	call	800cd68 <alt_get_errno>
 800ce58:	1007883a 	mov	r3,r2
 800ce5c:	e0bffc17 	ldw	r2,-16(fp)
 800ce60:	0085c83a 	sub	r2,zero,r2
 800ce64:	18800015 	stw	r2,0(r3)
          return -1;
 800ce68:	00bfffc4 	movi	r2,-1
 800ce6c:	00000c06 	br	800cea0 <read+0xe8>
        }
        return rval;
 800ce70:	e0bffc17 	ldw	r2,-16(fp)
 800ce74:	00000a06 	br	800cea0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800ce78:	800cd680 	call	800cd68 <alt_get_errno>
 800ce7c:	1007883a 	mov	r3,r2
 800ce80:	00800344 	movi	r2,13
 800ce84:	18800015 	stw	r2,0(r3)
 800ce88:	00000406 	br	800ce9c <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800ce8c:	800cd680 	call	800cd68 <alt_get_errno>
 800ce90:	1007883a 	mov	r3,r2
 800ce94:	00801444 	movi	r2,81
 800ce98:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800ce9c:	00bfffc4 	movi	r2,-1
}
 800cea0:	e037883a 	mov	sp,fp
 800cea4:	dfc00117 	ldw	ra,4(sp)
 800cea8:	df000017 	ldw	fp,0(sp)
 800ceac:	dec00204 	addi	sp,sp,8
 800ceb0:	f800283a 	ret

0800ceb4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800ceb4:	defffe04 	addi	sp,sp,-8
 800ceb8:	df000115 	stw	fp,4(sp)
 800cebc:	df000104 	addi	fp,sp,4
 800cec0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800cec4:	e0bfff17 	ldw	r2,-4(fp)
 800cec8:	108000d0 	cmplti	r2,r2,3
 800cecc:	10000d1e 	bne	r2,zero,800cf04 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800ced0:	00820074 	movhi	r2,2049
 800ced4:	10801b04 	addi	r2,r2,108
 800ced8:	e0ffff17 	ldw	r3,-4(fp)
 800cedc:	18c00324 	muli	r3,r3,12
 800cee0:	10c5883a 	add	r2,r2,r3
 800cee4:	10800204 	addi	r2,r2,8
 800cee8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 800ceec:	00820074 	movhi	r2,2049
 800cef0:	10801b04 	addi	r2,r2,108
 800cef4:	e0ffff17 	ldw	r3,-4(fp)
 800cef8:	18c00324 	muli	r3,r3,12
 800cefc:	10c5883a 	add	r2,r2,r3
 800cf00:	10000015 	stw	zero,0(r2)
  }
}
 800cf04:	e037883a 	mov	sp,fp
 800cf08:	df000017 	ldw	fp,0(sp)
 800cf0c:	dec00104 	addi	sp,sp,4
 800cf10:	f800283a 	ret

0800cf14 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800cf14:	defff904 	addi	sp,sp,-28
 800cf18:	df000615 	stw	fp,24(sp)
 800cf1c:	df000604 	addi	fp,sp,24
 800cf20:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800cf24:	0005303a 	rdctl	r2,status
 800cf28:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800cf2c:	e0fffc17 	ldw	r3,-16(fp)
 800cf30:	00bfff84 	movi	r2,-2
 800cf34:	1884703a 	and	r2,r3,r2
 800cf38:	1001703a 	wrctl	status,r2
  
  return context;
 800cf3c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800cf40:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800cf44:	d0a00c17 	ldw	r2,-32720(gp)
 800cf48:	10c000c4 	addi	r3,r2,3
 800cf4c:	00bfff04 	movi	r2,-4
 800cf50:	1884703a 	and	r2,r3,r2
 800cf54:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800cf58:	d0e00c17 	ldw	r3,-32720(gp)
 800cf5c:	e0bfff17 	ldw	r2,-4(fp)
 800cf60:	1887883a 	add	r3,r3,r2
 800cf64:	00830034 	movhi	r2,3072
 800cf68:	10800004 	addi	r2,r2,0
 800cf6c:	10c0062e 	bgeu	r2,r3,800cf88 <sbrk+0x74>
 800cf70:	e0bffa17 	ldw	r2,-24(fp)
 800cf74:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800cf78:	e0bffd17 	ldw	r2,-12(fp)
 800cf7c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800cf80:	00bfffc4 	movi	r2,-1
 800cf84:	00000b06 	br	800cfb4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800cf88:	d0a00c17 	ldw	r2,-32720(gp)
 800cf8c:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 800cf90:	d0e00c17 	ldw	r3,-32720(gp)
 800cf94:	e0bfff17 	ldw	r2,-4(fp)
 800cf98:	1885883a 	add	r2,r3,r2
 800cf9c:	d0a00c15 	stw	r2,-32720(gp)
 800cfa0:	e0bffa17 	ldw	r2,-24(fp)
 800cfa4:	e0bffe15 	stw	r2,-8(fp)
 800cfa8:	e0bffe17 	ldw	r2,-8(fp)
 800cfac:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800cfb0:	e0bffb17 	ldw	r2,-20(fp)
} 
 800cfb4:	e037883a 	mov	sp,fp
 800cfb8:	df000017 	ldw	fp,0(sp)
 800cfbc:	dec00104 	addi	sp,sp,4
 800cfc0:	f800283a 	ret

0800cfc4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cfc4:	defffe04 	addi	sp,sp,-8
 800cfc8:	dfc00115 	stw	ra,4(sp)
 800cfcc:	df000015 	stw	fp,0(sp)
 800cfd0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cfd4:	00820074 	movhi	r2,2049
 800cfd8:	1084a904 	addi	r2,r2,4772
 800cfdc:	10800017 	ldw	r2,0(r2)
 800cfe0:	10000526 	beq	r2,zero,800cff8 <alt_get_errno+0x34>
 800cfe4:	00820074 	movhi	r2,2049
 800cfe8:	1084a904 	addi	r2,r2,4772
 800cfec:	10800017 	ldw	r2,0(r2)
 800cff0:	103ee83a 	callr	r2
 800cff4:	00000206 	br	800d000 <alt_get_errno+0x3c>
 800cff8:	00820074 	movhi	r2,2049
 800cffc:	108b7a04 	addi	r2,r2,11752
}
 800d000:	e037883a 	mov	sp,fp
 800d004:	dfc00117 	ldw	ra,4(sp)
 800d008:	df000017 	ldw	fp,0(sp)
 800d00c:	dec00204 	addi	sp,sp,8
 800d010:	f800283a 	ret

0800d014 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800d014:	defff904 	addi	sp,sp,-28
 800d018:	dfc00615 	stw	ra,24(sp)
 800d01c:	df000515 	stw	fp,20(sp)
 800d020:	df000504 	addi	fp,sp,20
 800d024:	e13ffd15 	stw	r4,-12(fp)
 800d028:	e17ffe15 	stw	r5,-8(fp)
 800d02c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d030:	e0bffd17 	ldw	r2,-12(fp)
 800d034:	10000616 	blt	r2,zero,800d050 <write+0x3c>
 800d038:	e0bffd17 	ldw	r2,-12(fp)
 800d03c:	10c00324 	muli	r3,r2,12
 800d040:	00820074 	movhi	r2,2049
 800d044:	10801b04 	addi	r2,r2,108
 800d048:	1885883a 	add	r2,r3,r2
 800d04c:	00000106 	br	800d054 <write+0x40>
 800d050:	0005883a 	mov	r2,zero
 800d054:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 800d058:	e0bffb17 	ldw	r2,-20(fp)
 800d05c:	10002126 	beq	r2,zero,800d0e4 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800d060:	e0bffb17 	ldw	r2,-20(fp)
 800d064:	10800217 	ldw	r2,8(r2)
 800d068:	108000cc 	andi	r2,r2,3
 800d06c:	10001826 	beq	r2,zero,800d0d0 <write+0xbc>
 800d070:	e0bffb17 	ldw	r2,-20(fp)
 800d074:	10800017 	ldw	r2,0(r2)
 800d078:	10800617 	ldw	r2,24(r2)
 800d07c:	10001426 	beq	r2,zero,800d0d0 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800d080:	e0bffb17 	ldw	r2,-20(fp)
 800d084:	10800017 	ldw	r2,0(r2)
 800d088:	10800617 	ldw	r2,24(r2)
 800d08c:	e0ffff17 	ldw	r3,-4(fp)
 800d090:	e13ffb17 	ldw	r4,-20(fp)
 800d094:	e17ffe17 	ldw	r5,-8(fp)
 800d098:	180d883a 	mov	r6,r3
 800d09c:	103ee83a 	callr	r2
 800d0a0:	e0bffc15 	stw	r2,-16(fp)
 800d0a4:	e0bffc17 	ldw	r2,-16(fp)
 800d0a8:	1000070e 	bge	r2,zero,800d0c8 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 800d0ac:	800cfc40 	call	800cfc4 <alt_get_errno>
 800d0b0:	1007883a 	mov	r3,r2
 800d0b4:	e0bffc17 	ldw	r2,-16(fp)
 800d0b8:	0085c83a 	sub	r2,zero,r2
 800d0bc:	18800015 	stw	r2,0(r3)
        return -1;
 800d0c0:	00bfffc4 	movi	r2,-1
 800d0c4:	00000c06 	br	800d0f8 <write+0xe4>
      }
      return rval;
 800d0c8:	e0bffc17 	ldw	r2,-16(fp)
 800d0cc:	00000a06 	br	800d0f8 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800d0d0:	800cfc40 	call	800cfc4 <alt_get_errno>
 800d0d4:	1007883a 	mov	r3,r2
 800d0d8:	00800344 	movi	r2,13
 800d0dc:	18800015 	stw	r2,0(r3)
 800d0e0:	00000406 	br	800d0f4 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800d0e4:	800cfc40 	call	800cfc4 <alt_get_errno>
 800d0e8:	1007883a 	mov	r3,r2
 800d0ec:	00801444 	movi	r2,81
 800d0f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800d0f4:	00bfffc4 	movi	r2,-1
}
 800d0f8:	e037883a 	mov	sp,fp
 800d0fc:	dfc00117 	ldw	ra,4(sp)
 800d100:	df000017 	ldw	fp,0(sp)
 800d104:	dec00204 	addi	sp,sp,8
 800d108:	f800283a 	ret

0800d10c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800d10c:	defffd04 	addi	sp,sp,-12
 800d110:	dfc00215 	stw	ra,8(sp)
 800d114:	df000115 	stw	fp,4(sp)
 800d118:	df000104 	addi	fp,sp,4
 800d11c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800d120:	e13fff17 	ldw	r4,-4(fp)
 800d124:	01420074 	movhi	r5,2049
 800d128:	2944a604 	addi	r5,r5,4760
 800d12c:	800e3b40 	call	800e3b4 <alt_dev_llist_insert>
}
 800d130:	e037883a 	mov	sp,fp
 800d134:	dfc00117 	ldw	ra,4(sp)
 800d138:	df000017 	ldw	fp,0(sp)
 800d13c:	dec00204 	addi	sp,sp,8
 800d140:	f800283a 	ret

0800d144 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800d144:	defffd04 	addi	sp,sp,-12
 800d148:	dfc00215 	stw	ra,8(sp)
 800d14c:	df000115 	stw	fp,4(sp)
 800d150:	df000104 	addi	fp,sp,4
 800d154:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 800d158:	800ede80 	call	800ede8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800d15c:	00800044 	movi	r2,1
 800d160:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800d164:	e037883a 	mov	sp,fp
 800d168:	dfc00117 	ldw	ra,4(sp)
 800d16c:	df000017 	ldw	fp,0(sp)
 800d170:	dec00204 	addi	sp,sp,8
 800d174:	f800283a 	ret

0800d178 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800d178:	defffe04 	addi	sp,sp,-8
 800d17c:	dfc00115 	stw	ra,4(sp)
 800d180:	df000015 	stw	fp,0(sp)
 800d184:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800d188:	01082004 	movi	r4,8320
 800d18c:	000b883a 	mov	r5,zero
 800d190:	01800104 	movi	r6,4
 800d194:	01c0fa04 	movi	r7,1000
 800d198:	800dca80 	call	800dca8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800d19c:	01020074 	movhi	r4,2049
 800d1a0:	21008504 	addi	r4,r4,532
 800d1a4:	000b883a 	mov	r5,zero
 800d1a8:	01800144 	movi	r6,5
 800d1ac:	800d34c0 	call	800d34c <altera_avalon_jtag_uart_init>
 800d1b0:	01020074 	movhi	r4,2049
 800d1b4:	21007b04 	addi	r4,r4,492
 800d1b8:	800d10c0 	call	800d10c <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 800d1bc:	01020074 	movhi	r4,2049
 800d1c0:	21049304 	addi	r4,r4,4684
 800d1c4:	800dde00 	call	800dde0 <alt_up_character_lcd_init>
 800d1c8:	01020074 	movhi	r4,2049
 800d1cc:	21049304 	addi	r4,r4,4684
 800d1d0:	800d10c0 	call	800d10c <alt_dev_reg>
}
 800d1d4:	e037883a 	mov	sp,fp
 800d1d8:	dfc00117 	ldw	ra,4(sp)
 800d1dc:	df000017 	ldw	fp,0(sp)
 800d1e0:	dec00204 	addi	sp,sp,8
 800d1e4:	f800283a 	ret

0800d1e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800d1e8:	defffa04 	addi	sp,sp,-24
 800d1ec:	dfc00515 	stw	ra,20(sp)
 800d1f0:	df000415 	stw	fp,16(sp)
 800d1f4:	df000404 	addi	fp,sp,16
 800d1f8:	e13ffd15 	stw	r4,-12(fp)
 800d1fc:	e17ffe15 	stw	r5,-8(fp)
 800d200:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800d204:	e0bffd17 	ldw	r2,-12(fp)
 800d208:	10800017 	ldw	r2,0(r2)
 800d20c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800d210:	e0bffc17 	ldw	r2,-16(fp)
 800d214:	10c00a04 	addi	r3,r2,40
 800d218:	e0bffd17 	ldw	r2,-12(fp)
 800d21c:	10800217 	ldw	r2,8(r2)
 800d220:	1809883a 	mov	r4,r3
 800d224:	e17ffe17 	ldw	r5,-8(fp)
 800d228:	e1bfff17 	ldw	r6,-4(fp)
 800d22c:	100f883a 	mov	r7,r2
 800d230:	800d8100 	call	800d810 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800d234:	e037883a 	mov	sp,fp
 800d238:	dfc00117 	ldw	ra,4(sp)
 800d23c:	df000017 	ldw	fp,0(sp)
 800d240:	dec00204 	addi	sp,sp,8
 800d244:	f800283a 	ret

0800d248 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800d248:	defffa04 	addi	sp,sp,-24
 800d24c:	dfc00515 	stw	ra,20(sp)
 800d250:	df000415 	stw	fp,16(sp)
 800d254:	df000404 	addi	fp,sp,16
 800d258:	e13ffd15 	stw	r4,-12(fp)
 800d25c:	e17ffe15 	stw	r5,-8(fp)
 800d260:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800d264:	e0bffd17 	ldw	r2,-12(fp)
 800d268:	10800017 	ldw	r2,0(r2)
 800d26c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800d270:	e0bffc17 	ldw	r2,-16(fp)
 800d274:	10c00a04 	addi	r3,r2,40
 800d278:	e0bffd17 	ldw	r2,-12(fp)
 800d27c:	10800217 	ldw	r2,8(r2)
 800d280:	1809883a 	mov	r4,r3
 800d284:	e17ffe17 	ldw	r5,-8(fp)
 800d288:	e1bfff17 	ldw	r6,-4(fp)
 800d28c:	100f883a 	mov	r7,r2
 800d290:	800da1c0 	call	800da1c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800d294:	e037883a 	mov	sp,fp
 800d298:	dfc00117 	ldw	ra,4(sp)
 800d29c:	df000017 	ldw	fp,0(sp)
 800d2a0:	dec00204 	addi	sp,sp,8
 800d2a4:	f800283a 	ret

0800d2a8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800d2a8:	defffc04 	addi	sp,sp,-16
 800d2ac:	dfc00315 	stw	ra,12(sp)
 800d2b0:	df000215 	stw	fp,8(sp)
 800d2b4:	df000204 	addi	fp,sp,8
 800d2b8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800d2bc:	e0bfff17 	ldw	r2,-4(fp)
 800d2c0:	10800017 	ldw	r2,0(r2)
 800d2c4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800d2c8:	e0bffe17 	ldw	r2,-8(fp)
 800d2cc:	10c00a04 	addi	r3,r2,40
 800d2d0:	e0bfff17 	ldw	r2,-4(fp)
 800d2d4:	10800217 	ldw	r2,8(r2)
 800d2d8:	1809883a 	mov	r4,r3
 800d2dc:	100b883a 	mov	r5,r2
 800d2e0:	800d6bc0 	call	800d6bc <altera_avalon_jtag_uart_close>
}
 800d2e4:	e037883a 	mov	sp,fp
 800d2e8:	dfc00117 	ldw	ra,4(sp)
 800d2ec:	df000017 	ldw	fp,0(sp)
 800d2f0:	dec00204 	addi	sp,sp,8
 800d2f4:	f800283a 	ret

0800d2f8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800d2f8:	defffa04 	addi	sp,sp,-24
 800d2fc:	dfc00515 	stw	ra,20(sp)
 800d300:	df000415 	stw	fp,16(sp)
 800d304:	df000404 	addi	fp,sp,16
 800d308:	e13ffd15 	stw	r4,-12(fp)
 800d30c:	e17ffe15 	stw	r5,-8(fp)
 800d310:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800d314:	e0bffd17 	ldw	r2,-12(fp)
 800d318:	10800017 	ldw	r2,0(r2)
 800d31c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800d320:	e0bffc17 	ldw	r2,-16(fp)
 800d324:	10800a04 	addi	r2,r2,40
 800d328:	1009883a 	mov	r4,r2
 800d32c:	e17ffe17 	ldw	r5,-8(fp)
 800d330:	e1bfff17 	ldw	r6,-4(fp)
 800d334:	800d7240 	call	800d724 <altera_avalon_jtag_uart_ioctl>
}
 800d338:	e037883a 	mov	sp,fp
 800d33c:	dfc00117 	ldw	ra,4(sp)
 800d340:	df000017 	ldw	fp,0(sp)
 800d344:	dec00204 	addi	sp,sp,8
 800d348:	f800283a 	ret

0800d34c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800d34c:	defffa04 	addi	sp,sp,-24
 800d350:	dfc00515 	stw	ra,20(sp)
 800d354:	df000415 	stw	fp,16(sp)
 800d358:	df000404 	addi	fp,sp,16
 800d35c:	e13ffd15 	stw	r4,-12(fp)
 800d360:	e17ffe15 	stw	r5,-8(fp)
 800d364:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800d368:	e0bffd17 	ldw	r2,-12(fp)
 800d36c:	00c00044 	movi	r3,1
 800d370:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800d374:	e0bffd17 	ldw	r2,-12(fp)
 800d378:	10800017 	ldw	r2,0(r2)
 800d37c:	10800104 	addi	r2,r2,4
 800d380:	1007883a 	mov	r3,r2
 800d384:	e0bffd17 	ldw	r2,-12(fp)
 800d388:	10800817 	ldw	r2,32(r2)
 800d38c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800d390:	e0fffe17 	ldw	r3,-8(fp)
 800d394:	e0bfff17 	ldw	r2,-4(fp)
 800d398:	d8000015 	stw	zero,0(sp)
 800d39c:	1809883a 	mov	r4,r3
 800d3a0:	100b883a 	mov	r5,r2
 800d3a4:	01820074 	movhi	r6,2049
 800d3a8:	31b50404 	addi	r6,r6,-11248
 800d3ac:	e1fffd17 	ldw	r7,-12(fp)
 800d3b0:	800e5d00 	call	800e5d0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800d3b4:	e0bffd17 	ldw	r2,-12(fp)
 800d3b8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800d3bc:	e0bffd17 	ldw	r2,-12(fp)
 800d3c0:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800d3c4:	00820074 	movhi	r2,2049
 800d3c8:	108b7f04 	addi	r2,r2,11772
 800d3cc:	10800017 	ldw	r2,0(r2)
 800d3d0:	1809883a 	mov	r4,r3
 800d3d4:	100b883a 	mov	r5,r2
 800d3d8:	01820074 	movhi	r6,2049
 800d3dc:	31b58504 	addi	r6,r6,-10732
 800d3e0:	e1fffd17 	ldw	r7,-12(fp)
 800d3e4:	800e2080 	call	800e208 <alt_alarm_start>
 800d3e8:	1000040e 	bge	r2,zero,800d3fc <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800d3ec:	e0fffd17 	ldw	r3,-12(fp)
 800d3f0:	00a00034 	movhi	r2,32768
 800d3f4:	10bfffc4 	addi	r2,r2,-1
 800d3f8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800d3fc:	e037883a 	mov	sp,fp
 800d400:	dfc00117 	ldw	ra,4(sp)
 800d404:	df000017 	ldw	fp,0(sp)
 800d408:	dec00204 	addi	sp,sp,8
 800d40c:	f800283a 	ret

0800d410 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800d410:	defff804 	addi	sp,sp,-32
 800d414:	df000715 	stw	fp,28(sp)
 800d418:	df000704 	addi	fp,sp,28
 800d41c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800d420:	e0bfff17 	ldw	r2,-4(fp)
 800d424:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 800d428:	e0bffb17 	ldw	r2,-20(fp)
 800d42c:	10800017 	ldw	r2,0(r2)
 800d430:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800d434:	e0bffc17 	ldw	r2,-16(fp)
 800d438:	10800104 	addi	r2,r2,4
 800d43c:	10800037 	ldwio	r2,0(r2)
 800d440:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800d444:	e0bffd17 	ldw	r2,-12(fp)
 800d448:	1080c00c 	andi	r2,r2,768
 800d44c:	1000011e 	bne	r2,zero,800d454 <altera_avalon_jtag_uart_irq+0x44>
      break;
 800d450:	00006c06 	br	800d604 <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800d454:	e0bffd17 	ldw	r2,-12(fp)
 800d458:	1080400c 	andi	r2,r2,256
 800d45c:	10003426 	beq	r2,zero,800d530 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800d460:	00800074 	movhi	r2,1
 800d464:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800d468:	e0bffb17 	ldw	r2,-20(fp)
 800d46c:	10800a17 	ldw	r2,40(r2)
 800d470:	10800044 	addi	r2,r2,1
 800d474:	1081ffcc 	andi	r2,r2,2047
 800d478:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 800d47c:	e0bffb17 	ldw	r2,-20(fp)
 800d480:	10c00b17 	ldw	r3,44(r2)
 800d484:	e0bffe17 	ldw	r2,-8(fp)
 800d488:	1880011e 	bne	r3,r2,800d490 <altera_avalon_jtag_uart_irq+0x80>
          break;
 800d48c:	00001606 	br	800d4e8 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800d490:	e0bffc17 	ldw	r2,-16(fp)
 800d494:	10800037 	ldwio	r2,0(r2)
 800d498:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800d49c:	e0bff917 	ldw	r2,-28(fp)
 800d4a0:	10a0000c 	andi	r2,r2,32768
 800d4a4:	1000011e 	bne	r2,zero,800d4ac <altera_avalon_jtag_uart_irq+0x9c>
          break;
 800d4a8:	00000f06 	br	800d4e8 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800d4ac:	e0bffb17 	ldw	r2,-20(fp)
 800d4b0:	10800a17 	ldw	r2,40(r2)
 800d4b4:	e0fff917 	ldw	r3,-28(fp)
 800d4b8:	1809883a 	mov	r4,r3
 800d4bc:	e0fffb17 	ldw	r3,-20(fp)
 800d4c0:	1885883a 	add	r2,r3,r2
 800d4c4:	10800e04 	addi	r2,r2,56
 800d4c8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800d4cc:	e0bffb17 	ldw	r2,-20(fp)
 800d4d0:	10800a17 	ldw	r2,40(r2)
 800d4d4:	10800044 	addi	r2,r2,1
 800d4d8:	10c1ffcc 	andi	r3,r2,2047
 800d4dc:	e0bffb17 	ldw	r2,-20(fp)
 800d4e0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 800d4e4:	003fe006 	br	800d468 <__alt_data_end+0xfc00d468>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800d4e8:	e0bff917 	ldw	r2,-28(fp)
 800d4ec:	10bfffec 	andhi	r2,r2,65535
 800d4f0:	10000f26 	beq	r2,zero,800d530 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800d4f4:	e0bffb17 	ldw	r2,-20(fp)
 800d4f8:	10c00817 	ldw	r3,32(r2)
 800d4fc:	00bfff84 	movi	r2,-2
 800d500:	1886703a 	and	r3,r3,r2
 800d504:	e0bffb17 	ldw	r2,-20(fp)
 800d508:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800d50c:	e0bffc17 	ldw	r2,-16(fp)
 800d510:	10800104 	addi	r2,r2,4
 800d514:	1007883a 	mov	r3,r2
 800d518:	e0bffb17 	ldw	r2,-20(fp)
 800d51c:	10800817 	ldw	r2,32(r2)
 800d520:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800d524:	e0bffc17 	ldw	r2,-16(fp)
 800d528:	10800104 	addi	r2,r2,4
 800d52c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800d530:	e0bffd17 	ldw	r2,-12(fp)
 800d534:	1080800c 	andi	r2,r2,512
 800d538:	10003126 	beq	r2,zero,800d600 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800d53c:	e0bffd17 	ldw	r2,-12(fp)
 800d540:	1004d43a 	srli	r2,r2,16
 800d544:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800d548:	00001406 	br	800d59c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800d54c:	e0bffc17 	ldw	r2,-16(fp)
 800d550:	e0fffb17 	ldw	r3,-20(fp)
 800d554:	18c00d17 	ldw	r3,52(r3)
 800d558:	e13ffb17 	ldw	r4,-20(fp)
 800d55c:	20c7883a 	add	r3,r4,r3
 800d560:	18c20e04 	addi	r3,r3,2104
 800d564:	18c00003 	ldbu	r3,0(r3)
 800d568:	18c03fcc 	andi	r3,r3,255
 800d56c:	18c0201c 	xori	r3,r3,128
 800d570:	18ffe004 	addi	r3,r3,-128
 800d574:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800d578:	e0bffb17 	ldw	r2,-20(fp)
 800d57c:	10800d17 	ldw	r2,52(r2)
 800d580:	10800044 	addi	r2,r2,1
 800d584:	10c1ffcc 	andi	r3,r2,2047
 800d588:	e0bffb17 	ldw	r2,-20(fp)
 800d58c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800d590:	e0bffa17 	ldw	r2,-24(fp)
 800d594:	10bfffc4 	addi	r2,r2,-1
 800d598:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 800d59c:	e0bffa17 	ldw	r2,-24(fp)
 800d5a0:	10000526 	beq	r2,zero,800d5b8 <altera_avalon_jtag_uart_irq+0x1a8>
 800d5a4:	e0bffb17 	ldw	r2,-20(fp)
 800d5a8:	10c00d17 	ldw	r3,52(r2)
 800d5ac:	e0bffb17 	ldw	r2,-20(fp)
 800d5b0:	10800c17 	ldw	r2,48(r2)
 800d5b4:	18bfe51e 	bne	r3,r2,800d54c <__alt_data_end+0xfc00d54c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 800d5b8:	e0bffa17 	ldw	r2,-24(fp)
 800d5bc:	10001026 	beq	r2,zero,800d600 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800d5c0:	e0bffb17 	ldw	r2,-20(fp)
 800d5c4:	10c00817 	ldw	r3,32(r2)
 800d5c8:	00bfff44 	movi	r2,-3
 800d5cc:	1886703a 	and	r3,r3,r2
 800d5d0:	e0bffb17 	ldw	r2,-20(fp)
 800d5d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800d5d8:	e0bffb17 	ldw	r2,-20(fp)
 800d5dc:	10800017 	ldw	r2,0(r2)
 800d5e0:	10800104 	addi	r2,r2,4
 800d5e4:	1007883a 	mov	r3,r2
 800d5e8:	e0bffb17 	ldw	r2,-20(fp)
 800d5ec:	10800817 	ldw	r2,32(r2)
 800d5f0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800d5f4:	e0bffc17 	ldw	r2,-16(fp)
 800d5f8:	10800104 	addi	r2,r2,4
 800d5fc:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 800d600:	003f8c06 	br	800d434 <__alt_data_end+0xfc00d434>
}
 800d604:	e037883a 	mov	sp,fp
 800d608:	df000017 	ldw	fp,0(sp)
 800d60c:	dec00104 	addi	sp,sp,4
 800d610:	f800283a 	ret

0800d614 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800d614:	defff804 	addi	sp,sp,-32
 800d618:	df000715 	stw	fp,28(sp)
 800d61c:	df000704 	addi	fp,sp,28
 800d620:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800d624:	e0bffb17 	ldw	r2,-20(fp)
 800d628:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800d62c:	e0bff917 	ldw	r2,-28(fp)
 800d630:	10800017 	ldw	r2,0(r2)
 800d634:	10800104 	addi	r2,r2,4
 800d638:	10800037 	ldwio	r2,0(r2)
 800d63c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800d640:	e0bffa17 	ldw	r2,-24(fp)
 800d644:	1081000c 	andi	r2,r2,1024
 800d648:	10000b26 	beq	r2,zero,800d678 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800d64c:	e0bff917 	ldw	r2,-28(fp)
 800d650:	10800017 	ldw	r2,0(r2)
 800d654:	10800104 	addi	r2,r2,4
 800d658:	1007883a 	mov	r3,r2
 800d65c:	e0bff917 	ldw	r2,-28(fp)
 800d660:	10800817 	ldw	r2,32(r2)
 800d664:	10810014 	ori	r2,r2,1024
 800d668:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800d66c:	e0bff917 	ldw	r2,-28(fp)
 800d670:	10000915 	stw	zero,36(r2)
 800d674:	00000a06 	br	800d6a0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800d678:	e0bff917 	ldw	r2,-28(fp)
 800d67c:	10c00917 	ldw	r3,36(r2)
 800d680:	00a00034 	movhi	r2,32768
 800d684:	10bfff04 	addi	r2,r2,-4
 800d688:	10c00536 	bltu	r2,r3,800d6a0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800d68c:	e0bff917 	ldw	r2,-28(fp)
 800d690:	10800917 	ldw	r2,36(r2)
 800d694:	10c00044 	addi	r3,r2,1
 800d698:	e0bff917 	ldw	r2,-28(fp)
 800d69c:	10c00915 	stw	r3,36(r2)
 800d6a0:	00820074 	movhi	r2,2049
 800d6a4:	108b7f04 	addi	r2,r2,11772
 800d6a8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800d6ac:	e037883a 	mov	sp,fp
 800d6b0:	df000017 	ldw	fp,0(sp)
 800d6b4:	dec00104 	addi	sp,sp,4
 800d6b8:	f800283a 	ret

0800d6bc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800d6bc:	defffd04 	addi	sp,sp,-12
 800d6c0:	df000215 	stw	fp,8(sp)
 800d6c4:	df000204 	addi	fp,sp,8
 800d6c8:	e13ffe15 	stw	r4,-8(fp)
 800d6cc:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800d6d0:	00000506 	br	800d6e8 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800d6d4:	e0bfff17 	ldw	r2,-4(fp)
 800d6d8:	1090000c 	andi	r2,r2,16384
 800d6dc:	10000226 	beq	r2,zero,800d6e8 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800d6e0:	00bffd44 	movi	r2,-11
 800d6e4:	00000b06 	br	800d714 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800d6e8:	e0bffe17 	ldw	r2,-8(fp)
 800d6ec:	10c00d17 	ldw	r3,52(r2)
 800d6f0:	e0bffe17 	ldw	r2,-8(fp)
 800d6f4:	10800c17 	ldw	r2,48(r2)
 800d6f8:	18800526 	beq	r3,r2,800d710 <altera_avalon_jtag_uart_close+0x54>
 800d6fc:	e0bffe17 	ldw	r2,-8(fp)
 800d700:	10c00917 	ldw	r3,36(r2)
 800d704:	e0bffe17 	ldw	r2,-8(fp)
 800d708:	10800117 	ldw	r2,4(r2)
 800d70c:	18bff136 	bltu	r3,r2,800d6d4 <__alt_data_end+0xfc00d6d4>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 800d710:	0005883a 	mov	r2,zero
}
 800d714:	e037883a 	mov	sp,fp
 800d718:	df000017 	ldw	fp,0(sp)
 800d71c:	dec00104 	addi	sp,sp,4
 800d720:	f800283a 	ret

0800d724 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800d724:	defffa04 	addi	sp,sp,-24
 800d728:	df000515 	stw	fp,20(sp)
 800d72c:	df000504 	addi	fp,sp,20
 800d730:	e13ffd15 	stw	r4,-12(fp)
 800d734:	e17ffe15 	stw	r5,-8(fp)
 800d738:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 800d73c:	00bff9c4 	movi	r2,-25
 800d740:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 800d744:	e0bffe17 	ldw	r2,-8(fp)
 800d748:	10da8060 	cmpeqi	r3,r2,27137
 800d74c:	1800031e 	bne	r3,zero,800d75c <altera_avalon_jtag_uart_ioctl+0x38>
 800d750:	109a80a0 	cmpeqi	r2,r2,27138
 800d754:	1000191e 	bne	r2,zero,800d7bc <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800d758:	00002806 	br	800d7fc <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 800d75c:	e0bffd17 	ldw	r2,-12(fp)
 800d760:	10c00117 	ldw	r3,4(r2)
 800d764:	00a00034 	movhi	r2,32768
 800d768:	10bfffc4 	addi	r2,r2,-1
 800d76c:	18801226 	beq	r3,r2,800d7b8 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 800d770:	e0bfff17 	ldw	r2,-4(fp)
 800d774:	10800017 	ldw	r2,0(r2)
 800d778:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800d77c:	e0bffc17 	ldw	r2,-16(fp)
 800d780:	10800090 	cmplti	r2,r2,2
 800d784:	1000061e 	bne	r2,zero,800d7a0 <altera_avalon_jtag_uart_ioctl+0x7c>
 800d788:	e0fffc17 	ldw	r3,-16(fp)
 800d78c:	00a00034 	movhi	r2,32768
 800d790:	10bfffc4 	addi	r2,r2,-1
 800d794:	18800226 	beq	r3,r2,800d7a0 <altera_avalon_jtag_uart_ioctl+0x7c>
 800d798:	e0bffc17 	ldw	r2,-16(fp)
 800d79c:	00000206 	br	800d7a8 <altera_avalon_jtag_uart_ioctl+0x84>
 800d7a0:	00a00034 	movhi	r2,32768
 800d7a4:	10bfff84 	addi	r2,r2,-2
 800d7a8:	e0fffd17 	ldw	r3,-12(fp)
 800d7ac:	18800115 	stw	r2,4(r3)
      rc = 0;
 800d7b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800d7b4:	00001106 	br	800d7fc <altera_avalon_jtag_uart_ioctl+0xd8>
 800d7b8:	00001006 	br	800d7fc <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 800d7bc:	e0bffd17 	ldw	r2,-12(fp)
 800d7c0:	10c00117 	ldw	r3,4(r2)
 800d7c4:	00a00034 	movhi	r2,32768
 800d7c8:	10bfffc4 	addi	r2,r2,-1
 800d7cc:	18800a26 	beq	r3,r2,800d7f8 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800d7d0:	e0bffd17 	ldw	r2,-12(fp)
 800d7d4:	10c00917 	ldw	r3,36(r2)
 800d7d8:	e0bffd17 	ldw	r2,-12(fp)
 800d7dc:	10800117 	ldw	r2,4(r2)
 800d7e0:	1885803a 	cmpltu	r2,r3,r2
 800d7e4:	10c03fcc 	andi	r3,r2,255
 800d7e8:	e0bfff17 	ldw	r2,-4(fp)
 800d7ec:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800d7f0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800d7f4:	00000006 	br	800d7f8 <altera_avalon_jtag_uart_ioctl+0xd4>
 800d7f8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 800d7fc:	e0bffb17 	ldw	r2,-20(fp)
}
 800d800:	e037883a 	mov	sp,fp
 800d804:	df000017 	ldw	fp,0(sp)
 800d808:	dec00104 	addi	sp,sp,4
 800d80c:	f800283a 	ret

0800d810 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800d810:	defff304 	addi	sp,sp,-52
 800d814:	dfc00c15 	stw	ra,48(sp)
 800d818:	df000b15 	stw	fp,44(sp)
 800d81c:	df000b04 	addi	fp,sp,44
 800d820:	e13ffc15 	stw	r4,-16(fp)
 800d824:	e17ffd15 	stw	r5,-12(fp)
 800d828:	e1bffe15 	stw	r6,-8(fp)
 800d82c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 800d830:	e0bffd17 	ldw	r2,-12(fp)
 800d834:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800d838:	00004906 	br	800d960 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800d83c:	e0bffc17 	ldw	r2,-16(fp)
 800d840:	10800a17 	ldw	r2,40(r2)
 800d844:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 800d848:	e0bffc17 	ldw	r2,-16(fp)
 800d84c:	10800b17 	ldw	r2,44(r2)
 800d850:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 800d854:	e0fff717 	ldw	r3,-36(fp)
 800d858:	e0bff817 	ldw	r2,-32(fp)
 800d85c:	18800536 	bltu	r3,r2,800d874 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800d860:	e0fff717 	ldw	r3,-36(fp)
 800d864:	e0bff817 	ldw	r2,-32(fp)
 800d868:	1885c83a 	sub	r2,r3,r2
 800d86c:	e0bff615 	stw	r2,-40(fp)
 800d870:	00000406 	br	800d884 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800d874:	00c20004 	movi	r3,2048
 800d878:	e0bff817 	ldw	r2,-32(fp)
 800d87c:	1885c83a 	sub	r2,r3,r2
 800d880:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800d884:	e0bff617 	ldw	r2,-40(fp)
 800d888:	1000011e 	bne	r2,zero,800d890 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 800d88c:	00001d06 	br	800d904 <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 800d890:	e0fffe17 	ldw	r3,-8(fp)
 800d894:	e0bff617 	ldw	r2,-40(fp)
 800d898:	1880022e 	bgeu	r3,r2,800d8a4 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 800d89c:	e0bffe17 	ldw	r2,-8(fp)
 800d8a0:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800d8a4:	e0bff817 	ldw	r2,-32(fp)
 800d8a8:	10800e04 	addi	r2,r2,56
 800d8ac:	e0fffc17 	ldw	r3,-16(fp)
 800d8b0:	1885883a 	add	r2,r3,r2
 800d8b4:	e13ff517 	ldw	r4,-44(fp)
 800d8b8:	100b883a 	mov	r5,r2
 800d8bc:	e1bff617 	ldw	r6,-40(fp)
 800d8c0:	8005b940 	call	8005b94 <memcpy>
      ptr   += n;
 800d8c4:	e0fff517 	ldw	r3,-44(fp)
 800d8c8:	e0bff617 	ldw	r2,-40(fp)
 800d8cc:	1885883a 	add	r2,r3,r2
 800d8d0:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800d8d4:	e0fffe17 	ldw	r3,-8(fp)
 800d8d8:	e0bff617 	ldw	r2,-40(fp)
 800d8dc:	1885c83a 	sub	r2,r3,r2
 800d8e0:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800d8e4:	e0fff817 	ldw	r3,-32(fp)
 800d8e8:	e0bff617 	ldw	r2,-40(fp)
 800d8ec:	1885883a 	add	r2,r3,r2
 800d8f0:	10c1ffcc 	andi	r3,r2,2047
 800d8f4:	e0bffc17 	ldw	r2,-16(fp)
 800d8f8:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800d8fc:	e0bffe17 	ldw	r2,-8(fp)
 800d900:	00bfce16 	blt	zero,r2,800d83c <__alt_data_end+0xfc00d83c>

    /* If we read any data then return it */
    if (ptr != buffer)
 800d904:	e0fff517 	ldw	r3,-44(fp)
 800d908:	e0bffd17 	ldw	r2,-12(fp)
 800d90c:	18800126 	beq	r3,r2,800d914 <altera_avalon_jtag_uart_read+0x104>
      break;
 800d910:	00001506 	br	800d968 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800d914:	e0bfff17 	ldw	r2,-4(fp)
 800d918:	1090000c 	andi	r2,r2,16384
 800d91c:	10000126 	beq	r2,zero,800d924 <altera_avalon_jtag_uart_read+0x114>
      break;
 800d920:	00001106 	br	800d968 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800d924:	0001883a 	nop
 800d928:	e0bffc17 	ldw	r2,-16(fp)
 800d92c:	10c00a17 	ldw	r3,40(r2)
 800d930:	e0bff717 	ldw	r2,-36(fp)
 800d934:	1880051e 	bne	r3,r2,800d94c <altera_avalon_jtag_uart_read+0x13c>
 800d938:	e0bffc17 	ldw	r2,-16(fp)
 800d93c:	10c00917 	ldw	r3,36(r2)
 800d940:	e0bffc17 	ldw	r2,-16(fp)
 800d944:	10800117 	ldw	r2,4(r2)
 800d948:	18bff736 	bltu	r3,r2,800d928 <__alt_data_end+0xfc00d928>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800d94c:	e0bffc17 	ldw	r2,-16(fp)
 800d950:	10c00a17 	ldw	r3,40(r2)
 800d954:	e0bff717 	ldw	r2,-36(fp)
 800d958:	1880011e 	bne	r3,r2,800d960 <altera_avalon_jtag_uart_read+0x150>
      break;
 800d95c:	00000206 	br	800d968 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800d960:	e0bffe17 	ldw	r2,-8(fp)
 800d964:	00bfb516 	blt	zero,r2,800d83c <__alt_data_end+0xfc00d83c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800d968:	e0fff517 	ldw	r3,-44(fp)
 800d96c:	e0bffd17 	ldw	r2,-12(fp)
 800d970:	18801826 	beq	r3,r2,800d9d4 <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800d974:	0005303a 	rdctl	r2,status
 800d978:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d97c:	e0fffa17 	ldw	r3,-24(fp)
 800d980:	00bfff84 	movi	r2,-2
 800d984:	1884703a 	and	r2,r3,r2
 800d988:	1001703a 	wrctl	status,r2
  
  return context;
 800d98c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800d990:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800d994:	e0bffc17 	ldw	r2,-16(fp)
 800d998:	10800817 	ldw	r2,32(r2)
 800d99c:	10c00054 	ori	r3,r2,1
 800d9a0:	e0bffc17 	ldw	r2,-16(fp)
 800d9a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800d9a8:	e0bffc17 	ldw	r2,-16(fp)
 800d9ac:	10800017 	ldw	r2,0(r2)
 800d9b0:	10800104 	addi	r2,r2,4
 800d9b4:	1007883a 	mov	r3,r2
 800d9b8:	e0bffc17 	ldw	r2,-16(fp)
 800d9bc:	10800817 	ldw	r2,32(r2)
 800d9c0:	18800035 	stwio	r2,0(r3)
 800d9c4:	e0bff917 	ldw	r2,-28(fp)
 800d9c8:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800d9cc:	e0bffb17 	ldw	r2,-20(fp)
 800d9d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800d9d4:	e0fff517 	ldw	r3,-44(fp)
 800d9d8:	e0bffd17 	ldw	r2,-12(fp)
 800d9dc:	18800426 	beq	r3,r2,800d9f0 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 800d9e0:	e0fff517 	ldw	r3,-44(fp)
 800d9e4:	e0bffd17 	ldw	r2,-12(fp)
 800d9e8:	1885c83a 	sub	r2,r3,r2
 800d9ec:	00000606 	br	800da08 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 800d9f0:	e0bfff17 	ldw	r2,-4(fp)
 800d9f4:	1090000c 	andi	r2,r2,16384
 800d9f8:	10000226 	beq	r2,zero,800da04 <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 800d9fc:	00bffd44 	movi	r2,-11
 800da00:	00000106 	br	800da08 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 800da04:	00bffec4 	movi	r2,-5
}
 800da08:	e037883a 	mov	sp,fp
 800da0c:	dfc00117 	ldw	ra,4(sp)
 800da10:	df000017 	ldw	fp,0(sp)
 800da14:	dec00204 	addi	sp,sp,8
 800da18:	f800283a 	ret

0800da1c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800da1c:	defff304 	addi	sp,sp,-52
 800da20:	dfc00c15 	stw	ra,48(sp)
 800da24:	df000b15 	stw	fp,44(sp)
 800da28:	df000b04 	addi	fp,sp,44
 800da2c:	e13ffc15 	stw	r4,-16(fp)
 800da30:	e17ffd15 	stw	r5,-12(fp)
 800da34:	e1bffe15 	stw	r6,-8(fp)
 800da38:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800da3c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800da40:	e0bffd17 	ldw	r2,-12(fp)
 800da44:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800da48:	00003806 	br	800db2c <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800da4c:	e0bffc17 	ldw	r2,-16(fp)
 800da50:	10800c17 	ldw	r2,48(r2)
 800da54:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 800da58:	e0bffc17 	ldw	r2,-16(fp)
 800da5c:	10800d17 	ldw	r2,52(r2)
 800da60:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 800da64:	e0fff817 	ldw	r3,-32(fp)
 800da68:	e0bff517 	ldw	r2,-44(fp)
 800da6c:	1880062e 	bgeu	r3,r2,800da88 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800da70:	e0fff517 	ldw	r3,-44(fp)
 800da74:	e0bff817 	ldw	r2,-32(fp)
 800da78:	1885c83a 	sub	r2,r3,r2
 800da7c:	10bfffc4 	addi	r2,r2,-1
 800da80:	e0bff615 	stw	r2,-40(fp)
 800da84:	00000b06 	br	800dab4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800da88:	e0bff517 	ldw	r2,-44(fp)
 800da8c:	10000526 	beq	r2,zero,800daa4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800da90:	00c20004 	movi	r3,2048
 800da94:	e0bff817 	ldw	r2,-32(fp)
 800da98:	1885c83a 	sub	r2,r3,r2
 800da9c:	e0bff615 	stw	r2,-40(fp)
 800daa0:	00000406 	br	800dab4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800daa4:	00c1ffc4 	movi	r3,2047
 800daa8:	e0bff817 	ldw	r2,-32(fp)
 800daac:	1885c83a 	sub	r2,r3,r2
 800dab0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 800dab4:	e0bff617 	ldw	r2,-40(fp)
 800dab8:	1000011e 	bne	r2,zero,800dac0 <altera_avalon_jtag_uart_write+0xa4>
        break;
 800dabc:	00001d06 	br	800db34 <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 800dac0:	e0fffe17 	ldw	r3,-8(fp)
 800dac4:	e0bff617 	ldw	r2,-40(fp)
 800dac8:	1880022e 	bgeu	r3,r2,800dad4 <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 800dacc:	e0bffe17 	ldw	r2,-8(fp)
 800dad0:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800dad4:	e0bff817 	ldw	r2,-32(fp)
 800dad8:	10820e04 	addi	r2,r2,2104
 800dadc:	e0fffc17 	ldw	r3,-16(fp)
 800dae0:	1885883a 	add	r2,r3,r2
 800dae4:	1009883a 	mov	r4,r2
 800dae8:	e17ffd17 	ldw	r5,-12(fp)
 800daec:	e1bff617 	ldw	r6,-40(fp)
 800daf0:	8005b940 	call	8005b94 <memcpy>
      ptr   += n;
 800daf4:	e0fffd17 	ldw	r3,-12(fp)
 800daf8:	e0bff617 	ldw	r2,-40(fp)
 800dafc:	1885883a 	add	r2,r3,r2
 800db00:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800db04:	e0fffe17 	ldw	r3,-8(fp)
 800db08:	e0bff617 	ldw	r2,-40(fp)
 800db0c:	1885c83a 	sub	r2,r3,r2
 800db10:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800db14:	e0fff817 	ldw	r3,-32(fp)
 800db18:	e0bff617 	ldw	r2,-40(fp)
 800db1c:	1885883a 	add	r2,r3,r2
 800db20:	10c1ffcc 	andi	r3,r2,2047
 800db24:	e0bffc17 	ldw	r2,-16(fp)
 800db28:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800db2c:	e0bffe17 	ldw	r2,-8(fp)
 800db30:	00bfc616 	blt	zero,r2,800da4c <__alt_data_end+0xfc00da4c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800db34:	0005303a 	rdctl	r2,status
 800db38:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800db3c:	e0fffa17 	ldw	r3,-24(fp)
 800db40:	00bfff84 	movi	r2,-2
 800db44:	1884703a 	and	r2,r3,r2
 800db48:	1001703a 	wrctl	status,r2
  
  return context;
 800db4c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800db50:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800db54:	e0bffc17 	ldw	r2,-16(fp)
 800db58:	10800817 	ldw	r2,32(r2)
 800db5c:	10c00094 	ori	r3,r2,2
 800db60:	e0bffc17 	ldw	r2,-16(fp)
 800db64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800db68:	e0bffc17 	ldw	r2,-16(fp)
 800db6c:	10800017 	ldw	r2,0(r2)
 800db70:	10800104 	addi	r2,r2,4
 800db74:	1007883a 	mov	r3,r2
 800db78:	e0bffc17 	ldw	r2,-16(fp)
 800db7c:	10800817 	ldw	r2,32(r2)
 800db80:	18800035 	stwio	r2,0(r3)
 800db84:	e0bff917 	ldw	r2,-28(fp)
 800db88:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800db8c:	e0bffb17 	ldw	r2,-20(fp)
 800db90:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800db94:	e0bffe17 	ldw	r2,-8(fp)
 800db98:	0080120e 	bge	zero,r2,800dbe4 <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 800db9c:	e0bfff17 	ldw	r2,-4(fp)
 800dba0:	1090000c 	andi	r2,r2,16384
 800dba4:	10000126 	beq	r2,zero,800dbac <altera_avalon_jtag_uart_write+0x190>
        break;
 800dba8:	00001006 	br	800dbec <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800dbac:	0001883a 	nop
 800dbb0:	e0bffc17 	ldw	r2,-16(fp)
 800dbb4:	10c00d17 	ldw	r3,52(r2)
 800dbb8:	e0bff517 	ldw	r2,-44(fp)
 800dbbc:	1880051e 	bne	r3,r2,800dbd4 <altera_avalon_jtag_uart_write+0x1b8>
 800dbc0:	e0bffc17 	ldw	r2,-16(fp)
 800dbc4:	10c00917 	ldw	r3,36(r2)
 800dbc8:	e0bffc17 	ldw	r2,-16(fp)
 800dbcc:	10800117 	ldw	r2,4(r2)
 800dbd0:	18bff736 	bltu	r3,r2,800dbb0 <__alt_data_end+0xfc00dbb0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800dbd4:	e0bffc17 	ldw	r2,-16(fp)
 800dbd8:	10800917 	ldw	r2,36(r2)
 800dbdc:	10000126 	beq	r2,zero,800dbe4 <altera_avalon_jtag_uart_write+0x1c8>
         break;
 800dbe0:	00000206 	br	800dbec <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 800dbe4:	e0bffe17 	ldw	r2,-8(fp)
 800dbe8:	00bf9716 	blt	zero,r2,800da48 <__alt_data_end+0xfc00da48>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800dbec:	e0fffd17 	ldw	r3,-12(fp)
 800dbf0:	e0bff717 	ldw	r2,-36(fp)
 800dbf4:	18800426 	beq	r3,r2,800dc08 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 800dbf8:	e0fffd17 	ldw	r3,-12(fp)
 800dbfc:	e0bff717 	ldw	r2,-36(fp)
 800dc00:	1885c83a 	sub	r2,r3,r2
 800dc04:	00000606 	br	800dc20 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 800dc08:	e0bfff17 	ldw	r2,-4(fp)
 800dc0c:	1090000c 	andi	r2,r2,16384
 800dc10:	10000226 	beq	r2,zero,800dc1c <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 800dc14:	00bffd44 	movi	r2,-11
 800dc18:	00000106 	br	800dc20 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800dc1c:	00bffec4 	movi	r2,-5
}
 800dc20:	e037883a 	mov	sp,fp
 800dc24:	dfc00117 	ldw	ra,4(sp)
 800dc28:	df000017 	ldw	fp,0(sp)
 800dc2c:	dec00204 	addi	sp,sp,8
 800dc30:	f800283a 	ret

0800dc34 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800dc34:	defffa04 	addi	sp,sp,-24
 800dc38:	dfc00515 	stw	ra,20(sp)
 800dc3c:	df000415 	stw	fp,16(sp)
 800dc40:	df000404 	addi	fp,sp,16
 800dc44:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800dc48:	0007883a 	mov	r3,zero
 800dc4c:	e0bfff17 	ldw	r2,-4(fp)
 800dc50:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800dc54:	e0bfff17 	ldw	r2,-4(fp)
 800dc58:	10800104 	addi	r2,r2,4
 800dc5c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800dc60:	0005303a 	rdctl	r2,status
 800dc64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800dc68:	e0fffd17 	ldw	r3,-12(fp)
 800dc6c:	00bfff84 	movi	r2,-2
 800dc70:	1884703a 	and	r2,r3,r2
 800dc74:	1001703a 	wrctl	status,r2
  
  return context;
 800dc78:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800dc7c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 800dc80:	800ece40 	call	800ece4 <alt_tick>
 800dc84:	e0bffc17 	ldw	r2,-16(fp)
 800dc88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800dc8c:	e0bffe17 	ldw	r2,-8(fp)
 800dc90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800dc94:	e037883a 	mov	sp,fp
 800dc98:	dfc00117 	ldw	ra,4(sp)
 800dc9c:	df000017 	ldw	fp,0(sp)
 800dca0:	dec00204 	addi	sp,sp,8
 800dca4:	f800283a 	ret

0800dca8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800dca8:	defff804 	addi	sp,sp,-32
 800dcac:	dfc00715 	stw	ra,28(sp)
 800dcb0:	df000615 	stw	fp,24(sp)
 800dcb4:	df000604 	addi	fp,sp,24
 800dcb8:	e13ffc15 	stw	r4,-16(fp)
 800dcbc:	e17ffd15 	stw	r5,-12(fp)
 800dcc0:	e1bffe15 	stw	r6,-8(fp)
 800dcc4:	e1ffff15 	stw	r7,-4(fp)
 800dcc8:	e0bfff17 	ldw	r2,-4(fp)
 800dccc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800dcd0:	00820074 	movhi	r2,2049
 800dcd4:	108b7f04 	addi	r2,r2,11772
 800dcd8:	10800017 	ldw	r2,0(r2)
 800dcdc:	1000041e 	bne	r2,zero,800dcf0 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 800dce0:	00820074 	movhi	r2,2049
 800dce4:	108b7f04 	addi	r2,r2,11772
 800dce8:	e0fffb17 	ldw	r3,-20(fp)
 800dcec:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800dcf0:	e0bffc17 	ldw	r2,-16(fp)
 800dcf4:	10800104 	addi	r2,r2,4
 800dcf8:	00c001c4 	movi	r3,7
 800dcfc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800dd00:	d8000015 	stw	zero,0(sp)
 800dd04:	e13ffd17 	ldw	r4,-12(fp)
 800dd08:	e17ffe17 	ldw	r5,-8(fp)
 800dd0c:	01820074 	movhi	r6,2049
 800dd10:	31b70d04 	addi	r6,r6,-9164
 800dd14:	e1fffc17 	ldw	r7,-16(fp)
 800dd18:	800e5d00 	call	800e5d0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800dd1c:	e037883a 	mov	sp,fp
 800dd20:	dfc00117 	ldw	ra,4(sp)
 800dd24:	df000017 	ldw	fp,0(sp)
 800dd28:	dec00204 	addi	sp,sp,8
 800dd2c:	f800283a 	ret

0800dd30 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 800dd30:	defffc04 	addi	sp,sp,-16
 800dd34:	df000315 	stw	fp,12(sp)
 800dd38:	df000304 	addi	fp,sp,12
 800dd3c:	e13ffe15 	stw	r4,-8(fp)
 800dd40:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 800dd44:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 800dd48:	e0bfff17 	ldw	r2,-4(fp)
 800dd4c:	1000061e 	bne	r2,zero,800dd68 <get_DDRAM_addr+0x38>
	{
		addr |= x_pos;
 800dd50:	e0bffe17 	ldw	r2,-8(fp)
 800dd54:	1007883a 	mov	r3,r2
 800dd58:	e0bffd03 	ldbu	r2,-12(fp)
 800dd5c:	1884b03a 	or	r2,r3,r2
 800dd60:	e0bffd05 	stb	r2,-12(fp)
 800dd64:	00000806 	br	800dd88 <get_DDRAM_addr+0x58>
	}
	else
	{
		addr |= x_pos;
 800dd68:	e0bffe17 	ldw	r2,-8(fp)
 800dd6c:	1007883a 	mov	r3,r2
 800dd70:	e0bffd03 	ldbu	r2,-12(fp)
 800dd74:	1884b03a 	or	r2,r3,r2
 800dd78:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 800dd7c:	e0bffd03 	ldbu	r2,-12(fp)
 800dd80:	10801014 	ori	r2,r2,64
 800dd84:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 800dd88:	e0fffd03 	ldbu	r3,-12(fp)
 800dd8c:	00bfe004 	movi	r2,-128
 800dd90:	1884b03a 	or	r2,r3,r2
}
 800dd94:	e037883a 	mov	sp,fp
 800dd98:	df000017 	ldw	fp,0(sp)
 800dd9c:	dec00104 	addi	sp,sp,4
 800dda0:	f800283a 	ret

0800dda4 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 800dda4:	defffd04 	addi	sp,sp,-12
 800dda8:	df000215 	stw	fp,8(sp)
 800ddac:	df000204 	addi	fp,sp,8
 800ddb0:	e13ffe15 	stw	r4,-8(fp)
 800ddb4:	2805883a 	mov	r2,r5
 800ddb8:	e0bfff05 	stb	r2,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 800ddbc:	e0bffe17 	ldw	r2,-8(fp)
 800ddc0:	10800a17 	ldw	r2,40(r2)
 800ddc4:	1007883a 	mov	r3,r2
 800ddc8:	e0bfff03 	ldbu	r2,-4(fp)
 800ddcc:	18800025 	stbio	r2,0(r3)
}
 800ddd0:	e037883a 	mov	sp,fp
 800ddd4:	df000017 	ldw	fp,0(sp)
 800ddd8:	dec00104 	addi	sp,sp,4
 800dddc:	f800283a 	ret

0800dde0 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 800dde0:	defffe04 	addi	sp,sp,-8
 800dde4:	df000115 	stw	fp,4(sp)
 800dde8:	df000104 	addi	fp,sp,4
 800ddec:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 800ddf0:	e0bfff17 	ldw	r2,-4(fp)
 800ddf4:	10800a17 	ldw	r2,40(r2)
 800ddf8:	1007883a 	mov	r3,r2
 800ddfc:	00800044 	movi	r2,1
 800de00:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 800de04:	e037883a 	mov	sp,fp
 800de08:	df000017 	ldw	fp,0(sp)
 800de0c:	dec00104 	addi	sp,sp,4
 800de10:	f800283a 	ret

0800de14 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 800de14:	defffc04 	addi	sp,sp,-16
 800de18:	dfc00315 	stw	ra,12(sp)
 800de1c:	df000215 	stw	fp,8(sp)
 800de20:	df000204 	addi	fp,sp,8
 800de24:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 800de28:	e13fff17 	ldw	r4,-4(fp)
 800de2c:	01420074 	movhi	r5,2049
 800de30:	2944a604 	addi	r5,r5,4760
 800de34:	800e5100 	call	800e510 <alt_find_dev>
 800de38:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 800de3c:	e0bffe17 	ldw	r2,-8(fp)
}
 800de40:	e037883a 	mov	sp,fp
 800de44:	dfc00117 	ldw	ra,4(sp)
 800de48:	df000017 	ldw	fp,0(sp)
 800de4c:	dec00204 	addi	sp,sp,8
 800de50:	f800283a 	ret

0800de54 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 800de54:	defffb04 	addi	sp,sp,-20
 800de58:	df000415 	stw	fp,16(sp)
 800de5c:	df000404 	addi	fp,sp,16
 800de60:	e13ffd15 	stw	r4,-12(fp)
 800de64:	e17ffe15 	stw	r5,-8(fp)
 800de68:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 800de6c:	e03ffc15 	stw	zero,-16(fp)
 800de70:	00000f06 	br	800deb0 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 800de74:	e0bffd17 	ldw	r2,-12(fp)
 800de78:	10800a17 	ldw	r2,40(r2)
 800de7c:	10800044 	addi	r2,r2,1
 800de80:	1009883a 	mov	r4,r2
 800de84:	e0fffe17 	ldw	r3,-8(fp)
 800de88:	e0bffc17 	ldw	r2,-16(fp)
 800de8c:	1885883a 	add	r2,r3,r2
 800de90:	10800003 	ldbu	r2,0(r2)
 800de94:	10803fcc 	andi	r2,r2,255
 800de98:	1080201c 	xori	r2,r2,128
 800de9c:	10bfe004 	addi	r2,r2,-128
 800dea0:	20800025 	stbio	r2,0(r4)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 800dea4:	e0bffc17 	ldw	r2,-16(fp)
 800dea8:	10800044 	addi	r2,r2,1
 800deac:	e0bffc15 	stw	r2,-16(fp)
 800deb0:	e0fffc17 	ldw	r3,-16(fp)
 800deb4:	e0bfff17 	ldw	r2,-4(fp)
 800deb8:	18bfee36 	bltu	r3,r2,800de74 <__alt_data_end+0xfc00de74>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 800debc:	e037883a 	mov	sp,fp
 800dec0:	df000017 	ldw	fp,0(sp)
 800dec4:	dec00104 	addi	sp,sp,4
 800dec8:	f800283a 	ret

0800decc <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 800decc:	defffd04 	addi	sp,sp,-12
 800ded0:	df000215 	stw	fp,8(sp)
 800ded4:	df000204 	addi	fp,sp,8
 800ded8:	e13ffe15 	stw	r4,-8(fp)
 800dedc:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 800dee0:	00000d06 	br	800df18 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 800dee4:	e0bffe17 	ldw	r2,-8(fp)
 800dee8:	10800a17 	ldw	r2,40(r2)
 800deec:	10800044 	addi	r2,r2,1
 800def0:	1007883a 	mov	r3,r2
 800def4:	e0bfff17 	ldw	r2,-4(fp)
 800def8:	10800003 	ldbu	r2,0(r2)
 800defc:	10803fcc 	andi	r2,r2,255
 800df00:	1080201c 	xori	r2,r2,128
 800df04:	10bfe004 	addi	r2,r2,-128
 800df08:	18800025 	stbio	r2,0(r3)
		++ptr;
 800df0c:	e0bfff17 	ldw	r2,-4(fp)
 800df10:	10800044 	addi	r2,r2,1
 800df14:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 800df18:	e0bfff17 	ldw	r2,-4(fp)
 800df1c:	10800003 	ldbu	r2,0(r2)
 800df20:	10803fcc 	andi	r2,r2,255
 800df24:	1080201c 	xori	r2,r2,128
 800df28:	10bfe004 	addi	r2,r2,-128
 800df2c:	103fed1e 	bne	r2,zero,800dee4 <__alt_data_end+0xfc00dee4>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 800df30:	e037883a 	mov	sp,fp
 800df34:	df000017 	ldw	fp,0(sp)
 800df38:	dec00104 	addi	sp,sp,4
 800df3c:	f800283a 	ret

0800df40 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 800df40:	defffb04 	addi	sp,sp,-20
 800df44:	dfc00415 	stw	ra,16(sp)
 800df48:	df000315 	stw	fp,12(sp)
 800df4c:	df000304 	addi	fp,sp,12
 800df50:	e13ffd15 	stw	r4,-12(fp)
 800df54:	e17ffe15 	stw	r5,-8(fp)
 800df58:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 800df5c:	e0bffd17 	ldw	r2,-12(fp)
 800df60:	10c00017 	ldw	r3,0(r2)
 800df64:	e0bfff17 	ldw	r2,-4(fp)
 800df68:	1809883a 	mov	r4,r3
 800df6c:	e17ffe17 	ldw	r5,-8(fp)
 800df70:	100d883a 	mov	r6,r2
 800df74:	800de540 	call	800de54 <alt_up_character_lcd_write>
	return 0;
 800df78:	0005883a 	mov	r2,zero
}
 800df7c:	e037883a 	mov	sp,fp
 800df80:	dfc00117 	ldw	ra,4(sp)
 800df84:	df000017 	ldw	fp,0(sp)
 800df88:	dec00204 	addi	sp,sp,8
 800df8c:	f800283a 	ret

0800df90 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 800df90:	defffa04 	addi	sp,sp,-24
 800df94:	dfc00515 	stw	ra,20(sp)
 800df98:	df000415 	stw	fp,16(sp)
 800df9c:	df000404 	addi	fp,sp,16
 800dfa0:	e13ffd15 	stw	r4,-12(fp)
 800dfa4:	e17ffe15 	stw	r5,-8(fp)
 800dfa8:	e1bfff15 	stw	r6,-4(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 800dfac:	e0bffe17 	ldw	r2,-8(fp)
 800dfb0:	10800a28 	cmpgeui	r2,r2,40
 800dfb4:	1000031e 	bne	r2,zero,800dfc4 <alt_up_character_lcd_set_cursor_pos+0x34>
 800dfb8:	e0bfff17 	ldw	r2,-4(fp)
 800dfbc:	108000b0 	cmpltui	r2,r2,2
 800dfc0:	1000021e 	bne	r2,zero,800dfcc <alt_up_character_lcd_set_cursor_pos+0x3c>
		// invalid argument
		return -1;
 800dfc4:	00bfffc4 	movi	r2,-1
 800dfc8:	00000906 	br	800dff0 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800dfcc:	e13ffe17 	ldw	r4,-8(fp)
 800dfd0:	e17fff17 	ldw	r5,-4(fp)
 800dfd4:	800dd300 	call	800dd30 <get_DDRAM_addr>
 800dfd8:	e0bffc05 	stb	r2,-16(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 800dfdc:	e0bffc03 	ldbu	r2,-16(fp)
 800dfe0:	e13ffd17 	ldw	r4,-12(fp)
 800dfe4:	100b883a 	mov	r5,r2
 800dfe8:	800dda40 	call	800dda4 <alt_up_character_lcd_send_cmd>
	return 0;
 800dfec:	0005883a 	mov	r2,zero
}
 800dff0:	e037883a 	mov	sp,fp
 800dff4:	dfc00117 	ldw	ra,4(sp)
 800dff8:	df000017 	ldw	fp,0(sp)
 800dffc:	dec00204 	addi	sp,sp,8
 800e000:	f800283a 	ret

0800e004 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800e004:	defffb04 	addi	sp,sp,-20
 800e008:	dfc00415 	stw	ra,16(sp)
 800e00c:	df000315 	stw	fp,12(sp)
 800e010:	df000304 	addi	fp,sp,12
 800e014:	e13ffe15 	stw	r4,-8(fp)
 800e018:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800e01c:	e0bfff17 	ldw	r2,-4(fp)
 800e020:	1000011e 	bne	r2,zero,800e028 <alt_up_character_lcd_shift_cursor+0x24>
		// don't ask me to do nothing 
		return;
 800e024:	00001406 	br	800e078 <alt_up_character_lcd_shift_cursor+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800e028:	e0bfff17 	ldw	r2,-4(fp)
 800e02c:	0080020e 	bge	zero,r2,800e038 <alt_up_character_lcd_shift_cursor+0x34>
 800e030:	00800504 	movi	r2,20
 800e034:	00000106 	br	800e03c <alt_up_character_lcd_shift_cursor+0x38>
 800e038:	00800404 	movi	r2,16
 800e03c:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800e040:	e0bfff17 	ldw	r2,-4(fp)
 800e044:	1000010e 	bge	r2,zero,800e04c <alt_up_character_lcd_shift_cursor+0x48>
 800e048:	0085c83a 	sub	r2,zero,r2
 800e04c:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800e050:	00000406 	br	800e064 <alt_up_character_lcd_shift_cursor+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 800e054:	e0bffd43 	ldbu	r2,-11(fp)
 800e058:	e13ffe17 	ldw	r4,-8(fp)
 800e05c:	100b883a 	mov	r5,r2
 800e060:	800dda40 	call	800dda4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800e064:	e0bffd03 	ldbu	r2,-12(fp)
 800e068:	10ffffc4 	addi	r3,r2,-1
 800e06c:	e0fffd05 	stb	r3,-12(fp)
 800e070:	10803fcc 	andi	r2,r2,255
 800e074:	103ff71e 	bne	r2,zero,800e054 <__alt_data_end+0xfc00e054>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800e078:	e037883a 	mov	sp,fp
 800e07c:	dfc00117 	ldw	ra,4(sp)
 800e080:	df000017 	ldw	fp,0(sp)
 800e084:	dec00204 	addi	sp,sp,8
 800e088:	f800283a 	ret

0800e08c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 800e08c:	defffb04 	addi	sp,sp,-20
 800e090:	dfc00415 	stw	ra,16(sp)
 800e094:	df000315 	stw	fp,12(sp)
 800e098:	df000304 	addi	fp,sp,12
 800e09c:	e13ffe15 	stw	r4,-8(fp)
 800e0a0:	e17fff15 	stw	r5,-4(fp)
	if (x_right_shift_offset == 0) 
 800e0a4:	e0bfff17 	ldw	r2,-4(fp)
 800e0a8:	1000011e 	bne	r2,zero,800e0b0 <alt_up_character_lcd_shift_display+0x24>
		// don't ask me to do nothing 
		return;
 800e0ac:	00001406 	br	800e100 <alt_up_character_lcd_shift_display+0x74>

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
 800e0b0:	e0bfff17 	ldw	r2,-4(fp)
 800e0b4:	0080020e 	bge	zero,r2,800e0c0 <alt_up_character_lcd_shift_display+0x34>
 800e0b8:	00800704 	movi	r2,28
 800e0bc:	00000106 	br	800e0c4 <alt_up_character_lcd_shift_display+0x38>
 800e0c0:	00800604 	movi	r2,24
 800e0c4:	e0bffd45 	stb	r2,-11(fp)
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
 800e0c8:	e0bfff17 	ldw	r2,-4(fp)
 800e0cc:	1000010e 	bge	r2,zero,800e0d4 <alt_up_character_lcd_shift_display+0x48>
 800e0d0:	0085c83a 	sub	r2,zero,r2
 800e0d4:	e0bffd05 	stb	r2,-12(fp)
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800e0d8:	00000406 	br	800e0ec <alt_up_character_lcd_shift_display+0x60>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 800e0dc:	e0bffd43 	ldbu	r2,-11(fp)
 800e0e0:	e13ffe17 	ldw	r4,-8(fp)
 800e0e4:	100b883a 	mov	r5,r2
 800e0e8:	800dda40 	call	800dda4 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 800e0ec:	e0bffd03 	ldbu	r2,-12(fp)
 800e0f0:	10ffffc4 	addi	r3,r2,-1
 800e0f4:	e0fffd05 	stb	r3,-12(fp)
 800e0f8:	10803fcc 	andi	r2,r2,255
 800e0fc:	103ff71e 	bne	r2,zero,800e0dc <__alt_data_end+0xfc00e0dc>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 800e100:	e037883a 	mov	sp,fp
 800e104:	dfc00117 	ldw	ra,4(sp)
 800e108:	df000017 	ldw	fp,0(sp)
 800e10c:	dec00204 	addi	sp,sp,8
 800e110:	f800283a 	ret

0800e114 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 800e114:	defffa04 	addi	sp,sp,-24
 800e118:	dfc00515 	stw	ra,20(sp)
 800e11c:	df000415 	stw	fp,16(sp)
 800e120:	df000404 	addi	fp,sp,16
 800e124:	e13ffd15 	stw	r4,-12(fp)
 800e128:	e17ffe15 	stw	r5,-8(fp)
 800e12c:	e1bfff15 	stw	r6,-4(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 800e130:	e0bffe17 	ldw	r2,-8(fp)
 800e134:	10800a28 	cmpgeui	r2,r2,40
 800e138:	1000031e 	bne	r2,zero,800e148 <alt_up_character_lcd_erase_pos+0x34>
 800e13c:	e0bfff17 	ldw	r2,-4(fp)
 800e140:	108000b0 	cmpltui	r2,r2,2
 800e144:	1000021e 	bne	r2,zero,800e150 <alt_up_character_lcd_erase_pos+0x3c>
		return -1;
 800e148:	00bfffc4 	movi	r2,-1
 800e14c:	00000f06 	br	800e18c <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 800e150:	e13ffe17 	ldw	r4,-8(fp)
 800e154:	e17fff17 	ldw	r5,-4(fp)
 800e158:	800dd300 	call	800dd30 <get_DDRAM_addr>
 800e15c:	e0bffc05 	stb	r2,-16(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 800e160:	e0bffc03 	ldbu	r2,-16(fp)
 800e164:	e13ffd17 	ldw	r4,-12(fp)
 800e168:	100b883a 	mov	r5,r2
 800e16c:	800dda40 	call	800dda4 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 800e170:	e0bffd17 	ldw	r2,-12(fp)
 800e174:	10800a17 	ldw	r2,40(r2)
 800e178:	10800044 	addi	r2,r2,1
 800e17c:	1007883a 	mov	r3,r2
 800e180:	00800084 	movi	r2,2
 800e184:	18800025 	stbio	r2,0(r3)
	return 0;
 800e188:	0005883a 	mov	r2,zero
}
 800e18c:	e037883a 	mov	sp,fp
 800e190:	dfc00117 	ldw	ra,4(sp)
 800e194:	df000017 	ldw	fp,0(sp)
 800e198:	dec00204 	addi	sp,sp,8
 800e19c:	f800283a 	ret

0800e1a0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 800e1a0:	defffd04 	addi	sp,sp,-12
 800e1a4:	dfc00215 	stw	ra,8(sp)
 800e1a8:	df000115 	stw	fp,4(sp)
 800e1ac:	df000104 	addi	fp,sp,4
 800e1b0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 800e1b4:	e13fff17 	ldw	r4,-4(fp)
 800e1b8:	01400304 	movi	r5,12
 800e1bc:	800dda40 	call	800dda4 <alt_up_character_lcd_send_cmd>
}
 800e1c0:	e037883a 	mov	sp,fp
 800e1c4:	dfc00117 	ldw	ra,4(sp)
 800e1c8:	df000017 	ldw	fp,0(sp)
 800e1cc:	dec00204 	addi	sp,sp,8
 800e1d0:	f800283a 	ret

0800e1d4 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 800e1d4:	defffd04 	addi	sp,sp,-12
 800e1d8:	dfc00215 	stw	ra,8(sp)
 800e1dc:	df000115 	stw	fp,4(sp)
 800e1e0:	df000104 	addi	fp,sp,4
 800e1e4:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 800e1e8:	e13fff17 	ldw	r4,-4(fp)
 800e1ec:	014003c4 	movi	r5,15
 800e1f0:	800dda40 	call	800dda4 <alt_up_character_lcd_send_cmd>
}
 800e1f4:	e037883a 	mov	sp,fp
 800e1f8:	dfc00117 	ldw	ra,4(sp)
 800e1fc:	df000017 	ldw	fp,0(sp)
 800e200:	dec00204 	addi	sp,sp,8
 800e204:	f800283a 	ret

0800e208 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800e208:	defff504 	addi	sp,sp,-44
 800e20c:	df000a15 	stw	fp,40(sp)
 800e210:	df000a04 	addi	fp,sp,40
 800e214:	e13ffc15 	stw	r4,-16(fp)
 800e218:	e17ffd15 	stw	r5,-12(fp)
 800e21c:	e1bffe15 	stw	r6,-8(fp)
 800e220:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800e224:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800e228:	00820074 	movhi	r2,2049
 800e22c:	108b7f04 	addi	r2,r2,11772
 800e230:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 800e234:	10003f26 	beq	r2,zero,800e334 <alt_alarm_start+0x12c>
  {
    if (alarm)
 800e238:	e0bffc17 	ldw	r2,-16(fp)
 800e23c:	10003b26 	beq	r2,zero,800e32c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 800e240:	e0bffc17 	ldw	r2,-16(fp)
 800e244:	e0fffe17 	ldw	r3,-8(fp)
 800e248:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800e24c:	e0bffc17 	ldw	r2,-16(fp)
 800e250:	e0ffff17 	ldw	r3,-4(fp)
 800e254:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e258:	0005303a 	rdctl	r2,status
 800e25c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e260:	e0fff817 	ldw	r3,-32(fp)
 800e264:	00bfff84 	movi	r2,-2
 800e268:	1884703a 	and	r2,r3,r2
 800e26c:	1001703a 	wrctl	status,r2
  
  return context;
 800e270:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 800e274:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800e278:	00820074 	movhi	r2,2049
 800e27c:	108b8004 	addi	r2,r2,11776
 800e280:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 800e284:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800e288:	e0fffd17 	ldw	r3,-12(fp)
 800e28c:	e0bff617 	ldw	r2,-40(fp)
 800e290:	1885883a 	add	r2,r3,r2
 800e294:	10c00044 	addi	r3,r2,1
 800e298:	e0bffc17 	ldw	r2,-16(fp)
 800e29c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800e2a0:	e0bffc17 	ldw	r2,-16(fp)
 800e2a4:	10c00217 	ldw	r3,8(r2)
 800e2a8:	e0bff617 	ldw	r2,-40(fp)
 800e2ac:	1880042e 	bgeu	r3,r2,800e2c0 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 800e2b0:	e0bffc17 	ldw	r2,-16(fp)
 800e2b4:	00c00044 	movi	r3,1
 800e2b8:	10c00405 	stb	r3,16(r2)
 800e2bc:	00000206 	br	800e2c8 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 800e2c0:	e0bffc17 	ldw	r2,-16(fp)
 800e2c4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800e2c8:	e0fffc17 	ldw	r3,-16(fp)
 800e2cc:	00820074 	movhi	r2,2049
 800e2d0:	1084ac04 	addi	r2,r2,4784
 800e2d4:	e0bff915 	stw	r2,-28(fp)
 800e2d8:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800e2dc:	e0bffa17 	ldw	r2,-24(fp)
 800e2e0:	e0fff917 	ldw	r3,-28(fp)
 800e2e4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800e2e8:	e0bff917 	ldw	r2,-28(fp)
 800e2ec:	10c00017 	ldw	r3,0(r2)
 800e2f0:	e0bffa17 	ldw	r2,-24(fp)
 800e2f4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800e2f8:	e0bff917 	ldw	r2,-28(fp)
 800e2fc:	10800017 	ldw	r2,0(r2)
 800e300:	e0fffa17 	ldw	r3,-24(fp)
 800e304:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800e308:	e0bff917 	ldw	r2,-28(fp)
 800e30c:	e0fffa17 	ldw	r3,-24(fp)
 800e310:	10c00015 	stw	r3,0(r2)
 800e314:	e0bff717 	ldw	r2,-36(fp)
 800e318:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e31c:	e0bffb17 	ldw	r2,-20(fp)
 800e320:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800e324:	0005883a 	mov	r2,zero
 800e328:	00000306 	br	800e338 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 800e32c:	00bffa84 	movi	r2,-22
 800e330:	00000106 	br	800e338 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 800e334:	00bfde84 	movi	r2,-134
  }
}
 800e338:	e037883a 	mov	sp,fp
 800e33c:	df000017 	ldw	fp,0(sp)
 800e340:	dec00104 	addi	sp,sp,4
 800e344:	f800283a 	ret

0800e348 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800e348:	deffff04 	addi	sp,sp,-4
 800e34c:	df000015 	stw	fp,0(sp)
 800e350:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800e354:	e037883a 	mov	sp,fp
 800e358:	df000017 	ldw	fp,0(sp)
 800e35c:	dec00104 	addi	sp,sp,4
 800e360:	f800283a 	ret

0800e364 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e364:	defffe04 	addi	sp,sp,-8
 800e368:	dfc00115 	stw	ra,4(sp)
 800e36c:	df000015 	stw	fp,0(sp)
 800e370:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e374:	00820074 	movhi	r2,2049
 800e378:	1084a904 	addi	r2,r2,4772
 800e37c:	10800017 	ldw	r2,0(r2)
 800e380:	10000526 	beq	r2,zero,800e398 <alt_get_errno+0x34>
 800e384:	00820074 	movhi	r2,2049
 800e388:	1084a904 	addi	r2,r2,4772
 800e38c:	10800017 	ldw	r2,0(r2)
 800e390:	103ee83a 	callr	r2
 800e394:	00000206 	br	800e3a0 <alt_get_errno+0x3c>
 800e398:	00820074 	movhi	r2,2049
 800e39c:	108b7a04 	addi	r2,r2,11752
}
 800e3a0:	e037883a 	mov	sp,fp
 800e3a4:	dfc00117 	ldw	ra,4(sp)
 800e3a8:	df000017 	ldw	fp,0(sp)
 800e3ac:	dec00204 	addi	sp,sp,8
 800e3b0:	f800283a 	ret

0800e3b4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800e3b4:	defffa04 	addi	sp,sp,-24
 800e3b8:	dfc00515 	stw	ra,20(sp)
 800e3bc:	df000415 	stw	fp,16(sp)
 800e3c0:	df000404 	addi	fp,sp,16
 800e3c4:	e13ffe15 	stw	r4,-8(fp)
 800e3c8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800e3cc:	e0bffe17 	ldw	r2,-8(fp)
 800e3d0:	10000326 	beq	r2,zero,800e3e0 <alt_dev_llist_insert+0x2c>
 800e3d4:	e0bffe17 	ldw	r2,-8(fp)
 800e3d8:	10800217 	ldw	r2,8(r2)
 800e3dc:	1000061e 	bne	r2,zero,800e3f8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800e3e0:	800e3640 	call	800e364 <alt_get_errno>
 800e3e4:	1007883a 	mov	r3,r2
 800e3e8:	00800584 	movi	r2,22
 800e3ec:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800e3f0:	00bffa84 	movi	r2,-22
 800e3f4:	00001306 	br	800e444 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800e3f8:	e0bffe17 	ldw	r2,-8(fp)
 800e3fc:	e0ffff17 	ldw	r3,-4(fp)
 800e400:	e0fffc15 	stw	r3,-16(fp)
 800e404:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800e408:	e0bffd17 	ldw	r2,-12(fp)
 800e40c:	e0fffc17 	ldw	r3,-16(fp)
 800e410:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800e414:	e0bffc17 	ldw	r2,-16(fp)
 800e418:	10c00017 	ldw	r3,0(r2)
 800e41c:	e0bffd17 	ldw	r2,-12(fp)
 800e420:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800e424:	e0bffc17 	ldw	r2,-16(fp)
 800e428:	10800017 	ldw	r2,0(r2)
 800e42c:	e0fffd17 	ldw	r3,-12(fp)
 800e430:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800e434:	e0bffc17 	ldw	r2,-16(fp)
 800e438:	e0fffd17 	ldw	r3,-12(fp)
 800e43c:	10c00015 	stw	r3,0(r2)

  return 0;  
 800e440:	0005883a 	mov	r2,zero
}
 800e444:	e037883a 	mov	sp,fp
 800e448:	dfc00117 	ldw	ra,4(sp)
 800e44c:	df000017 	ldw	fp,0(sp)
 800e450:	dec00204 	addi	sp,sp,8
 800e454:	f800283a 	ret

0800e458 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800e458:	defffd04 	addi	sp,sp,-12
 800e45c:	dfc00215 	stw	ra,8(sp)
 800e460:	df000115 	stw	fp,4(sp)
 800e464:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800e468:	00820074 	movhi	r2,2049
 800e46c:	10bcff04 	addi	r2,r2,-3076
 800e470:	e0bfff15 	stw	r2,-4(fp)
 800e474:	00000606 	br	800e490 <_do_ctors+0x38>
        (*ctor) (); 
 800e478:	e0bfff17 	ldw	r2,-4(fp)
 800e47c:	10800017 	ldw	r2,0(r2)
 800e480:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800e484:	e0bfff17 	ldw	r2,-4(fp)
 800e488:	10bfff04 	addi	r2,r2,-4
 800e48c:	e0bfff15 	stw	r2,-4(fp)
 800e490:	e0ffff17 	ldw	r3,-4(fp)
 800e494:	00820074 	movhi	r2,2049
 800e498:	10bd0004 	addi	r2,r2,-3072
 800e49c:	18bff62e 	bgeu	r3,r2,800e478 <__alt_data_end+0xfc00e478>
        (*ctor) (); 
}
 800e4a0:	e037883a 	mov	sp,fp
 800e4a4:	dfc00117 	ldw	ra,4(sp)
 800e4a8:	df000017 	ldw	fp,0(sp)
 800e4ac:	dec00204 	addi	sp,sp,8
 800e4b0:	f800283a 	ret

0800e4b4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800e4b4:	defffd04 	addi	sp,sp,-12
 800e4b8:	dfc00215 	stw	ra,8(sp)
 800e4bc:	df000115 	stw	fp,4(sp)
 800e4c0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800e4c4:	00820074 	movhi	r2,2049
 800e4c8:	10bcff04 	addi	r2,r2,-3076
 800e4cc:	e0bfff15 	stw	r2,-4(fp)
 800e4d0:	00000606 	br	800e4ec <_do_dtors+0x38>
        (*dtor) (); 
 800e4d4:	e0bfff17 	ldw	r2,-4(fp)
 800e4d8:	10800017 	ldw	r2,0(r2)
 800e4dc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800e4e0:	e0bfff17 	ldw	r2,-4(fp)
 800e4e4:	10bfff04 	addi	r2,r2,-4
 800e4e8:	e0bfff15 	stw	r2,-4(fp)
 800e4ec:	e0ffff17 	ldw	r3,-4(fp)
 800e4f0:	00820074 	movhi	r2,2049
 800e4f4:	10bd0004 	addi	r2,r2,-3072
 800e4f8:	18bff62e 	bgeu	r3,r2,800e4d4 <__alt_data_end+0xfc00e4d4>
        (*dtor) (); 
}
 800e4fc:	e037883a 	mov	sp,fp
 800e500:	dfc00117 	ldw	ra,4(sp)
 800e504:	df000017 	ldw	fp,0(sp)
 800e508:	dec00204 	addi	sp,sp,8
 800e50c:	f800283a 	ret

0800e510 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800e510:	defffa04 	addi	sp,sp,-24
 800e514:	dfc00515 	stw	ra,20(sp)
 800e518:	df000415 	stw	fp,16(sp)
 800e51c:	df000404 	addi	fp,sp,16
 800e520:	e13ffe15 	stw	r4,-8(fp)
 800e524:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800e528:	e0bfff17 	ldw	r2,-4(fp)
 800e52c:	10800017 	ldw	r2,0(r2)
 800e530:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800e534:	e13ffe17 	ldw	r4,-8(fp)
 800e538:	800053c0 	call	800053c <strlen>
 800e53c:	10800044 	addi	r2,r2,1
 800e540:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800e544:	00000d06 	br	800e57c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800e548:	e0bffc17 	ldw	r2,-16(fp)
 800e54c:	10c00217 	ldw	r3,8(r2)
 800e550:	e0bffd17 	ldw	r2,-12(fp)
 800e554:	1809883a 	mov	r4,r3
 800e558:	e17ffe17 	ldw	r5,-8(fp)
 800e55c:	100d883a 	mov	r6,r2
 800e560:	800f0a80 	call	800f0a8 <memcmp>
 800e564:	1000021e 	bne	r2,zero,800e570 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800e568:	e0bffc17 	ldw	r2,-16(fp)
 800e56c:	00000706 	br	800e58c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800e570:	e0bffc17 	ldw	r2,-16(fp)
 800e574:	10800017 	ldw	r2,0(r2)
 800e578:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800e57c:	e0fffc17 	ldw	r3,-16(fp)
 800e580:	e0bfff17 	ldw	r2,-4(fp)
 800e584:	18bff01e 	bne	r3,r2,800e548 <__alt_data_end+0xfc00e548>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 800e588:	0005883a 	mov	r2,zero
}
 800e58c:	e037883a 	mov	sp,fp
 800e590:	dfc00117 	ldw	ra,4(sp)
 800e594:	df000017 	ldw	fp,0(sp)
 800e598:	dec00204 	addi	sp,sp,8
 800e59c:	f800283a 	ret

0800e5a0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800e5a0:	defffe04 	addi	sp,sp,-8
 800e5a4:	dfc00115 	stw	ra,4(sp)
 800e5a8:	df000015 	stw	fp,0(sp)
 800e5ac:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 800e5b0:	0009883a 	mov	r4,zero
 800e5b4:	01440004 	movi	r5,4096
 800e5b8:	800efd00 	call	800efd0 <alt_icache_flush>
#endif
}
 800e5bc:	e037883a 	mov	sp,fp
 800e5c0:	dfc00117 	ldw	ra,4(sp)
 800e5c4:	df000017 	ldw	fp,0(sp)
 800e5c8:	dec00204 	addi	sp,sp,8
 800e5cc:	f800283a 	ret

0800e5d0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800e5d0:	defff904 	addi	sp,sp,-28
 800e5d4:	dfc00615 	stw	ra,24(sp)
 800e5d8:	df000515 	stw	fp,20(sp)
 800e5dc:	df000504 	addi	fp,sp,20
 800e5e0:	e13ffc15 	stw	r4,-16(fp)
 800e5e4:	e17ffd15 	stw	r5,-12(fp)
 800e5e8:	e1bffe15 	stw	r6,-8(fp)
 800e5ec:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800e5f0:	e0800217 	ldw	r2,8(fp)
 800e5f4:	d8800015 	stw	r2,0(sp)
 800e5f8:	e13ffc17 	ldw	r4,-16(fp)
 800e5fc:	e17ffd17 	ldw	r5,-12(fp)
 800e600:	e1bffe17 	ldw	r6,-8(fp)
 800e604:	e1ffff17 	ldw	r7,-4(fp)
 800e608:	800e7b00 	call	800e7b0 <alt_iic_isr_register>
}  
 800e60c:	e037883a 	mov	sp,fp
 800e610:	dfc00117 	ldw	ra,4(sp)
 800e614:	df000017 	ldw	fp,0(sp)
 800e618:	dec00204 	addi	sp,sp,8
 800e61c:	f800283a 	ret

0800e620 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800e620:	defff904 	addi	sp,sp,-28
 800e624:	df000615 	stw	fp,24(sp)
 800e628:	df000604 	addi	fp,sp,24
 800e62c:	e13ffe15 	stw	r4,-8(fp)
 800e630:	e17fff15 	stw	r5,-4(fp)
 800e634:	e0bfff17 	ldw	r2,-4(fp)
 800e638:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e63c:	0005303a 	rdctl	r2,status
 800e640:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e644:	e0fffb17 	ldw	r3,-20(fp)
 800e648:	00bfff84 	movi	r2,-2
 800e64c:	1884703a 	and	r2,r3,r2
 800e650:	1001703a 	wrctl	status,r2
  
  return context;
 800e654:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800e658:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 800e65c:	e0bffa17 	ldw	r2,-24(fp)
 800e660:	00c00044 	movi	r3,1
 800e664:	1884983a 	sll	r2,r3,r2
 800e668:	1007883a 	mov	r3,r2
 800e66c:	00820074 	movhi	r2,2049
 800e670:	108b7e04 	addi	r2,r2,11768
 800e674:	10800017 	ldw	r2,0(r2)
 800e678:	1886b03a 	or	r3,r3,r2
 800e67c:	00820074 	movhi	r2,2049
 800e680:	108b7e04 	addi	r2,r2,11768
 800e684:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800e688:	00820074 	movhi	r2,2049
 800e68c:	108b7e04 	addi	r2,r2,11768
 800e690:	10800017 	ldw	r2,0(r2)
 800e694:	100170fa 	wrctl	ienable,r2
 800e698:	e0bffc17 	ldw	r2,-16(fp)
 800e69c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e6a0:	e0bffd17 	ldw	r2,-12(fp)
 800e6a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800e6a8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800e6ac:	0001883a 	nop
}
 800e6b0:	e037883a 	mov	sp,fp
 800e6b4:	df000017 	ldw	fp,0(sp)
 800e6b8:	dec00104 	addi	sp,sp,4
 800e6bc:	f800283a 	ret

0800e6c0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800e6c0:	defff904 	addi	sp,sp,-28
 800e6c4:	df000615 	stw	fp,24(sp)
 800e6c8:	df000604 	addi	fp,sp,24
 800e6cc:	e13ffe15 	stw	r4,-8(fp)
 800e6d0:	e17fff15 	stw	r5,-4(fp)
 800e6d4:	e0bfff17 	ldw	r2,-4(fp)
 800e6d8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e6dc:	0005303a 	rdctl	r2,status
 800e6e0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e6e4:	e0fffb17 	ldw	r3,-20(fp)
 800e6e8:	00bfff84 	movi	r2,-2
 800e6ec:	1884703a 	and	r2,r3,r2
 800e6f0:	1001703a 	wrctl	status,r2
  
  return context;
 800e6f4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800e6f8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 800e6fc:	e0bffa17 	ldw	r2,-24(fp)
 800e700:	00c00044 	movi	r3,1
 800e704:	1884983a 	sll	r2,r3,r2
 800e708:	0084303a 	nor	r2,zero,r2
 800e70c:	1007883a 	mov	r3,r2
 800e710:	00820074 	movhi	r2,2049
 800e714:	108b7e04 	addi	r2,r2,11768
 800e718:	10800017 	ldw	r2,0(r2)
 800e71c:	1886703a 	and	r3,r3,r2
 800e720:	00820074 	movhi	r2,2049
 800e724:	108b7e04 	addi	r2,r2,11768
 800e728:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800e72c:	00820074 	movhi	r2,2049
 800e730:	108b7e04 	addi	r2,r2,11768
 800e734:	10800017 	ldw	r2,0(r2)
 800e738:	100170fa 	wrctl	ienable,r2
 800e73c:	e0bffc17 	ldw	r2,-16(fp)
 800e740:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e744:	e0bffd17 	ldw	r2,-12(fp)
 800e748:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800e74c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800e750:	0001883a 	nop
}
 800e754:	e037883a 	mov	sp,fp
 800e758:	df000017 	ldw	fp,0(sp)
 800e75c:	dec00104 	addi	sp,sp,4
 800e760:	f800283a 	ret

0800e764 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800e764:	defffc04 	addi	sp,sp,-16
 800e768:	df000315 	stw	fp,12(sp)
 800e76c:	df000304 	addi	fp,sp,12
 800e770:	e13ffe15 	stw	r4,-8(fp)
 800e774:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800e778:	000530fa 	rdctl	r2,ienable
 800e77c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800e780:	e0bfff17 	ldw	r2,-4(fp)
 800e784:	00c00044 	movi	r3,1
 800e788:	1884983a 	sll	r2,r3,r2
 800e78c:	1007883a 	mov	r3,r2
 800e790:	e0bffd17 	ldw	r2,-12(fp)
 800e794:	1884703a 	and	r2,r3,r2
 800e798:	1004c03a 	cmpne	r2,r2,zero
 800e79c:	10803fcc 	andi	r2,r2,255
}
 800e7a0:	e037883a 	mov	sp,fp
 800e7a4:	df000017 	ldw	fp,0(sp)
 800e7a8:	dec00104 	addi	sp,sp,4
 800e7ac:	f800283a 	ret

0800e7b0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800e7b0:	defff504 	addi	sp,sp,-44
 800e7b4:	dfc00a15 	stw	ra,40(sp)
 800e7b8:	df000915 	stw	fp,36(sp)
 800e7bc:	df000904 	addi	fp,sp,36
 800e7c0:	e13ffc15 	stw	r4,-16(fp)
 800e7c4:	e17ffd15 	stw	r5,-12(fp)
 800e7c8:	e1bffe15 	stw	r6,-8(fp)
 800e7cc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 800e7d0:	00bffa84 	movi	r2,-22
 800e7d4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800e7d8:	e0bffd17 	ldw	r2,-12(fp)
 800e7dc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800e7e0:	e0bff817 	ldw	r2,-32(fp)
 800e7e4:	10800808 	cmpgei	r2,r2,32
 800e7e8:	1000271e 	bne	r2,zero,800e888 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800e7ec:	0005303a 	rdctl	r2,status
 800e7f0:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e7f4:	e0fffa17 	ldw	r3,-24(fp)
 800e7f8:	00bfff84 	movi	r2,-2
 800e7fc:	1884703a 	and	r2,r3,r2
 800e800:	1001703a 	wrctl	status,r2
  
  return context;
 800e804:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800e808:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 800e80c:	00820074 	movhi	r2,2049
 800e810:	108b8b04 	addi	r2,r2,11820
 800e814:	e0fff817 	ldw	r3,-32(fp)
 800e818:	180690fa 	slli	r3,r3,3
 800e81c:	10c5883a 	add	r2,r2,r3
 800e820:	e0fffe17 	ldw	r3,-8(fp)
 800e824:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 800e828:	00820074 	movhi	r2,2049
 800e82c:	108b8b04 	addi	r2,r2,11820
 800e830:	e0fff817 	ldw	r3,-32(fp)
 800e834:	180690fa 	slli	r3,r3,3
 800e838:	10c5883a 	add	r2,r2,r3
 800e83c:	10800104 	addi	r2,r2,4
 800e840:	e0ffff17 	ldw	r3,-4(fp)
 800e844:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800e848:	e0bffe17 	ldw	r2,-8(fp)
 800e84c:	10000526 	beq	r2,zero,800e864 <alt_iic_isr_register+0xb4>
 800e850:	e0bff817 	ldw	r2,-32(fp)
 800e854:	e13ffc17 	ldw	r4,-16(fp)
 800e858:	100b883a 	mov	r5,r2
 800e85c:	800e6200 	call	800e620 <alt_ic_irq_enable>
 800e860:	00000406 	br	800e874 <alt_iic_isr_register+0xc4>
 800e864:	e0bff817 	ldw	r2,-32(fp)
 800e868:	e13ffc17 	ldw	r4,-16(fp)
 800e86c:	100b883a 	mov	r5,r2
 800e870:	800e6c00 	call	800e6c0 <alt_ic_irq_disable>
 800e874:	e0bff715 	stw	r2,-36(fp)
 800e878:	e0bff917 	ldw	r2,-28(fp)
 800e87c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800e880:	e0bffb17 	ldw	r2,-20(fp)
 800e884:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800e888:	e0bff717 	ldw	r2,-36(fp)
}
 800e88c:	e037883a 	mov	sp,fp
 800e890:	dfc00117 	ldw	ra,4(sp)
 800e894:	df000017 	ldw	fp,0(sp)
 800e898:	dec00204 	addi	sp,sp,8
 800e89c:	f800283a 	ret

0800e8a0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800e8a0:	defff904 	addi	sp,sp,-28
 800e8a4:	dfc00615 	stw	ra,24(sp)
 800e8a8:	df000515 	stw	fp,20(sp)
 800e8ac:	df000504 	addi	fp,sp,20
 800e8b0:	e13ffc15 	stw	r4,-16(fp)
 800e8b4:	e17ffd15 	stw	r5,-12(fp)
 800e8b8:	e1bffe15 	stw	r6,-8(fp)
 800e8bc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 800e8c0:	e13ffd17 	ldw	r4,-12(fp)
 800e8c4:	e17ffe17 	ldw	r5,-8(fp)
 800e8c8:	e1bfff17 	ldw	r6,-4(fp)
 800e8cc:	800eaf40 	call	800eaf4 <open>
 800e8d0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 800e8d4:	e0bffb17 	ldw	r2,-20(fp)
 800e8d8:	10001c16 	blt	r2,zero,800e94c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 800e8dc:	00820074 	movhi	r2,2049
 800e8e0:	10801b04 	addi	r2,r2,108
 800e8e4:	e0fffb17 	ldw	r3,-20(fp)
 800e8e8:	18c00324 	muli	r3,r3,12
 800e8ec:	10c5883a 	add	r2,r2,r3
 800e8f0:	10c00017 	ldw	r3,0(r2)
 800e8f4:	e0bffc17 	ldw	r2,-16(fp)
 800e8f8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800e8fc:	00820074 	movhi	r2,2049
 800e900:	10801b04 	addi	r2,r2,108
 800e904:	e0fffb17 	ldw	r3,-20(fp)
 800e908:	18c00324 	muli	r3,r3,12
 800e90c:	10c5883a 	add	r2,r2,r3
 800e910:	10800104 	addi	r2,r2,4
 800e914:	10c00017 	ldw	r3,0(r2)
 800e918:	e0bffc17 	ldw	r2,-16(fp)
 800e91c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800e920:	00820074 	movhi	r2,2049
 800e924:	10801b04 	addi	r2,r2,108
 800e928:	e0fffb17 	ldw	r3,-20(fp)
 800e92c:	18c00324 	muli	r3,r3,12
 800e930:	10c5883a 	add	r2,r2,r3
 800e934:	10800204 	addi	r2,r2,8
 800e938:	10c00017 	ldw	r3,0(r2)
 800e93c:	e0bffc17 	ldw	r2,-16(fp)
 800e940:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800e944:	e13ffb17 	ldw	r4,-20(fp)
 800e948:	800ceb40 	call	800ceb4 <alt_release_fd>
  }
} 
 800e94c:	e037883a 	mov	sp,fp
 800e950:	dfc00117 	ldw	ra,4(sp)
 800e954:	df000017 	ldw	fp,0(sp)
 800e958:	dec00204 	addi	sp,sp,8
 800e95c:	f800283a 	ret

0800e960 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800e960:	defffb04 	addi	sp,sp,-20
 800e964:	dfc00415 	stw	ra,16(sp)
 800e968:	df000315 	stw	fp,12(sp)
 800e96c:	df000304 	addi	fp,sp,12
 800e970:	e13ffd15 	stw	r4,-12(fp)
 800e974:	e17ffe15 	stw	r5,-8(fp)
 800e978:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800e97c:	01020074 	movhi	r4,2049
 800e980:	21001e04 	addi	r4,r4,120
 800e984:	e17ffd17 	ldw	r5,-12(fp)
 800e988:	01800044 	movi	r6,1
 800e98c:	01c07fc4 	movi	r7,511
 800e990:	800e8a00 	call	800e8a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800e994:	01020074 	movhi	r4,2049
 800e998:	21001b04 	addi	r4,r4,108
 800e99c:	e17ffe17 	ldw	r5,-8(fp)
 800e9a0:	000d883a 	mov	r6,zero
 800e9a4:	01c07fc4 	movi	r7,511
 800e9a8:	800e8a00 	call	800e8a0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800e9ac:	01020074 	movhi	r4,2049
 800e9b0:	21002104 	addi	r4,r4,132
 800e9b4:	e17fff17 	ldw	r5,-4(fp)
 800e9b8:	01800044 	movi	r6,1
 800e9bc:	01c07fc4 	movi	r7,511
 800e9c0:	800e8a00 	call	800e8a0 <alt_open_fd>
}  
 800e9c4:	e037883a 	mov	sp,fp
 800e9c8:	dfc00117 	ldw	ra,4(sp)
 800e9cc:	df000017 	ldw	fp,0(sp)
 800e9d0:	dec00204 	addi	sp,sp,8
 800e9d4:	f800283a 	ret

0800e9d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800e9d8:	defffe04 	addi	sp,sp,-8
 800e9dc:	dfc00115 	stw	ra,4(sp)
 800e9e0:	df000015 	stw	fp,0(sp)
 800e9e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800e9e8:	00820074 	movhi	r2,2049
 800e9ec:	1084a904 	addi	r2,r2,4772
 800e9f0:	10800017 	ldw	r2,0(r2)
 800e9f4:	10000526 	beq	r2,zero,800ea0c <alt_get_errno+0x34>
 800e9f8:	00820074 	movhi	r2,2049
 800e9fc:	1084a904 	addi	r2,r2,4772
 800ea00:	10800017 	ldw	r2,0(r2)
 800ea04:	103ee83a 	callr	r2
 800ea08:	00000206 	br	800ea14 <alt_get_errno+0x3c>
 800ea0c:	00820074 	movhi	r2,2049
 800ea10:	108b7a04 	addi	r2,r2,11752
}
 800ea14:	e037883a 	mov	sp,fp
 800ea18:	dfc00117 	ldw	ra,4(sp)
 800ea1c:	df000017 	ldw	fp,0(sp)
 800ea20:	dec00204 	addi	sp,sp,8
 800ea24:	f800283a 	ret

0800ea28 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800ea28:	defffd04 	addi	sp,sp,-12
 800ea2c:	df000215 	stw	fp,8(sp)
 800ea30:	df000204 	addi	fp,sp,8
 800ea34:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800ea38:	e0bfff17 	ldw	r2,-4(fp)
 800ea3c:	10800217 	ldw	r2,8(r2)
 800ea40:	10d00034 	orhi	r3,r2,16384
 800ea44:	e0bfff17 	ldw	r2,-4(fp)
 800ea48:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800ea4c:	e03ffe15 	stw	zero,-8(fp)
 800ea50:	00001d06 	br	800eac8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800ea54:	00820074 	movhi	r2,2049
 800ea58:	10801b04 	addi	r2,r2,108
 800ea5c:	e0fffe17 	ldw	r3,-8(fp)
 800ea60:	18c00324 	muli	r3,r3,12
 800ea64:	10c5883a 	add	r2,r2,r3
 800ea68:	10c00017 	ldw	r3,0(r2)
 800ea6c:	e0bfff17 	ldw	r2,-4(fp)
 800ea70:	10800017 	ldw	r2,0(r2)
 800ea74:	1880111e 	bne	r3,r2,800eabc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800ea78:	00820074 	movhi	r2,2049
 800ea7c:	10801b04 	addi	r2,r2,108
 800ea80:	e0fffe17 	ldw	r3,-8(fp)
 800ea84:	18c00324 	muli	r3,r3,12
 800ea88:	10c5883a 	add	r2,r2,r3
 800ea8c:	10800204 	addi	r2,r2,8
 800ea90:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800ea94:	1000090e 	bge	r2,zero,800eabc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 800ea98:	e0bffe17 	ldw	r2,-8(fp)
 800ea9c:	10c00324 	muli	r3,r2,12
 800eaa0:	00820074 	movhi	r2,2049
 800eaa4:	10801b04 	addi	r2,r2,108
 800eaa8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800eaac:	e0bfff17 	ldw	r2,-4(fp)
 800eab0:	18800226 	beq	r3,r2,800eabc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 800eab4:	00bffcc4 	movi	r2,-13
 800eab8:	00000a06 	br	800eae4 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800eabc:	e0bffe17 	ldw	r2,-8(fp)
 800eac0:	10800044 	addi	r2,r2,1
 800eac4:	e0bffe15 	stw	r2,-8(fp)
 800eac8:	00820074 	movhi	r2,2049
 800eacc:	1084a804 	addi	r2,r2,4768
 800ead0:	10800017 	ldw	r2,0(r2)
 800ead4:	1007883a 	mov	r3,r2
 800ead8:	e0bffe17 	ldw	r2,-8(fp)
 800eadc:	18bfdd2e 	bgeu	r3,r2,800ea54 <__alt_data_end+0xfc00ea54>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800eae0:	0005883a 	mov	r2,zero
}
 800eae4:	e037883a 	mov	sp,fp
 800eae8:	df000017 	ldw	fp,0(sp)
 800eaec:	dec00104 	addi	sp,sp,4
 800eaf0:	f800283a 	ret

0800eaf4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800eaf4:	defff604 	addi	sp,sp,-40
 800eaf8:	dfc00915 	stw	ra,36(sp)
 800eafc:	df000815 	stw	fp,32(sp)
 800eb00:	df000804 	addi	fp,sp,32
 800eb04:	e13ffd15 	stw	r4,-12(fp)
 800eb08:	e17ffe15 	stw	r5,-8(fp)
 800eb0c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800eb10:	00bfffc4 	movi	r2,-1
 800eb14:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 800eb18:	00bffb44 	movi	r2,-19
 800eb1c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 800eb20:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800eb24:	e13ffd17 	ldw	r4,-12(fp)
 800eb28:	01420074 	movhi	r5,2049
 800eb2c:	2944a604 	addi	r5,r5,4760
 800eb30:	800e5100 	call	800e510 <alt_find_dev>
 800eb34:	e0bff815 	stw	r2,-32(fp)
 800eb38:	e0bff817 	ldw	r2,-32(fp)
 800eb3c:	1000051e 	bne	r2,zero,800eb54 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800eb40:	e13ffd17 	ldw	r4,-12(fp)
 800eb44:	800ee080 	call	800ee08 <alt_find_file>
 800eb48:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 800eb4c:	00800044 	movi	r2,1
 800eb50:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800eb54:	e0bff817 	ldw	r2,-32(fp)
 800eb58:	10002926 	beq	r2,zero,800ec00 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800eb5c:	e13ff817 	ldw	r4,-32(fp)
 800eb60:	800ef1c0 	call	800ef1c <alt_get_fd>
 800eb64:	e0bff915 	stw	r2,-28(fp)
 800eb68:	e0bff917 	ldw	r2,-28(fp)
 800eb6c:	1000030e 	bge	r2,zero,800eb7c <open+0x88>
    {
      status = index;
 800eb70:	e0bff917 	ldw	r2,-28(fp)
 800eb74:	e0bffa15 	stw	r2,-24(fp)
 800eb78:	00002306 	br	800ec08 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 800eb7c:	e0bff917 	ldw	r2,-28(fp)
 800eb80:	10c00324 	muli	r3,r2,12
 800eb84:	00820074 	movhi	r2,2049
 800eb88:	10801b04 	addi	r2,r2,108
 800eb8c:	1885883a 	add	r2,r3,r2
 800eb90:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800eb94:	e0fffe17 	ldw	r3,-8(fp)
 800eb98:	00900034 	movhi	r2,16384
 800eb9c:	10bfffc4 	addi	r2,r2,-1
 800eba0:	1886703a 	and	r3,r3,r2
 800eba4:	e0bffc17 	ldw	r2,-16(fp)
 800eba8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800ebac:	e0bffb17 	ldw	r2,-20(fp)
 800ebb0:	1000051e 	bne	r2,zero,800ebc8 <open+0xd4>
 800ebb4:	e13ffc17 	ldw	r4,-16(fp)
 800ebb8:	800ea280 	call	800ea28 <alt_file_locked>
 800ebbc:	e0bffa15 	stw	r2,-24(fp)
 800ebc0:	e0bffa17 	ldw	r2,-24(fp)
 800ebc4:	10001016 	blt	r2,zero,800ec08 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800ebc8:	e0bff817 	ldw	r2,-32(fp)
 800ebcc:	10800317 	ldw	r2,12(r2)
 800ebd0:	10000826 	beq	r2,zero,800ebf4 <open+0x100>
 800ebd4:	e0bff817 	ldw	r2,-32(fp)
 800ebd8:	10800317 	ldw	r2,12(r2)
 800ebdc:	e13ffc17 	ldw	r4,-16(fp)
 800ebe0:	e17ffd17 	ldw	r5,-12(fp)
 800ebe4:	e1bffe17 	ldw	r6,-8(fp)
 800ebe8:	e1ffff17 	ldw	r7,-4(fp)
 800ebec:	103ee83a 	callr	r2
 800ebf0:	00000106 	br	800ebf8 <open+0x104>
 800ebf4:	0005883a 	mov	r2,zero
 800ebf8:	e0bffa15 	stw	r2,-24(fp)
 800ebfc:	00000206 	br	800ec08 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800ec00:	00bffb44 	movi	r2,-19
 800ec04:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800ec08:	e0bffa17 	ldw	r2,-24(fp)
 800ec0c:	1000090e 	bge	r2,zero,800ec34 <open+0x140>
  {
    alt_release_fd (index);  
 800ec10:	e13ff917 	ldw	r4,-28(fp)
 800ec14:	800ceb40 	call	800ceb4 <alt_release_fd>
    ALT_ERRNO = -status;
 800ec18:	800e9d80 	call	800e9d8 <alt_get_errno>
 800ec1c:	1007883a 	mov	r3,r2
 800ec20:	e0bffa17 	ldw	r2,-24(fp)
 800ec24:	0085c83a 	sub	r2,zero,r2
 800ec28:	18800015 	stw	r2,0(r3)
    return -1;
 800ec2c:	00bfffc4 	movi	r2,-1
 800ec30:	00000106 	br	800ec38 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 800ec34:	e0bff917 	ldw	r2,-28(fp)
}
 800ec38:	e037883a 	mov	sp,fp
 800ec3c:	dfc00117 	ldw	ra,4(sp)
 800ec40:	df000017 	ldw	fp,0(sp)
 800ec44:	dec00204 	addi	sp,sp,8
 800ec48:	f800283a 	ret

0800ec4c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800ec4c:	defffa04 	addi	sp,sp,-24
 800ec50:	df000515 	stw	fp,20(sp)
 800ec54:	df000504 	addi	fp,sp,20
 800ec58:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 800ec5c:	0005303a 	rdctl	r2,status
 800ec60:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ec64:	e0fffc17 	ldw	r3,-16(fp)
 800ec68:	00bfff84 	movi	r2,-2
 800ec6c:	1884703a 	and	r2,r3,r2
 800ec70:	1001703a 	wrctl	status,r2
  
  return context;
 800ec74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800ec78:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 800ec7c:	e0bfff17 	ldw	r2,-4(fp)
 800ec80:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800ec84:	e0bffd17 	ldw	r2,-12(fp)
 800ec88:	10800017 	ldw	r2,0(r2)
 800ec8c:	e0fffd17 	ldw	r3,-12(fp)
 800ec90:	18c00117 	ldw	r3,4(r3)
 800ec94:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800ec98:	e0bffd17 	ldw	r2,-12(fp)
 800ec9c:	10800117 	ldw	r2,4(r2)
 800eca0:	e0fffd17 	ldw	r3,-12(fp)
 800eca4:	18c00017 	ldw	r3,0(r3)
 800eca8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800ecac:	e0bffd17 	ldw	r2,-12(fp)
 800ecb0:	e0fffd17 	ldw	r3,-12(fp)
 800ecb4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800ecb8:	e0bffd17 	ldw	r2,-12(fp)
 800ecbc:	e0fffd17 	ldw	r3,-12(fp)
 800ecc0:	10c00015 	stw	r3,0(r2)
 800ecc4:	e0bffb17 	ldw	r2,-20(fp)
 800ecc8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 800eccc:	e0bffe17 	ldw	r2,-8(fp)
 800ecd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800ecd4:	e037883a 	mov	sp,fp
 800ecd8:	df000017 	ldw	fp,0(sp)
 800ecdc:	dec00104 	addi	sp,sp,4
 800ece0:	f800283a 	ret

0800ece4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800ece4:	defffb04 	addi	sp,sp,-20
 800ece8:	dfc00415 	stw	ra,16(sp)
 800ecec:	df000315 	stw	fp,12(sp)
 800ecf0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800ecf4:	d0a00e17 	ldw	r2,-32712(gp)
 800ecf8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800ecfc:	d0a6e217 	ldw	r2,-25720(gp)
 800ed00:	10800044 	addi	r2,r2,1
 800ed04:	d0a6e215 	stw	r2,-25720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800ed08:	00002e06 	br	800edc4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800ed0c:	e0bffd17 	ldw	r2,-12(fp)
 800ed10:	10800017 	ldw	r2,0(r2)
 800ed14:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800ed18:	e0bffd17 	ldw	r2,-12(fp)
 800ed1c:	10800403 	ldbu	r2,16(r2)
 800ed20:	10803fcc 	andi	r2,r2,255
 800ed24:	10000426 	beq	r2,zero,800ed38 <alt_tick+0x54>
 800ed28:	d0a6e217 	ldw	r2,-25720(gp)
 800ed2c:	1000021e 	bne	r2,zero,800ed38 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800ed30:	e0bffd17 	ldw	r2,-12(fp)
 800ed34:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800ed38:	e0bffd17 	ldw	r2,-12(fp)
 800ed3c:	10800217 	ldw	r2,8(r2)
 800ed40:	d0e6e217 	ldw	r3,-25720(gp)
 800ed44:	18801d36 	bltu	r3,r2,800edbc <alt_tick+0xd8>
 800ed48:	e0bffd17 	ldw	r2,-12(fp)
 800ed4c:	10800403 	ldbu	r2,16(r2)
 800ed50:	10803fcc 	andi	r2,r2,255
 800ed54:	1000191e 	bne	r2,zero,800edbc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800ed58:	e0bffd17 	ldw	r2,-12(fp)
 800ed5c:	10800317 	ldw	r2,12(r2)
 800ed60:	e0fffd17 	ldw	r3,-12(fp)
 800ed64:	18c00517 	ldw	r3,20(r3)
 800ed68:	1809883a 	mov	r4,r3
 800ed6c:	103ee83a 	callr	r2
 800ed70:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800ed74:	e0bfff17 	ldw	r2,-4(fp)
 800ed78:	1000031e 	bne	r2,zero,800ed88 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800ed7c:	e13ffd17 	ldw	r4,-12(fp)
 800ed80:	800ec4c0 	call	800ec4c <alt_alarm_stop>
 800ed84:	00000d06 	br	800edbc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800ed88:	e0bffd17 	ldw	r2,-12(fp)
 800ed8c:	10c00217 	ldw	r3,8(r2)
 800ed90:	e0bfff17 	ldw	r2,-4(fp)
 800ed94:	1887883a 	add	r3,r3,r2
 800ed98:	e0bffd17 	ldw	r2,-12(fp)
 800ed9c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800eda0:	e0bffd17 	ldw	r2,-12(fp)
 800eda4:	10c00217 	ldw	r3,8(r2)
 800eda8:	d0a6e217 	ldw	r2,-25720(gp)
 800edac:	1880032e 	bgeu	r3,r2,800edbc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800edb0:	e0bffd17 	ldw	r2,-12(fp)
 800edb4:	00c00044 	movi	r3,1
 800edb8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800edbc:	e0bffe17 	ldw	r2,-8(fp)
 800edc0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800edc4:	e0fffd17 	ldw	r3,-12(fp)
 800edc8:	d0a00e04 	addi	r2,gp,-32712
 800edcc:	18bfcf1e 	bne	r3,r2,800ed0c <__alt_data_end+0xfc00ed0c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800edd0:	0001883a 	nop
}
 800edd4:	e037883a 	mov	sp,fp
 800edd8:	dfc00117 	ldw	ra,4(sp)
 800eddc:	df000017 	ldw	fp,0(sp)
 800ede0:	dec00204 	addi	sp,sp,8
 800ede4:	f800283a 	ret

0800ede8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 800ede8:	deffff04 	addi	sp,sp,-4
 800edec:	df000015 	stw	fp,0(sp)
 800edf0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800edf4:	000170fa 	wrctl	ienable,zero
}
 800edf8:	e037883a 	mov	sp,fp
 800edfc:	df000017 	ldw	fp,0(sp)
 800ee00:	dec00104 	addi	sp,sp,4
 800ee04:	f800283a 	ret

0800ee08 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800ee08:	defffb04 	addi	sp,sp,-20
 800ee0c:	dfc00415 	stw	ra,16(sp)
 800ee10:	df000315 	stw	fp,12(sp)
 800ee14:	df000304 	addi	fp,sp,12
 800ee18:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800ee1c:	00820074 	movhi	r2,2049
 800ee20:	1084a404 	addi	r2,r2,4752
 800ee24:	10800017 	ldw	r2,0(r2)
 800ee28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800ee2c:	00003106 	br	800eef4 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 800ee30:	e0bffd17 	ldw	r2,-12(fp)
 800ee34:	10800217 	ldw	r2,8(r2)
 800ee38:	1009883a 	mov	r4,r2
 800ee3c:	800053c0 	call	800053c <strlen>
 800ee40:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800ee44:	e0bffd17 	ldw	r2,-12(fp)
 800ee48:	10c00217 	ldw	r3,8(r2)
 800ee4c:	e0bffe17 	ldw	r2,-8(fp)
 800ee50:	10bfffc4 	addi	r2,r2,-1
 800ee54:	1885883a 	add	r2,r3,r2
 800ee58:	10800003 	ldbu	r2,0(r2)
 800ee5c:	10803fcc 	andi	r2,r2,255
 800ee60:	1080201c 	xori	r2,r2,128
 800ee64:	10bfe004 	addi	r2,r2,-128
 800ee68:	10800bd8 	cmpnei	r2,r2,47
 800ee6c:	1000031e 	bne	r2,zero,800ee7c <alt_find_file+0x74>
    {
      len -= 1;
 800ee70:	e0bffe17 	ldw	r2,-8(fp)
 800ee74:	10bfffc4 	addi	r2,r2,-1
 800ee78:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800ee7c:	e0bffe17 	ldw	r2,-8(fp)
 800ee80:	e0ffff17 	ldw	r3,-4(fp)
 800ee84:	1885883a 	add	r2,r3,r2
 800ee88:	10800003 	ldbu	r2,0(r2)
 800ee8c:	10803fcc 	andi	r2,r2,255
 800ee90:	1080201c 	xori	r2,r2,128
 800ee94:	10bfe004 	addi	r2,r2,-128
 800ee98:	10800be0 	cmpeqi	r2,r2,47
 800ee9c:	1000081e 	bne	r2,zero,800eec0 <alt_find_file+0xb8>
 800eea0:	e0bffe17 	ldw	r2,-8(fp)
 800eea4:	e0ffff17 	ldw	r3,-4(fp)
 800eea8:	1885883a 	add	r2,r3,r2
 800eeac:	10800003 	ldbu	r2,0(r2)
 800eeb0:	10803fcc 	andi	r2,r2,255
 800eeb4:	1080201c 	xori	r2,r2,128
 800eeb8:	10bfe004 	addi	r2,r2,-128
 800eebc:	10000a1e 	bne	r2,zero,800eee8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 800eec0:	e0bffd17 	ldw	r2,-12(fp)
 800eec4:	10c00217 	ldw	r3,8(r2)
 800eec8:	e0bffe17 	ldw	r2,-8(fp)
 800eecc:	1809883a 	mov	r4,r3
 800eed0:	e17fff17 	ldw	r5,-4(fp)
 800eed4:	100d883a 	mov	r6,r2
 800eed8:	800f0a80 	call	800f0a8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800eedc:	1000021e 	bne	r2,zero,800eee8 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800eee0:	e0bffd17 	ldw	r2,-12(fp)
 800eee4:	00000806 	br	800ef08 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 800eee8:	e0bffd17 	ldw	r2,-12(fp)
 800eeec:	10800017 	ldw	r2,0(r2)
 800eef0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800eef4:	e0fffd17 	ldw	r3,-12(fp)
 800eef8:	00820074 	movhi	r2,2049
 800eefc:	1084a404 	addi	r2,r2,4752
 800ef00:	18bfcb1e 	bne	r3,r2,800ee30 <__alt_data_end+0xfc00ee30>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800ef04:	0005883a 	mov	r2,zero
}
 800ef08:	e037883a 	mov	sp,fp
 800ef0c:	dfc00117 	ldw	ra,4(sp)
 800ef10:	df000017 	ldw	fp,0(sp)
 800ef14:	dec00204 	addi	sp,sp,8
 800ef18:	f800283a 	ret

0800ef1c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800ef1c:	defffc04 	addi	sp,sp,-16
 800ef20:	df000315 	stw	fp,12(sp)
 800ef24:	df000304 	addi	fp,sp,12
 800ef28:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 800ef2c:	00bffa04 	movi	r2,-24
 800ef30:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800ef34:	e03ffd15 	stw	zero,-12(fp)
 800ef38:	00001d06 	br	800efb0 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 800ef3c:	00820074 	movhi	r2,2049
 800ef40:	10801b04 	addi	r2,r2,108
 800ef44:	e0fffd17 	ldw	r3,-12(fp)
 800ef48:	18c00324 	muli	r3,r3,12
 800ef4c:	10c5883a 	add	r2,r2,r3
 800ef50:	10800017 	ldw	r2,0(r2)
 800ef54:	1000131e 	bne	r2,zero,800efa4 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 800ef58:	00820074 	movhi	r2,2049
 800ef5c:	10801b04 	addi	r2,r2,108
 800ef60:	e0fffd17 	ldw	r3,-12(fp)
 800ef64:	18c00324 	muli	r3,r3,12
 800ef68:	10c5883a 	add	r2,r2,r3
 800ef6c:	e0ffff17 	ldw	r3,-4(fp)
 800ef70:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 800ef74:	00820074 	movhi	r2,2049
 800ef78:	1084a804 	addi	r2,r2,4768
 800ef7c:	10c00017 	ldw	r3,0(r2)
 800ef80:	e0bffd17 	ldw	r2,-12(fp)
 800ef84:	1880040e 	bge	r3,r2,800ef98 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 800ef88:	00820074 	movhi	r2,2049
 800ef8c:	1084a804 	addi	r2,r2,4768
 800ef90:	e0fffd17 	ldw	r3,-12(fp)
 800ef94:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 800ef98:	e0bffd17 	ldw	r2,-12(fp)
 800ef9c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 800efa0:	00000606 	br	800efbc <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800efa4:	e0bffd17 	ldw	r2,-12(fp)
 800efa8:	10800044 	addi	r2,r2,1
 800efac:	e0bffd15 	stw	r2,-12(fp)
 800efb0:	e0bffd17 	ldw	r2,-12(fp)
 800efb4:	10800810 	cmplti	r2,r2,32
 800efb8:	103fe01e 	bne	r2,zero,800ef3c <__alt_data_end+0xfc00ef3c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800efbc:	e0bffe17 	ldw	r2,-8(fp)
}
 800efc0:	e037883a 	mov	sp,fp
 800efc4:	df000017 	ldw	fp,0(sp)
 800efc8:	dec00104 	addi	sp,sp,4
 800efcc:	f800283a 	ret

0800efd0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 800efd0:	defffb04 	addi	sp,sp,-20
 800efd4:	df000415 	stw	fp,16(sp)
 800efd8:	df000404 	addi	fp,sp,16
 800efdc:	e13ffe15 	stw	r4,-8(fp)
 800efe0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 800efe4:	e0bfff17 	ldw	r2,-4(fp)
 800efe8:	10840070 	cmpltui	r2,r2,4097
 800efec:	1000021e 	bne	r2,zero,800eff8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 800eff0:	00840004 	movi	r2,4096
 800eff4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 800eff8:	e0fffe17 	ldw	r3,-8(fp)
 800effc:	e0bfff17 	ldw	r2,-4(fp)
 800f000:	1885883a 	add	r2,r3,r2
 800f004:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800f008:	e0bffe17 	ldw	r2,-8(fp)
 800f00c:	e0bffc15 	stw	r2,-16(fp)
 800f010:	00000506 	br	800f028 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 800f014:	e0bffc17 	ldw	r2,-16(fp)
 800f018:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 800f01c:	e0bffc17 	ldw	r2,-16(fp)
 800f020:	10800804 	addi	r2,r2,32
 800f024:	e0bffc15 	stw	r2,-16(fp)
 800f028:	e0fffc17 	ldw	r3,-16(fp)
 800f02c:	e0bffd17 	ldw	r2,-12(fp)
 800f030:	18bff836 	bltu	r3,r2,800f014 <__alt_data_end+0xfc00f014>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 800f034:	e0bffe17 	ldw	r2,-8(fp)
 800f038:	108007cc 	andi	r2,r2,31
 800f03c:	10000226 	beq	r2,zero,800f048 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 800f040:	e0bffc17 	ldw	r2,-16(fp)
 800f044:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 800f048:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 800f04c:	e037883a 	mov	sp,fp
 800f050:	df000017 	ldw	fp,0(sp)
 800f054:	dec00104 	addi	sp,sp,4
 800f058:	f800283a 	ret

0800f05c <atexit>:
 800f05c:	200b883a 	mov	r5,r4
 800f060:	000d883a 	mov	r6,zero
 800f064:	0009883a 	mov	r4,zero
 800f068:	000f883a 	mov	r7,zero
 800f06c:	800f1241 	jmpi	800f124 <__register_exitproc>

0800f070 <exit>:
 800f070:	defffe04 	addi	sp,sp,-8
 800f074:	000b883a 	mov	r5,zero
 800f078:	dc000015 	stw	r16,0(sp)
 800f07c:	dfc00115 	stw	ra,4(sp)
 800f080:	2021883a 	mov	r16,r4
 800f084:	800f2380 	call	800f238 <__call_exitprocs>
 800f088:	00820074 	movhi	r2,2049
 800f08c:	10849e04 	addi	r2,r2,4728
 800f090:	11000017 	ldw	r4,0(r2)
 800f094:	20800f17 	ldw	r2,60(r4)
 800f098:	10000126 	beq	r2,zero,800f0a0 <exit+0x30>
 800f09c:	103ee83a 	callr	r2
 800f0a0:	8009883a 	mov	r4,r16
 800f0a4:	800f3cc0 	call	800f3cc <_exit>

0800f0a8 <memcmp>:
 800f0a8:	01c000c4 	movi	r7,3
 800f0ac:	3980192e 	bgeu	r7,r6,800f114 <memcmp+0x6c>
 800f0b0:	2144b03a 	or	r2,r4,r5
 800f0b4:	11c4703a 	and	r2,r2,r7
 800f0b8:	10000f26 	beq	r2,zero,800f0f8 <memcmp+0x50>
 800f0bc:	20800003 	ldbu	r2,0(r4)
 800f0c0:	28c00003 	ldbu	r3,0(r5)
 800f0c4:	10c0151e 	bne	r2,r3,800f11c <memcmp+0x74>
 800f0c8:	31bfff84 	addi	r6,r6,-2
 800f0cc:	01ffffc4 	movi	r7,-1
 800f0d0:	00000406 	br	800f0e4 <memcmp+0x3c>
 800f0d4:	20800003 	ldbu	r2,0(r4)
 800f0d8:	28c00003 	ldbu	r3,0(r5)
 800f0dc:	31bfffc4 	addi	r6,r6,-1
 800f0e0:	10c00e1e 	bne	r2,r3,800f11c <memcmp+0x74>
 800f0e4:	21000044 	addi	r4,r4,1
 800f0e8:	29400044 	addi	r5,r5,1
 800f0ec:	31fff91e 	bne	r6,r7,800f0d4 <__alt_data_end+0xfc00f0d4>
 800f0f0:	0005883a 	mov	r2,zero
 800f0f4:	f800283a 	ret
 800f0f8:	20c00017 	ldw	r3,0(r4)
 800f0fc:	28800017 	ldw	r2,0(r5)
 800f100:	1880041e 	bne	r3,r2,800f114 <memcmp+0x6c>
 800f104:	31bfff04 	addi	r6,r6,-4
 800f108:	21000104 	addi	r4,r4,4
 800f10c:	29400104 	addi	r5,r5,4
 800f110:	39bff936 	bltu	r7,r6,800f0f8 <__alt_data_end+0xfc00f0f8>
 800f114:	303fe91e 	bne	r6,zero,800f0bc <__alt_data_end+0xfc00f0bc>
 800f118:	003ff506 	br	800f0f0 <__alt_data_end+0xfc00f0f0>
 800f11c:	10c5c83a 	sub	r2,r2,r3
 800f120:	f800283a 	ret

0800f124 <__register_exitproc>:
 800f124:	00820074 	movhi	r2,2049
 800f128:	defffa04 	addi	sp,sp,-24
 800f12c:	10849e04 	addi	r2,r2,4728
 800f130:	dc000315 	stw	r16,12(sp)
 800f134:	14000017 	ldw	r16,0(r2)
 800f138:	dc400415 	stw	r17,16(sp)
 800f13c:	dfc00515 	stw	ra,20(sp)
 800f140:	80805217 	ldw	r2,328(r16)
 800f144:	2023883a 	mov	r17,r4
 800f148:	10003626 	beq	r2,zero,800f224 <__register_exitproc+0x100>
 800f14c:	10c00117 	ldw	r3,4(r2)
 800f150:	010007c4 	movi	r4,31
 800f154:	20c00e16 	blt	r4,r3,800f190 <__register_exitproc+0x6c>
 800f158:	1a400044 	addi	r9,r3,1
 800f15c:	8800211e 	bne	r17,zero,800f1e4 <__register_exitproc+0xc0>
 800f160:	18c00084 	addi	r3,r3,2
 800f164:	18c7883a 	add	r3,r3,r3
 800f168:	18c7883a 	add	r3,r3,r3
 800f16c:	12400115 	stw	r9,4(r2)
 800f170:	10c7883a 	add	r3,r2,r3
 800f174:	19400015 	stw	r5,0(r3)
 800f178:	0005883a 	mov	r2,zero
 800f17c:	dfc00517 	ldw	ra,20(sp)
 800f180:	dc400417 	ldw	r17,16(sp)
 800f184:	dc000317 	ldw	r16,12(sp)
 800f188:	dec00604 	addi	sp,sp,24
 800f18c:	f800283a 	ret
 800f190:	00800034 	movhi	r2,0
 800f194:	10800004 	addi	r2,r2,0
 800f198:	10002526 	beq	r2,zero,800f230 <__register_exitproc+0x10c>
 800f19c:	01006404 	movi	r4,400
 800f1a0:	d9400015 	stw	r5,0(sp)
 800f1a4:	d9800115 	stw	r6,4(sp)
 800f1a8:	d9c00215 	stw	r7,8(sp)
 800f1ac:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 800f1b0:	d9400017 	ldw	r5,0(sp)
 800f1b4:	d9800117 	ldw	r6,4(sp)
 800f1b8:	d9c00217 	ldw	r7,8(sp)
 800f1bc:	10001c26 	beq	r2,zero,800f230 <__register_exitproc+0x10c>
 800f1c0:	80c05217 	ldw	r3,328(r16)
 800f1c4:	10000115 	stw	zero,4(r2)
 800f1c8:	02400044 	movi	r9,1
 800f1cc:	10c00015 	stw	r3,0(r2)
 800f1d0:	80805215 	stw	r2,328(r16)
 800f1d4:	10006215 	stw	zero,392(r2)
 800f1d8:	10006315 	stw	zero,396(r2)
 800f1dc:	0007883a 	mov	r3,zero
 800f1e0:	883fdf26 	beq	r17,zero,800f160 <__alt_data_end+0xfc00f160>
 800f1e4:	18d1883a 	add	r8,r3,r3
 800f1e8:	4211883a 	add	r8,r8,r8
 800f1ec:	1211883a 	add	r8,r2,r8
 800f1f0:	41802215 	stw	r6,136(r8)
 800f1f4:	01000044 	movi	r4,1
 800f1f8:	11806217 	ldw	r6,392(r2)
 800f1fc:	20c8983a 	sll	r4,r4,r3
 800f200:	310cb03a 	or	r6,r6,r4
 800f204:	11806215 	stw	r6,392(r2)
 800f208:	41c04215 	stw	r7,264(r8)
 800f20c:	01800084 	movi	r6,2
 800f210:	89bfd31e 	bne	r17,r6,800f160 <__alt_data_end+0xfc00f160>
 800f214:	11806317 	ldw	r6,396(r2)
 800f218:	3108b03a 	or	r4,r6,r4
 800f21c:	11006315 	stw	r4,396(r2)
 800f220:	003fcf06 	br	800f160 <__alt_data_end+0xfc00f160>
 800f224:	80805304 	addi	r2,r16,332
 800f228:	80805215 	stw	r2,328(r16)
 800f22c:	003fc706 	br	800f14c <__alt_data_end+0xfc00f14c>
 800f230:	00bfffc4 	movi	r2,-1
 800f234:	003fd106 	br	800f17c <__alt_data_end+0xfc00f17c>

0800f238 <__call_exitprocs>:
 800f238:	00820074 	movhi	r2,2049
 800f23c:	10849e04 	addi	r2,r2,4728
 800f240:	10800017 	ldw	r2,0(r2)
 800f244:	defff404 	addi	sp,sp,-48
 800f248:	dd800815 	stw	r22,32(sp)
 800f24c:	d8800015 	stw	r2,0(sp)
 800f250:	10805204 	addi	r2,r2,328
 800f254:	dd000615 	stw	r20,24(sp)
 800f258:	dc800415 	stw	r18,16(sp)
 800f25c:	dfc00b15 	stw	ra,44(sp)
 800f260:	df000a15 	stw	fp,40(sp)
 800f264:	ddc00915 	stw	r23,36(sp)
 800f268:	dd400715 	stw	r21,28(sp)
 800f26c:	dcc00515 	stw	r19,20(sp)
 800f270:	dc400315 	stw	r17,12(sp)
 800f274:	dc000215 	stw	r16,8(sp)
 800f278:	2025883a 	mov	r18,r4
 800f27c:	2829883a 	mov	r20,r5
 800f280:	d8800115 	stw	r2,4(sp)
 800f284:	05bfffc4 	movi	r22,-1
 800f288:	d8800017 	ldw	r2,0(sp)
 800f28c:	14c05217 	ldw	r19,328(r2)
 800f290:	98001d26 	beq	r19,zero,800f308 <__call_exitprocs+0xd0>
 800f294:	dd400117 	ldw	r21,4(sp)
 800f298:	98800117 	ldw	r2,4(r19)
 800f29c:	173fffc4 	addi	fp,r2,-1
 800f2a0:	e0000d16 	blt	fp,zero,800f2d8 <__call_exitprocs+0xa0>
 800f2a4:	14000044 	addi	r16,r2,1
 800f2a8:	8421883a 	add	r16,r16,r16
 800f2ac:	8421883a 	add	r16,r16,r16
 800f2b0:	84402004 	addi	r17,r16,128
 800f2b4:	9c63883a 	add	r17,r19,r17
 800f2b8:	9c21883a 	add	r16,r19,r16
 800f2bc:	a0001e26 	beq	r20,zero,800f338 <__call_exitprocs+0x100>
 800f2c0:	80804017 	ldw	r2,256(r16)
 800f2c4:	15001c26 	beq	r2,r20,800f338 <__call_exitprocs+0x100>
 800f2c8:	e73fffc4 	addi	fp,fp,-1
 800f2cc:	843fff04 	addi	r16,r16,-4
 800f2d0:	8c7fff04 	addi	r17,r17,-4
 800f2d4:	e5bff91e 	bne	fp,r22,800f2bc <__alt_data_end+0xfc00f2bc>
 800f2d8:	00800034 	movhi	r2,0
 800f2dc:	10800004 	addi	r2,r2,0
 800f2e0:	10000926 	beq	r2,zero,800f308 <__call_exitprocs+0xd0>
 800f2e4:	98800117 	ldw	r2,4(r19)
 800f2e8:	1000311e 	bne	r2,zero,800f3b0 <__call_exitprocs+0x178>
 800f2ec:	98800017 	ldw	r2,0(r19)
 800f2f0:	10003426 	beq	r2,zero,800f3c4 <__call_exitprocs+0x18c>
 800f2f4:	9809883a 	mov	r4,r19
 800f2f8:	a8800015 	stw	r2,0(r21)
 800f2fc:	00000000 	call	0 <__alt_mem_sdram-0x8000000>
 800f300:	acc00017 	ldw	r19,0(r21)
 800f304:	983fe41e 	bne	r19,zero,800f298 <__alt_data_end+0xfc00f298>
 800f308:	dfc00b17 	ldw	ra,44(sp)
 800f30c:	df000a17 	ldw	fp,40(sp)
 800f310:	ddc00917 	ldw	r23,36(sp)
 800f314:	dd800817 	ldw	r22,32(sp)
 800f318:	dd400717 	ldw	r21,28(sp)
 800f31c:	dd000617 	ldw	r20,24(sp)
 800f320:	dcc00517 	ldw	r19,20(sp)
 800f324:	dc800417 	ldw	r18,16(sp)
 800f328:	dc400317 	ldw	r17,12(sp)
 800f32c:	dc000217 	ldw	r16,8(sp)
 800f330:	dec00c04 	addi	sp,sp,48
 800f334:	f800283a 	ret
 800f338:	98800117 	ldw	r2,4(r19)
 800f33c:	80c00017 	ldw	r3,0(r16)
 800f340:	10bfffc4 	addi	r2,r2,-1
 800f344:	17001526 	beq	r2,fp,800f39c <__call_exitprocs+0x164>
 800f348:	80000015 	stw	zero,0(r16)
 800f34c:	183fde26 	beq	r3,zero,800f2c8 <__alt_data_end+0xfc00f2c8>
 800f350:	00800044 	movi	r2,1
 800f354:	1708983a 	sll	r4,r2,fp
 800f358:	98806217 	ldw	r2,392(r19)
 800f35c:	9dc00117 	ldw	r23,4(r19)
 800f360:	2084703a 	and	r2,r4,r2
 800f364:	1000061e 	bne	r2,zero,800f380 <__call_exitprocs+0x148>
 800f368:	183ee83a 	callr	r3
 800f36c:	98800117 	ldw	r2,4(r19)
 800f370:	15ffc51e 	bne	r2,r23,800f288 <__alt_data_end+0xfc00f288>
 800f374:	a8800017 	ldw	r2,0(r21)
 800f378:	14ffd326 	beq	r2,r19,800f2c8 <__alt_data_end+0xfc00f2c8>
 800f37c:	003fc206 	br	800f288 <__alt_data_end+0xfc00f288>
 800f380:	98806317 	ldw	r2,396(r19)
 800f384:	2084703a 	and	r2,r4,r2
 800f388:	1000061e 	bne	r2,zero,800f3a4 <__call_exitprocs+0x16c>
 800f38c:	89400017 	ldw	r5,0(r17)
 800f390:	9009883a 	mov	r4,r18
 800f394:	183ee83a 	callr	r3
 800f398:	003ff406 	br	800f36c <__alt_data_end+0xfc00f36c>
 800f39c:	9f000115 	stw	fp,4(r19)
 800f3a0:	003fea06 	br	800f34c <__alt_data_end+0xfc00f34c>
 800f3a4:	89000017 	ldw	r4,0(r17)
 800f3a8:	183ee83a 	callr	r3
 800f3ac:	003fef06 	br	800f36c <__alt_data_end+0xfc00f36c>
 800f3b0:	98800017 	ldw	r2,0(r19)
 800f3b4:	982b883a 	mov	r21,r19
 800f3b8:	1027883a 	mov	r19,r2
 800f3bc:	983fb61e 	bne	r19,zero,800f298 <__alt_data_end+0xfc00f298>
 800f3c0:	003fd106 	br	800f308 <__alt_data_end+0xfc00f308>
 800f3c4:	0005883a 	mov	r2,zero
 800f3c8:	003ffa06 	br	800f3b4 <__alt_data_end+0xfc00f3b4>

0800f3cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800f3cc:	defffd04 	addi	sp,sp,-12
 800f3d0:	df000215 	stw	fp,8(sp)
 800f3d4:	df000204 	addi	fp,sp,8
 800f3d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800f3dc:	0001883a 	nop
 800f3e0:	e0bfff17 	ldw	r2,-4(fp)
 800f3e4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800f3e8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800f3ec:	10000226 	beq	r2,zero,800f3f8 <_exit+0x2c>
    ALT_SIM_FAIL();
 800f3f0:	002af070 	cmpltui	zero,zero,43969
 800f3f4:	00000106 	br	800f3fc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800f3f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800f3fc:	003fff06 	br	800f3fc <__alt_data_end+0xfc00f3fc>
